components:
  schemas:
    AcceptNetPeeringRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        NetPeeringId:
          description: The ID of the Net peering you want to accept.
          type: string
      required:
      - NetPeeringId
      type: object
    AcceptNetPeeringResponse:
      additionalProperties: false
      properties:
        NetPeering:
          $ref: '#/components/schemas/NetPeering'
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    AccepterNet:
      additionalProperties: false
      description: Information about the accepter Net.
      properties:
        AccountId:
          description: The account ID of the owner of the accepter Net.
          type: string
        IpRange:
          description: The IP range for the accepter Net, in CIDR notation (for example, `10.0.0.0/16`).
          type: string
        NetId:
          description: The ID of the accepter Net.
          type: string
      type: object
    AccessKey:
      additionalProperties: false
      description: Information about the access key.
      properties:
        AccessKeyId:
          description: The ID of the access key.
          type: string
        CreationDate:
          description: The date and time (UTC) at which the access key was created.
          format: date-time
          type: string
        ExpirationDate:
          description: The date and time (UTC) at which the access key expires.
          format: date-time
          type: string
        LastModificationDate:
          description: The date and time (UTC) at which the access key was last modified.
          format: date-time
          type: string
        State:
          description: The state of the access key (`ACTIVE` if the key is valid for API calls, or `INACTIVE` if not).
          type: string
        Tag:
          description: The tag added to the access key.
          type: string
      type: object
    AccessKeySecretKey:
      additionalProperties: false
      description: Information about the access key.
      properties:
        AccessKeyId:
          description: The ID of the access key.
          type: string
        CreationDate:
          description: The date and time (UTC) at which the access key was created.
          format: date-time
          type: string
        ExpirationDate:
          description: The date and time (UTC) at which the access key expires.
          format: date-time
          type: string
        LastModificationDate:
          description: The date and time (UTC) at which the access key was last modified.
          format: date-time
          type: string
        SecretKey:
          description: The secret key that enables you to send requests.
          type: string
        State:
          description: The state of the access key (`ACTIVE` if the key is valid for API calls, or `INACTIVE` if not).
          type: string
        Tag:
          description: A tag added to the access key.
          type: string
      type: object
    AccessLog:
      additionalProperties: false
      description: Information about access logs.
      properties:
        IsEnabled:
          description: If true, access logs are enabled for your load balancer. If false, they are not. If you set this to true in your request, the `OsuBucketName` parameter is required.
          type: boolean
        OsuBucketName:
          description: The name of the OOS bucket for the access logs.
          type: string
        OsuBucketPrefix:
          description: The path to the folder of the access logs in your OOS bucket (by default, the `root` level of your bucket).
          type: string
        PublicationInterval:
          description: The time interval for the publication of access logs in the OOS bucket, in minutes. This value can be either `5` or `60` (by default, `60`).
          type: integer
      type: object
    Account:
      additionalProperties: false
      description: Information about the account.
      properties:
        AccountId:
          description: The ID of the account.
          type: string
        AdditionalEmails:
          description: One or more additional email addresses for the account. These addresses are used for notifications only.
          items:
            pattern: ^.+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)+$
            type: string
          type: array
        City:
          description: The city of the account owner.
          type: string
        CompanyName:
          description: The name of the company for the account.
          type: string
        Country:
          description: The country of the account owner.
          type: string
        CustomerId:
          description: The ID of the customer.
          type: string
        Email:
          description: The main email address for the account. This address is used for your credentials and for notifications.
          type: string
        FirstName:
          description: The first name of the account owner.
          type: string
        JobTitle:
          description: The job title of the account owner.
          type: string
        LastName:
          description: The last name of the account owner.
          type: string
        MobileNumber:
          description: The mobile phone number of the account owner.
          type: string
        OutscaleLoginAllowed:
          description: Whether the account is allowed to log in to Cockpit v2 using its Outscale credentials when identity federation is activated.
          type: boolean
        PhoneNumber:
          description: The landline phone number of the account owner.
          type: string
        StateProvince:
          description: The state/province of the account.
          type: string
        VatNumber:
          description: The value added tax (VAT) number for the account.
          type: string
        ZipCode:
          description: The ZIP code of the city.
          type: string
      type: object
    ActionsOnNextBoot:
      description: The action to perform on the next boot of the VM.
      properties:
        SecureBoot:
          $ref: '#/components/schemas/SecureBootAction'
      type: object
    AddUserToUserGroupRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        UserGroupName:
          description: The name of the group you want to add a user to.
          type: string
        UserGroupPath:
          description: The path to the group. If not specified, it is set to a slash (`/`).
          type: string
        UserName:
          description: The name of the user you want to add to the group.
          type: string
        UserPath:
          description: The path to the user. If not specified, it is set to a slash (`/`).
          type: string
      required:
      - UserGroupName
      - UserName
      type: object
    AddUserToUserGroupResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    ApiAccessPolicy:
      additionalProperties: false
      description: Information about the API access policy.
      properties:
        MaxAccessKeyExpirationSeconds:
          description: The maximum possible lifetime for your access keys, in seconds. If `0`, your access keys can have unlimited lifetimes.
          format: int64
          type: integer
        RequireTrustedEnv:
          description: |-
            If true, a trusted session is activated, allowing you to bypass Certificate Authorities (CAs) enforcement. For more information, see [About Your API Access Policy](https://docs.outscale.com/en/userguide/About-Your-API-Access-Policy.html).<br />
            If this is enabled, it is required that you and all your users log in to Cockpit v2 using the WebAuthn method for multi-factor authentication. For more information, see [About Authentication > Multi-Factor Authentication](https://docs.outscale.com/en/userguide/About-Authentication.html#_multi_factor_authentication).
          type: boolean
      type: object
    ApiAccessRule:
      additionalProperties: false
      description: Information about the API access rule.
      properties:
        ApiAccessRuleId:
          description: The ID of the API access rule.
          type: string
        CaIds:
          description: One or more IDs of Client Certificate Authorities (CAs) used for the API access rule.
          items:
            type: string
          type: array
        Cns:
          description: One or more Client Certificate Common Names (CNs).
          items:
            type: string
          type: array
        Description:
          description: The description of the API access rule.
          type: string
        IpRanges:
          description: One or more IP ranges used for the API access rule, in CIDR notation (for example, `192.0.2.0/16`).
          items:
            type: string
          type: array
      type: object
    ApplicationStickyCookiePolicy:
      additionalProperties: false
      description: Information about the stickiness policy.
      properties:
        CookieName:
          description: The name of the application cookie used for stickiness.
          type: string
        PolicyName:
          description: The mnemonic name for the policy being created. The name must be unique within a set of policies for this load balancer.
          type: string
      type: object
    BackendVmHealth:
      additionalProperties: false
      description: Information about the health of a backend VM.
      properties:
        Description:
          description: The description of the state of the backend VM.
          type: string
        State:
          description: The state of the backend VM (`InService` \| `OutOfService` \| `Unknown`).
          type: string
        StateReason:
          description: |-
            Information about the cause of `OutOfService` VMs.<br />
            Specifically, whether the cause is Elastic Load Balancing or the VM (`ELB` \| `Instance` \| `N/A`).
          type: string
        VmId:
          description: The ID of the backend VM.
          type: string
      type: object
    BlockDeviceMappingCreated:
      additionalProperties: false
      description: Information about the created block device mapping.
      properties:
        Bsu:
          $ref: '#/components/schemas/BsuCreated'
        DeviceName:
          description: The name of the device.
          type: string
      type: object
    BlockDeviceMappingImage:
      additionalProperties: false
      description: One or more parameters used to automatically set up volumes when the VM is created.
      properties:
        Bsu:
          $ref: '#/components/schemas/BsuToCreate'
        DeviceName:
          description: The device name for the volume. For a root device, you must use `/dev/sda1`. For other volumes, you must use `/dev/sdX`, `/dev/sdXX`, `/dev/xvdX`, or `/dev/xvdXX` (where the first `X` is a letter between `b` and `z`, and the second `X` is a letter between `a` and `z`).
          type: string
        VirtualDeviceName:
          description: The name of the virtual device (`ephemeralN`).
          type: string
      type: object
    BlockDeviceMappingVmCreation:
      additionalProperties: false
      description: Information about the block device mapping.
      properties:
        Bsu:
          $ref: '#/components/schemas/BsuToCreate'
        DeviceName:
          description: The device name for the volume. For a root device, you must use `/dev/sda1`. For other volumes, you must use `/dev/sdX`, `/dev/sdXX`, `/dev/xvdX`, or `/dev/xvdXX` (where the first `X` is a letter between `b` and `z`, and the second `X` is a letter between `a` and `z`).
          type: string
        NoDevice:
          description: Removes the device which is included in the block device mapping of the OMI.
          type: string
        VirtualDeviceName:
          description: The name of the virtual device (`ephemeralN`).
          type: string
      type: object
    BlockDeviceMappingVmUpdate:
      additionalProperties: false
      description: Information about the block device mapping.
      properties:
        Bsu:
          $ref: '#/components/schemas/BsuToUpdateVm'
        DeviceName:
          description: The device name for the volume. For a root device, you must use `/dev/sda1`. For other volumes, you must use `/dev/sdX`, `/dev/sdXX`, `/dev/xvdX`, or `/dev/xvdXX` (where the first `X` is a letter between `b` and `z`, and the second `X` is a letter between `a` and `z`).
          type: string
        NoDevice:
          description: Removes the device which is included in the block device mapping of the OMI.
          type: string
        VirtualDeviceName:
          description: The name of the virtual device (`ephemeralN`).
          type: string
      type: object
    BootMode:
      description: Information about the boot mode of the VM.
      enum:
      - uefi
      - legacy
      type: string
    BsuCreated:
      additionalProperties: false
      description: Information about the created BSU volume.
      properties:
        DeleteOnVmDeletion:
          description: If true, the volume is deleted when terminating the VM. If false, the volume is not deleted when terminating the VM.
          type: boolean
        LinkDate:
          description: The date and time (UTC) at which the volume was attached to the VM, in ISO 8601 date-time format.
          format: date-time
          type: string
        State:
          description: The state of the volume.
          type: string
        VolumeId:
          description: The ID of the volume.
          type: string
      type: object
    BsuToCreate:
      additionalProperties: false
      description: Information about the BSU volume to create.
      properties:
        DeleteOnVmDeletion:
          default: true
          description: If set to true, the volume is deleted when terminating the VM. If false, the volume is not deleted when terminating the VM.
          type: boolean
        Iops:
          description: The number of I/O operations per second (IOPS). This parameter must be specified only if you create an `io1` volume. The maximum number of IOPS allowed for `io1` volumes is `13000` with a maximum performance ratio of 300 IOPS per gibibyte.
          type: integer
        SnapshotId:
          description: The ID of the snapshot used to create the volume.
          type: string
        VolumeSize:
          description: |-
            The size of the volume, in gibibytes (GiB).<br />
            If you specify a snapshot ID, the volume size must be at least equal to the snapshot size.<br />
            If you specify a snapshot ID but no volume size, the volume is created with a size similar to the snapshot one.
          type: integer
        VolumeType:
          description: |-
            The type of the volume (`standard` \| `io1` \| `gp2`). If not specified in the request, a `standard` volume is created.<br />
            For more information about volume types, see [About Volumes > Volume Types and IOPS](https://docs.outscale.com/en/userguide/About-Volumes.html#_volume_types_and_iops).
          type: string
      type: object
    BsuToUpdateVm:
      additionalProperties: false
      description: Information about the BSU volume.
      properties:
        DeleteOnVmDeletion:
          description: If set to true, the volume is deleted when terminating the VM. If set to false, the volume is not deleted when terminating the VM.
          type: boolean
        VolumeId:
          description: The ID of the volume.
          type: string
      type: object
    Ca:
      additionalProperties: false
      description: Information about the Client Certificate Authority (CA).
      properties:
        CaFingerprint:
          description: The fingerprint of the CA.
          type: string
        CaId:
          description: The ID of the CA.
          type: string
        Description:
          description: The description of the CA.
          type: string
      type: object
    Catalog:
      additionalProperties: false
      description: Information about our catalog of prices.
      properties:
        Entries:
          description: One or more catalog entries.
          items:
            $ref: '#/components/schemas/CatalogEntry'
          type: array
      type: object
    CatalogEntry:
      additionalProperties: false
      description: Information about the catalog entry.
      properties:
        Category:
          description: The category of the catalog entry (for example, `network`).
          type: string
        Flags:
          description: When returned and equal to `PER_MONTH`, the price of the catalog entry is calculated on a monthly basis.
          type: string
        Operation:
          description: The API call associated with the catalog entry (for example, `CreateVms` or `RunInstances`).
          type: string
        Service:
          description: The service associated with the catalog entry (`TinaOS-FCU`, `TinaOS-LBU`, `TinaOS-DirectLink`, or `TinaOS-OOS`).
          type: string
        SubregionName:
          description: The Subregion associated with the catalog entry.
          type: string
        Title:
          description: The description of the catalog entry.
          type: string
        Type:
          description: The type of resource associated with the catalog entry.
          type: string
        UnitPrice:
          description: The unit price of the catalog entry in the currency of your account, in the ISO-4217 format (for example, `EUR`).
          format: float
          type: number
      type: object
    Catalogs:
      additionalProperties: false
      description: Information about the catalogs.
      properties:
        Entries:
          description: One or more catalog entries.
          items:
            $ref: '#/components/schemas/CatalogEntry'
          type: array
        FromDate:
          description: The beginning of the time period (UTC).
          format: date-time
          type: string
        State:
          description: The state of the catalog.
          enum:
          - CURRENT
          - OBSOLETE
          type: string
        ToDate:
          description: The end of the time period (UTC).
          format: date-time
          type: string
      type: object
    CheckAuthenticationRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        Login:
          description: The email address of the account.
          type: string
        Password:
          description: The password of the account.
          type: string
      required:
      - Login
      - Password
      type: object
    CheckAuthenticationResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    ClientGateway:
      additionalProperties: false
      description: Information about the client gateway.
      properties:
        BgpAsn:
          description: The Autonomous System Number (ASN) used by the Border Gateway Protocol (BGP) to find the path to your client gateway through the Internet.
          type: integer
        ClientGatewayId:
          description: The ID of the client gateway.
          type: string
        ConnectionType:
          description: The type of communication tunnel used by the client gateway (always `ipsec.1`).
          type: string
        PublicIp:
          description: The public IPv4 address of the client gateway (must be a fixed address into a NATed network).
          type: string
        State:
          description: The state of the client gateway (`pending` \| `available` \| `deleting` \| `deleted`).
          type: string
        Tags:
          description: One or more tags associated with the client gateway.
          items:
            $ref: '#/components/schemas/ResourceTag'
          type: array
      type: object
    ConsumptionEntry:
      additionalProperties: false
      description: Information about the resources consumed during the specified time period.
      properties:
        AccountId:
          description: The ID of your TINA account.
          type: string
        Category:
          description: The category of the resource (for example, `network`).
          type: string
        FromDate:
          description: The beginning of the time period (UTC).
          format: date-time
          type: string
        Operation:
          description: The API call that triggered the resource consumption (for example, `RunInstances` or `CreateVolume`).
          type: string
        PayingAccountId:
          description: The ID of the TINA account which is billed for your consumption. It can be different from your account in the `AccountId` parameter.
          type: string
        Price:
          description: The total price of the consumed resource during the specified time period, in the currency of the Region's catalog.
          format: double
          type: number
        Service:
          description: The service of the API call (`TinaOS-FCU`, `TinaOS-LBU`, `TinaOS-DirectLink`, `TinaOS-OOS`, or `TinaOS-OSU`).
          type: string
        SubregionName:
          description: The name of the Subregion.
          type: string
        Title:
          description: A description of the consumed resource.
          type: string
        ToDate:
          description: The end of the time period (UTC).
          format: date-time
          type: string
        Type:
          description: The type of resource, depending on the API call.
          type: string
        UnitPrice:
          description: The unit price of the consumed resource in the currency of your account, in the ISO-4217 format (for example, `EUR`).
          format: double
          type: number
        Value:
          description: The consumed amount for the resource. The unit depends on the resource type. For more information, see the `Title` element.
          format: double
          type: number
      type: object
    CreateAccessKeyRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        ExpirationDate:
          description: The date and time, or the date, at which you want the access key to expire, in ISO 8601 format (for example, `2020-06-14T00:00:00.000Z`, or `2020-06-14`). To remove an existing expiration date, use the method without specifying this parameter.
          oneOf:
          - format: date-time
            type: string
          - format: date
            type: string
        Tag:
          description: A tag to add to the access key.
          type: string
        UserName:
          description: The name of the EIM user that owns the key to be created. If you do not specify a user name, this action creates an access key for the user who sends the request (which can be the root account).
          type: string
      type: object
    CreateAccessKeyResponse:
      additionalProperties: false
      properties:
        AccessKey:
          $ref: '#/components/schemas/AccessKeySecretKey'
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    CreateAccountRequest:
      additionalProperties: false
      properties:
        AdditionalEmails:
          description: One or more additional email addresses for the account. These addresses are used for notifications only. If you already have a list of additional emails registered, you cannot add to it, only replace it. To remove all registered additional emails, specify an empty list.
          items:
            pattern: ^.+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)+$
            type: string
          type: array
        City:
          description: The city of the account owner.
          type: string
        CompanyName:
          description: The name of the company for the account.
          type: string
        Country:
          description: The country of the account owner.
          type: string
        CustomerId:
          description: The ID of the customer. It must be 8 digits.
          type: string
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        Email:
          description: The main email address for the account. This address is used for your credentials and notifications.
          type: string
        FirstName:
          description: The first name of the account owner.
          type: string
        JobTitle:
          description: The job title of the account owner.
          type: string
        LastName:
          description: The last name of the account owner.
          type: string
        MobileNumber:
          description: The mobile phone number of the account owner.
          type: string
        PhoneNumber:
          description: The landline phone number of the account owner.
          type: string
        StateProvince:
          description: The state/province of the account.
          type: string
        VatNumber:
          description: The value added tax (VAT) number for the account.
          type: string
        ZipCode:
          description: The ZIP code of the city.
          type: string
      required:
      - City
      - CompanyName
      - Country
      - CustomerId
      - Email
      - FirstName
      - LastName
      - ZipCode
      type: object
    CreateAccountResponse:
      additionalProperties: false
      properties:
        Account:
          $ref: '#/components/schemas/Account'
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    CreateApiAccessRuleRequest:
      additionalProperties: false
      properties:
        CaIds:
          description: One or more IDs of Client Certificate Authorities (CAs).
          items:
            type: string
          type: array
        Cns:
          description: One or more Client Certificate Common Names (CNs). If this parameter is specified, you must also specify the `CaIds` parameter.
          items:
            type: string
          type: array
        Description:
          description: A description for the API access rule.
          type: string
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        IpRanges:
          description: One or more IPs or CIDR blocks (for example, `192.0.2.0/16`).
          items:
            type: string
          type: array
      type: object
    CreateApiAccessRuleResponse:
      additionalProperties: false
      properties:
        ApiAccessRule:
          $ref: '#/components/schemas/ApiAccessRule'
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    CreateCaRequest:
      additionalProperties: false
      properties:
        CaPem:
          description: 'The CA in PEM format.<br />With OSC CLI, use the following syntax to make sure your CA file is correctly parsed: `--CaPem=&quot;$(cat FILENAME)&quot;`.'
          type: string
        Description:
          description: The description of the CA.
          type: string
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
      required:
      - CaPem
      type: object
    CreateCaResponse:
      additionalProperties: false
      properties:
        Ca:
          $ref: '#/components/schemas/Ca'
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    CreateClientGatewayRequest:
      additionalProperties: false
      properties:
        BgpAsn:
          description: |-
            The Autonomous System Number (ASN) used by the Border Gateway Protocol (BGP) to find the path to your client gateway through the Internet. <br/>
            This number must be between `1` and `4294967295`, except `50624`, `53306`, and `132418`. <br/>
            If you do not have an ASN, you can choose one between `64512` and `65534` (both included), or between `4200000000` and `4294967295` (both included).
          type: integer
        ConnectionType:
          description: The communication protocol used to establish tunnel with your client gateway (always `ipsec.1`).
          type: string
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        PublicIp:
          description: The public fixed IPv4 address of your client gateway.
          type: string
      required:
      - BgpAsn
      - PublicIp
      - ConnectionType
      type: object
    CreateClientGatewayResponse:
      additionalProperties: false
      properties:
        ClientGateway:
          $ref: '#/components/schemas/ClientGateway'
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    CreateDedicatedGroupRequest:
      additionalProperties: false
      properties:
        CpuGeneration:
          description: The processor generation for the VMs in the dedicated group (for example, `4`).
          type: integer
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        Name:
          description: A name for the dedicated group.
          type: string
        SubregionName:
          description: The Subregion in which you want to create the dedicated group.
          type: string
      required:
      - CpuGeneration
      - Name
      - SubregionName
      type: object
    CreateDedicatedGroupResponse:
      additionalProperties: false
      properties:
        DedicatedGroup:
          $ref: '#/components/schemas/DedicatedGroup'
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    CreateDhcpOptionsRequest:
      additionalProperties: false
      properties:
        DomainName:
          description: 'Specify a domain name (for example, `MyCompany.com`). You can specify only one domain name. You must specify at least one of the following parameters: `DomainName`, `DomainNameServers`, `LogServers`, or `NtpServers`.'
          type: string
        DomainNameServers:
          description: 'The IPs of domain name servers. If no IPs are specified, the `OutscaleProvidedDNS` value is set by default. You must specify at least one of the following parameters: `DomainName`, `DomainNameServers`, `LogServers`, or `NtpServers`.'
          items:
            type: string
          type: array
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        LogServers:
          description: 'The IPs of the log servers. You must specify at least one of the following parameters: `DomainName`, `DomainNameServers`, `LogServers`, or `NtpServers`.'
          items:
            type: string
          type: array
        NtpServers:
          description: 'The IPs of the Network Time Protocol (NTP) servers. You must specify at least one of the following parameters: `DomainName`, `DomainNameServers`, `LogServers`, or `NtpServers`.'
          items:
            type: string
          type: array
      type: object
    CreateDhcpOptionsResponse:
      additionalProperties: false
      properties:
        DhcpOptionsSet:
          $ref: '#/components/schemas/DhcpOptionsSet'
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    CreateDirectLinkInterfaceRequest:
      additionalProperties: false
      properties:
        DirectLinkId:
          description: The ID of the existing DirectLink for which you want to create the DirectLink interface.
          type: string
        DirectLinkInterface:
          $ref: '#/components/schemas/DirectLinkInterface'
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
      required:
      - DirectLinkId
      - DirectLinkInterface
      type: object
    CreateDirectLinkInterfaceResponse:
      additionalProperties: false
      properties:
        DirectLinkInterface:
          $ref: '#/components/schemas/DirectLinkInterfaces'
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    CreateDirectLinkRequest:
      additionalProperties: false
      properties:
        Bandwidth:
          description: The bandwidth of the DirectLink (`1Gbps` \| `10Gbps`).
          type: string
        DirectLinkName:
          description: The name of the DirectLink.
          type: string
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        Location:
          description: The code of the requested location for the DirectLink, returned by the [ReadLocations](#readlocations) method.
          type: string
      required:
      - Bandwidth
      - DirectLinkName
      - Location
      type: object
    CreateDirectLinkResponse:
      additionalProperties: false
      properties:
        DirectLink:
          $ref: '#/components/schemas/DirectLink'
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    CreateFlexibleGpuRequest:
      additionalProperties: false
      properties:
        DeleteOnVmDeletion:
          default: false
          description: If true, the fGPU is deleted when the VM is terminated.
          type: boolean
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        Generation:
          description: The processor generation that the fGPU must be compatible with. If not specified, the oldest possible processor generation is selected (as provided by [ReadFlexibleGpuCatalog](#readflexiblegpucatalog) for the specified model of fGPU).
          type: string
        ModelName:
          description: The model of fGPU you want to allocate. For more information, see [About Flexible GPUs](https://docs.outscale.com/en/userguide/About-Flexible-GPUs.html).
          type: string
        SubregionName:
          description: The Subregion in which you want to create the fGPU.
          type: string
      required:
      - ModelName
      - SubregionName
      type: object
    CreateFlexibleGpuResponse:
      additionalProperties: false
      properties:
        FlexibleGpu:
          $ref: '#/components/schemas/FlexibleGpu'
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    CreateImageExportTaskRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        ImageId:
          description: The ID of the OMI to export.
          type: string
        OsuExport:
          $ref: '#/components/schemas/OsuExportToCreate'
      required:
      - OsuExport
      - ImageId
      type: object
    CreateImageExportTaskResponse:
      additionalProperties: false
      properties:
        ImageExportTask:
          $ref: '#/components/schemas/ImageExportTask'
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    CreateImageRequest:
      additionalProperties: false
      properties:
        Architecture:
          description: '**When registering from a snapshot:** The architecture of the OMI (`i386` or `x86_64`).'
          type: string
        BlockDeviceMappings:
          description: '**(required) When registering from a snapshot:** One or more block device mappings.'
          items:
            $ref: '#/components/schemas/BlockDeviceMappingImage'
          type: array
        BootModes:
          description: The boot modes compatible with the OMI.
          items:
            $ref: '#/components/schemas/BootMode'
          type: array
        Description:
          description: A description for the new OMI.
          type: string
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        FileLocation:
          description: '**(required) When registering from a bucket by using a manifest file:** The pre-signed URL of the manifest file for the OMI you want to register. For more information, see [Creating a Pre-signed URL](https://docs.outscale.com/en/userguide/Creating-a-Pre-Signed-URL.html).'
          type: string
        ImageName:
          description: |-
            A unique name for the new OMI.<br />
            Constraints: 3-128 alphanumeric characters, underscores (`_`), spaces (` `), parentheses (`()`), slashes (`/`), periods (`.`), or dashes (`-`).
          type: string
        NoReboot:
          description: '**When creating from a VM:** If false, the VM shuts down before creating the OMI and then reboots. If true, the VM does not.'
          type: boolean
        ProductCodes:
          description: The product codes associated with the OMI.
          items:
            type: string
          type: array
        RootDeviceName:
          description: '**(required) When registering from a snapshot:** The name of the root device for the new OMI.'
          type: string
        SourceImageId:
          description: '**(required) When copying an OMI:** The ID of the OMI you want to copy.'
          type: string
        SourceRegionName:
          description: '**(required) When copying an OMI:** The name of the source Region (always the same as the Region of your account).'
          type: string
        VmId:
          description: '**(required) When creating from a VM:** The ID of the VM from which you want to create the OMI.'
          type: string
      type: object
    CreateImageResponse:
      additionalProperties: false
      properties:
        Image:
          $ref: '#/components/schemas/Image'
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    CreateInternetServiceRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
      type: object
    CreateInternetServiceResponse:
      additionalProperties: false
      properties:
        InternetService:
          $ref: '#/components/schemas/InternetService'
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    CreateKeypairRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        KeypairName:
          description: A unique name for the keypair, with a maximum length of 255 [ASCII printable characters](https://en.wikipedia.org/wiki/ASCII#Printable_characters).
          type: string
        PublicKey:
          description: The public key to import in your account, if you are importing an existing keypair. This value must be Base64-encoded.
          type: string
      required:
      - KeypairName
      type: object
    CreateKeypairResponse:
      additionalProperties: false
      properties:
        Keypair:
          $ref: '#/components/schemas/KeypairCreated'
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    CreateListenerRuleRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        Listener:
          $ref: '#/components/schemas/LoadBalancerLight'
        ListenerRule:
          $ref: '#/components/schemas/ListenerRuleForCreation'
        VmIds:
          description: The IDs of the backend VMs.
          items:
            type: string
          type: array
      required:
      - VmIds
      - Listener
      - ListenerRule
      type: object
    CreateListenerRuleResponse:
      additionalProperties: false
      properties:
        ListenerRule:
          $ref: '#/components/schemas/ListenerRule'
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    CreateLoadBalancerListenersRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        Listeners:
          description: One or more listeners for the load balancer.
          items:
            $ref: '#/components/schemas/ListenerForCreation'
          type: array
        LoadBalancerName:
          description: The name of the load balancer for which you want to create listeners.
          type: string
      required:
      - Listeners
      - LoadBalancerName
      type: object
    CreateLoadBalancerListenersResponse:
      additionalProperties: false
      properties:
        LoadBalancer:
          $ref: '#/components/schemas/LoadBalancer'
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    CreateLoadBalancerPolicyRequest:
      additionalProperties: false
      properties:
        CookieExpirationPeriod:
          description: The lifetime of the cookie, in seconds. If not specified, the default value of this parameter is `1`, which means that the sticky session lasts for the duration of the browser session.
          type: integer
        CookieName:
          description: The name of the application cookie used for stickiness. This parameter is required if you create a stickiness policy based on an application-generated cookie.
          type: string
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        LoadBalancerName:
          description: The name of the load balancer for which you want to create a policy.
          type: string
        PolicyName:
          description: The unique name of the policy, with a maximum length of 32 alphanumeric characters and dashes (`-`).
          type: string
        PolicyType:
          description: 'The type of stickiness policy you want to create: `app` or `load_balancer`.'
          type: string
      required:
      - PolicyType
      - LoadBalancerName
      - PolicyName
      type: object
    CreateLoadBalancerPolicyResponse:
      additionalProperties: false
      properties:
        LoadBalancer:
          $ref: '#/components/schemas/LoadBalancer'
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    CreateLoadBalancerRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        Listeners:
          description: One or more listeners to create.
          items:
            $ref: '#/components/schemas/ListenerForCreation'
          type: array
        LoadBalancerName:
          description: The unique name of the load balancer, with a maximum length of 32 alphanumeric characters and dashes (`-`). This name must not start or end with a dash.
          type: string
        LoadBalancerType:
          description: 'The type of load balancer: `internet-facing` or `internal`. Use this parameter only for load balancers in a Net.'
          type: string
        PublicIp:
          description: (internet-facing only) The public IP you want to associate with the load balancer. If not specified, a public IP owned by 3DS OUTSCALE is associated.
          type: string
        SecurityGroups:
          description: (Net only) One or more IDs of security groups you want to assign to the load balancer. If not specified, the default security group of the Net is assigned to the load balancer.
          items:
            type: string
          type: array
        Subnets:
          description: (Net only) The ID of the Subnet in which you want to create the load balancer. Regardless of this Subnet, the load balancer can distribute traffic to all Subnets. This parameter is required in a Net.
          items:
            type: string
          type: array
        SubregionNames:
          description: (public Cloud only) The Subregion in which you want to create the load balancer. Regardless of this Subregion, the load balancer can distribute traffic to all Subregions. This parameter is required in the public Cloud.
          items:
            type: string
          type: array
        Tags:
          description: One or more tags assigned to the load balancer.
          items:
            $ref: '#/components/schemas/ResourceTag'
          type: array
      required:
      - Listeners
      - LoadBalancerName
      type: object
    CreateLoadBalancerResponse:
      additionalProperties: false
      properties:
        LoadBalancer:
          $ref: '#/components/schemas/LoadBalancer'
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    CreateLoadBalancerTagsRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        LoadBalancerNames:
          description: One or more load balancer names.
          items:
            type: string
          type: array
        Tags:
          description: One or more tags to add to the specified load balancers.
          items:
            $ref: '#/components/schemas/ResourceTag'
          type: array
      required:
      - LoadBalancerNames
      - Tags
      type: object
    CreateLoadBalancerTagsResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    CreateNatServiceRequest:
      additionalProperties: false
      properties:
        ClientToken:
          description: A unique identifier which enables you to manage the idempotency.
          type: string
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        PublicIpId:
          description: |-
            The allocation ID of the public IP to associate with the NAT service.<br />
            If the public IP is already associated with another resource, you must first disassociate it.
          type: string
        SubnetId:
          description: The ID of the Subnet in which you want to create the NAT service.
          type: string
      required:
      - PublicIpId
      - SubnetId
      type: object
    CreateNatServiceResponse:
      additionalProperties: false
      properties:
        NatService:
          $ref: '#/components/schemas/NatService'
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    CreateNetAccessPointRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        NetId:
          description: The ID of the Net.
          type: string
        RouteTableIds:
          description: One or more IDs of route tables to use for the connection.
          items:
            type: string
          type: array
        ServiceName:
          description: The name of the service (in the format `com.outscale.region.service`).
          type: string
      required:
      - ServiceName
      - NetId
      type: object
    CreateNetAccessPointResponse:
      additionalProperties: false
      properties:
        NetAccessPoint:
          $ref: '#/components/schemas/NetAccessPoint'
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    CreateNetPeeringRequest:
      additionalProperties: false
      properties:
        AccepterNetId:
          description: |-
            The ID of the Net you want to connect with. <br/ > <br/ >
            If the Net does not belong to you, you must also specify the `AccepterOwnerId` parameter with the account ID owning the Net you want to connect with.
          type: string
        AccepterOwnerId:
          description: |-
            The account ID of the owner of the Net you want to connect with. By default, the account ID of the owner of the Net from which the peering request is sent. <br /><br/ >
            This parameter is required if the Net you want to connect with does not belong to you.
          type: string
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        SourceNetId:
          description: The ID of the Net you send the peering request from.
          type: string
      required:
      - AccepterNetId
      - SourceNetId
      type: object
    CreateNetPeeringResponse:
      additionalProperties: false
      properties:
        NetPeering:
          $ref: '#/components/schemas/NetPeering'
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    CreateNetRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        IpRange:
          description: The IP range for the Net, in CIDR notation (for example, `10.0.0.0/16`).
          type: string
        Tenancy:
          description: |-
            The tenancy options for the VMs:<br />
            - `default` if a VM created in a Net can be launched with any tenancy.<br />
            - `dedicated` if it can be launched with dedicated tenancy VMs running on single-tenant hardware.<br />
            - `dedicated group ID`: if it can be launched in a dedicated group on single-tenant hardware.
          type: string
      required:
      - IpRange
      type: object
    CreateNetResponse:
      additionalProperties: false
      properties:
        Net:
          $ref: '#/components/schemas/Net'
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    CreateNicRequest:
      additionalProperties: false
      properties:
        Description:
          description: A description for the NIC.
          type: string
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        PrivateIps:
          description: |-
            The primary private IP for the NIC.<br />
            This IP must be within the IP range of the Subnet that you specify with the `SubnetId` attribute.<br />
            If you do not specify this attribute, a random private IP is selected within the IP range of the Subnet.
          items:
            $ref: '#/components/schemas/PrivateIpLight'
          type: array
        SecurityGroupIds:
          description: One or more IDs of security groups for the NIC.
          items:
            type: string
          type: array
        SubnetId:
          description: The ID of the Subnet in which you want to create the NIC.
          type: string
      required:
      - SubnetId
      type: object
    CreateNicResponse:
      additionalProperties: false
      properties:
        Nic:
          $ref: '#/components/schemas/Nic'
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    CreatePolicyRequest:
      additionalProperties: false
      properties:
        Description:
          description: A description for the policy.
          type: string
        Document:
          description: The policy document, corresponding to a JSON string that contains the policy. This policy document can contain a maximum of 5120 non-whitespace characters. For more information, see [EIM Reference Information](https://docs.outscale.com/en/userguide/EIM-Reference-Information.html) and [EIM Policy Generator](https://docs.outscale.com/en/userguide/EIM-Policy-Generator.html).
          type: string
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        Path:
          description: The path of the policy.
          type: string
        PolicyName:
          description: The name of the policy.
          type: string
      required:
      - Document
      - PolicyName
      type: object
    CreatePolicyResponse:
      additionalProperties: false
      properties:
        Policy:
          $ref: '#/components/schemas/Policy'
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    CreatePolicyVersionRequest:
      additionalProperties: false
      properties:
        Document:
          description: The policy document, corresponding to a JSON string that contains the policy. This policy document can contain a maximum of 5120 non-whitespace characters. For more information, see [EIM Reference Information](https://docs.outscale.com/en/userguide/EIM-Reference-Information.html) and [EIM Policy Generator](https://docs.outscale.com/en/userguide/EIM-Policy-Generator.html).
          type: string
        PolicyOrn:
          description: The OUTSCALE Resource Name (ORN) of the policy. For more information, see [Resource Identifiers](https://docs.outscale.com/en/userguide/Resource-Identifiers.html).
          pattern: ^orn:ows:(iam|idauth):\S*:\d{12}:policy/\S+$
          type: string
        SetAsDefault:
          description: If set to true, the new policy version is set as the default version and becomes the operative one.
          type: boolean
      required:
      - Document
      - PolicyOrn
      type: object
    CreatePolicyVersionResponse:
      additionalProperties: false
      properties:
        PolicyVersion:
          $ref: '#/components/schemas/PolicyVersion'
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    CreateProductTypeRequest:
      additionalProperties: false
      properties:
        Description:
          description: The description of the product type.
          type: string
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        Vendor:
          description: The vendor of the product type.
          type: string
      required:
      - Description
      type: object
    CreateProductTypeResponse:
      additionalProperties: false
      properties:
        ProductType:
          $ref: '#/components/schemas/ProductType'
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    CreatePublicIpRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
      type: object
    CreatePublicIpResponse:
      additionalProperties: false
      properties:
        PublicIp:
          $ref: '#/components/schemas/PublicIp'
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    CreateRouteRequest:
      additionalProperties: false
      properties:
        DestinationIpRange:
          description: The IP range used for the destination match, in CIDR notation (for example, `10.0.0.0/24`).
          type: string
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        GatewayId:
          description: The ID of an internet service or virtual gateway attached to your Net.
          type: string
        NatServiceId:
          description: The ID of a NAT service.
          type: string
        NetPeeringId:
          description: The ID of a Net peering.
          type: string
        NicId:
          description: The ID of a NIC.
          type: string
        RouteTableId:
          description: The ID of the route table for which you want to create a route.
          type: string
        VmId:
          description: The ID of a NAT VM in your Net (attached to exactly one NIC).
          type: string
      required:
      - DestinationIpRange
      - RouteTableId
      type: object
    CreateRouteResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        RouteTable:
          $ref: '#/components/schemas/RouteTable'
      type: object
    CreateRouteTableRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        NetId:
          description: The ID of the Net for which you want to create a route table.
          type: string
      required:
      - NetId
      type: object
    CreateRouteTableResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        RouteTable:
          $ref: '#/components/schemas/RouteTable'
      type: object
    CreateSecurityGroupRequest:
      additionalProperties: false
      properties:
        Description:
          description: |-
            A description for the security group.<br />
            This description can contain between 1 and 255 characters. Allowed characters are `a-z`, `A-Z`, `0-9`, accented letters, spaces, and `_.-:/()#,@[]+=&;{}!$*`.
          type: string
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        NetId:
          description: The ID of the Net for the security group.
          type: string
        SecurityGroupName:
          description: |-
            The name of the security group.<br />
            This name must not start with `sg-`.<br />
            This name must be unique and contain between 1 and 255 characters. Allowed characters are `a-z`, `A-Z`, `0-9`, spaces, and `_.-:/()#,@[]+=&;{}!$*`.
          type: string
      required:
      - Description
      - SecurityGroupName
      type: object
    CreateSecurityGroupResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        SecurityGroup:
          $ref: '#/components/schemas/SecurityGroup'
      type: object
    CreateSecurityGroupRuleRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        Flow:
          description: 'The direction of the flow: `Inbound` or `Outbound`. You can specify `Outbound` for Nets only.'
          type: string
        FromPortRange:
          description: The beginning of the port range for the TCP and UDP protocols, or an ICMP type number. If you specify this parameter, you cannot specify the `Rules` parameter and its subparameters.
          type: integer
        IpProtocol:
          description: The IP protocol name (`tcp`, `udp`, `icmp`, or `-1` for all protocols). By default, `-1`. In a Net, this can also be an IP protocol number. For more information, see the [IANA.org website](https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml). If you specify this parameter, you cannot specify the `Rules` parameter and its subparameters.
          type: string
        IpRange:
          description: The IP range for the security group rule, in CIDR notation (for example, 10.0.0.0/16). If you specify this parameter, you cannot specify the `Rules` parameter and its subparameters.
          type: string
        Rules:
          description: 'Information about the security group rule to create. If you specify this parent parameter and its subparameters, you cannot specify the following parent parameters: `FromPortRange`, `IpProtocol`, `IpRange`, and `ToPortRange`.'
          items:
            $ref: '#/components/schemas/SecurityGroupRule'
          type: array
        SecurityGroupAccountIdToLink:
          description: The account ID that owns the source or destination security group specified in the `SecurityGroupNameToLink` parameter.
          type: string
        SecurityGroupId:
          description: The ID of the security group for which you want to create a rule.
          type: string
        SecurityGroupNameToLink:
          description: The ID of a source or destination security group that you want to link to the security group of the rule.
          type: string
        ToPortRange:
          description: The end of the port range for the TCP and UDP protocols, or an ICMP code number. If you specify this parameter, you cannot specify the `Rules` parameter and its subparameters.
          type: integer
      required:
      - SecurityGroupId
      - Flow
      type: object
    CreateSecurityGroupRuleResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        SecurityGroup:
          $ref: '#/components/schemas/SecurityGroup'
      type: object
    CreateServerCertificateRequest:
      additionalProperties: false
      properties:
        Body:
          description: 'The PEM-encoded X509 certificate.<br />With OSC CLI, use the following syntax to make sure your certificate file is correctly parsed: `--Body=&quot;$(cat FILENAME)&quot;`.'
          type: string
        Chain:
          description: 'The PEM-encoded intermediate certification authorities.<br />With OSC CLI, use the following syntax to make sure your certificate chain file is correctly parsed: `--Chain=&quot;$(cat FILENAME)&quot;`.'
          type: string
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        Name:
          description: 'A unique name for the certificate. Constraints: 1-128 alphanumeric characters, pluses (`+`), equals (`=`), commas (`,`), periods (`.`), at signs (`@`), minuses (`-`), or underscores (`_`).'
          type: string
        Path:
          description: The path to the server certificate, set to a slash (`/`) if not specified.
          type: string
        PrivateKey:
          description: 'The PEM-encoded private key matching the certificate.<br />With OSC CLI, use the following syntax to make sure your key file is correctly parsed: `--PrivateKey=&quot;$(cat FILENAME)&quot;`.'
          type: string
      required:
      - Body
      - PrivateKey
      - Name
      type: object
    CreateServerCertificateResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        ServerCertificate:
          $ref: '#/components/schemas/ServerCertificate'
      type: object
    CreateSnapshotExportTaskRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        OsuExport:
          $ref: '#/components/schemas/OsuExportToCreate'
        SnapshotId:
          description: The ID of the snapshot to export.
          type: string
      required:
      - OsuExport
      - SnapshotId
      type: object
    CreateSnapshotExportTaskResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        SnapshotExportTask:
          $ref: '#/components/schemas/SnapshotExportTask'
      type: object
    CreateSnapshotRequest:
      additionalProperties: false
      properties:
        ClientToken:
          description: A unique identifier which enables you to manage the idempotency.
          type: string
        Description:
          description: A description for the snapshot.
          type: string
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        FileLocation:
          description: '**(when importing from a bucket)** The pre-signed URL of the snapshot you want to import. For more information, see [Creating a Pre-signed URL](https://docs.outscale.com/en/userguide/Creating-a-Pre-Signed-URL.html).'
          type: string
        SnapshotSize:
          description: '**(when importing from a bucket)** The size of the snapshot you want to create in your account, in bytes. This size must be greater than or equal to the size of the original, uncompressed snapshot.'
          format: int64
          type: integer
        SourceRegionName:
          description: '**(when copying a snapshot)** The name of the source Region, which must be the same as the Region of your account.'
          type: string
        SourceSnapshotId:
          description: '**(when copying a snapshot)** The ID of the snapshot you want to copy.'
          type: string
        VolumeId:
          description: '**(when creating from a volume)** The ID of the volume you want to create a snapshot of.'
          type: string
      type: object
    CreateSnapshotResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        Snapshot:
          $ref: '#/components/schemas/Snapshot'
      type: object
    CreateSubnetRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        IpRange:
          description: |-
            The IP range in the Subnet, in CIDR notation (for example, `10.0.0.0/16`).<br />
            The IP range of the Subnet can be either the same as the Net one if you create only a single Subnet in this Net, or a subset of the Net one. In case of several Subnets in a Net, their IP ranges must not overlap. The smallest Subnet you can create uses a /29 netmask (eight IPs). For more information, see [About Nets](https://docs.outscale.com/en/userguide/About-Nets.html).
          type: string
        NetId:
          description: The ID of the Net for which you want to create a Subnet.
          type: string
        SubregionName:
          description: The name of the Subregion in which you want to create the Subnet.
          type: string
      required:
      - IpRange
      - NetId
      type: object
    CreateSubnetResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        Subnet:
          $ref: '#/components/schemas/Subnet'
      type: object
    CreateTagsRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        ResourceIds:
          description: One or more resource IDs.
          items:
            type: string
          type: array
        Tags:
          description: One or more tags to add to the specified resources.
          items:
            $ref: '#/components/schemas/ResourceTag'
          type: array
      required:
      - ResourceIds
      - Tags
      type: object
    CreateTagsResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    CreateUserGroupRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        Path:
          description: The path to the group. If not specified, it is set to a slash (`/`).
          type: string
        UserGroupName:
          description: The name of the group.
          type: string
      required:
      - UserGroupName
      type: object
    CreateUserGroupResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        UserGroup:
          $ref: '#/components/schemas/UserGroup'
      type: object
    CreateUserRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        Path:
          description: The path to the EIM user you want to create (by default, `/`). This path name must begin and end with a slash (`/`), and contain between 1 and 512 alphanumeric characters and/or slashes (`/`), or underscores (`_`).
          type: string
        UserEmail:
          description: The email address of the EIM user.
          type: string
        UserName:
          description: The name of the EIM user. This user name must contain between 1 and 64 alphanumeric characters and/or pluses (`+`), equals (`=`), commas (`,`), periods (`.`), at signs (`@`), dashes (`-`), or underscores (`_`).
          type: string
      required:
      - UserName
      type: object
    CreateUserResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        User:
          $ref: '#/components/schemas/User'
      type: object
    CreateVirtualGatewayRequest:
      additionalProperties: false
      properties:
        ConnectionType:
          description: The type of VPN connection supported by the virtual gateway (always `ipsec.1`).
          type: string
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
      required:
      - ConnectionType
      type: object
    CreateVirtualGatewayResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        VirtualGateway:
          $ref: '#/components/schemas/VirtualGateway'
      type: object
    CreateVmGroupRequest:
      additionalProperties: false
      properties:
        Description:
          description: A description for the VM group.
          type: string
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        PositioningStrategy:
          default: no-strategy
          description: The positioning strategy of VMs on hypervisors. If set to `no-strategy`, our orchestrator determines the most adequate position for your VMs. If set to `attract`, your VMs are deployed on the same hypervisor, which improves network performance. If set to `repulse`, your VMs are deployed on a different hypervisor, which improves fault tolerance.
          enum:
          - attract
          - no-strategy
          - repulse
          type: string
        SecurityGroupIds:
          description: One or more IDs of security groups for the VM group.
          items:
            type: string
          type: array
        SubnetId:
          description: The ID of the Subnet in which you want to create the VM group.
          type: string
        Tags:
          description: One or more tags to add to the VM group.
          items:
            $ref: '#/components/schemas/ResourceTag'
          type: array
        VmCount:
          description: The number of VMs deployed in the VM group.
          type: integer
        VmGroupName:
          description: The name of the VM group.
          type: string
        VmTemplateId:
          description: The ID of the VM template used to launch VMs in the VM group.
          type: string
      required:
      - SecurityGroupIds
      - SubnetId
      - VmGroupName
      - VmTemplateId
      - VmCount
      type: object
    CreateVmGroupResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        VmGroup:
          $ref: '#/components/schemas/VmGroup'
      type: object
    CreateVmTemplateRequest:
      additionalProperties: false
      properties:
        CpuCores:
          description: The number of vCores to use for each VM.
          type: integer
        CpuGeneration:
          description: The processor generation to use for each VM (for example, `v4`).
          type: string
        CpuPerformance:
          default: high
          description: The performance of the VMs.
          enum:
          - medium
          - high
          - highest
          type: string
        Description:
          description: A description for the VM template.
          type: string
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        ImageId:
          description: The ID of the OMI to use for each VM. You can find a list of OMIs by calling the [ReadImages](#readimages) method.
          type: string
        KeypairName:
          description: The name of the keypair to use for each VM.
          type: string
        Ram:
          description: The amount of RAM to use for each VM.
          type: integer
        Tags:
          description: One or more tags to add to the VM template.
          items:
            $ref: '#/components/schemas/ResourceTag'
          type: array
        VmTemplateName:
          description: The name of the VM template.
          type: string
      required:
      - CpuCores
      - CpuGeneration
      - ImageId
      - Ram
      - VmTemplateName
      type: object
    CreateVmTemplateResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        VmTemplate:
          $ref: '#/components/schemas/VmTemplate'
      type: object
    CreateVmsRequest:
      additionalProperties: false
      properties:
        ActionsOnNextBoot:
          $ref: '#/components/schemas/ActionsOnNextBoot'
        BlockDeviceMappings:
          description: One or more block device mappings.
          items:
            $ref: '#/components/schemas/BlockDeviceMappingVmCreation'
          type: array
        BootMode:
          $ref: '#/components/schemas/BootMode'
        BootOnCreation:
          default: true
          description: If true, the VM is started on creation. If false, the VM is stopped on creation.
          type: boolean
        BsuOptimized:
          description: This parameter is not available. It is present in our API for the sake of historical compatibility with AWS.
          type: boolean
        ClientToken:
          description: A unique identifier which enables you to manage the idempotency.
          type: string
        DeletionProtection:
          description: If true, you cannot delete the VM unless you change this parameter back to false.
          type: boolean
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        ImageId:
          description: The ID of the OMI used to create the VM. You can find the list of OMIs by calling the [ReadImages](#readimages) method.
          type: string
        KeypairName:
          description: The name of the keypair.
          type: string
        MaxVmsCount:
          description: The maximum number of VMs you want to create. If all the VMs cannot be created, the largest possible number of VMs above MinVmsCount is created.
          type: integer
        MinVmsCount:
          description: The minimum number of VMs you want to create. If this number of VMs cannot be created, no VMs are created.
          type: integer
        NestedVirtualization:
          default: false
          description: (dedicated tenancy only) If true, nested virtualization is enabled. If false, it is disabled.
          type: boolean
        Nics:
          description: One or more NICs. If you specify this parameter, you must not specify the `SubnetId` and `SubregionName` parameters. You also must define one NIC as the primary network interface of the VM with `0` as its device number.
          items:
            $ref: '#/components/schemas/NicForVmCreation'
          type: array
        Performance:
          default: high
          description: The performance of the VM. This parameter is ignored if you specify a performance flag directly in the `VmType` parameter.
          enum:
          - medium
          - high
          - highest
          type: string
        Placement:
          $ref: '#/components/schemas/Placement'
        PrivateIps:
          description: One or more private IPs of the VM.
          items:
            type: string
          type: array
        SecurityGroupIds:
          description: One or more IDs of security group for the VMs.
          items:
            type: string
          type: array
        SecurityGroups:
          description: One or more names of security groups for the VMs.
          items:
            type: string
          type: array
        SubnetId:
          description: The ID of the Subnet in which you want to create the VM. If you specify this parameter, you must not specify the `Nics` parameter.
          type: string
        UserData:
          description: Data or script used to add a specific configuration to the VM. It must be Base64-encoded and is limited to 500 kibibytes (KiB). For more information about user data, see [Configuring a VM with User Data and OUTSCALE Tags](https://docs.outscale.com/en/userguide/Configuring-a-VM-with-User-Data-and-OUTSCALE-Tags.html).
          type: string
        VmInitiatedShutdownBehavior:
          default: stop
          description: The VM behavior when you stop it. If set to `stop`, the VM stops. If set to `restart`, the VM stops then automatically restarts. If set to `terminate`, the VM stops and is terminated.
          type: string
        VmType:
          description: |-
            The type of VM. You can specify a TINA type (in the `tinavW.cXrYpZ` or `tinavW.cXrY` format), or an AWS type (for example, `t2.small`, which is the default value).<br />
            If you specify an AWS type, it is converted in the background to its corresponding TINA type, but the AWS type is still returned. If the specified or converted TINA type includes a performance flag, this performance flag is applied regardless of the value you may have provided in the `Performance` parameter. For more information, see [VM Types](https://docs.outscale.com/en/userguide/VM-Types.html).
          type: string
      required:
      - ImageId
      type: object
    CreateVmsResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        Vms:
          description: Information about one or more created VMs.
          items:
            $ref: '#/components/schemas/Vm'
          type: array
      type: object
    CreateVolumeRequest:
      additionalProperties: false
      properties:
        ClientToken:
          description: A unique identifier which enables you to manage the idempotency.
          type: string
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        Iops:
          description: The number of I/O operations per second (IOPS). This parameter must be specified only if you create an `io1` volume. The maximum number of IOPS allowed for `io1` volumes is `13000` with a maximum performance ratio of 300 IOPS per gibibyte.
          type: integer
        Size:
          description: The size of the volume, in gibibytes (GiB). The maximum allowed size for a volume is 14901 GiB. This parameter is required if the volume is not created from a snapshot (`SnapshotId` unspecified).
          type: integer
        SnapshotId:
          description: The ID of the snapshot from which you want to create the volume.
          type: string
        SubregionName:
          description: The Subregion in which you want to create the volume.
          type: string
        VolumeType:
          description: |-
            The type of volume you want to create (`io1` \| `gp2` \| `standard`). If not specified, a `standard` volume is created.<br />
            For more information about volume types, see [About Volumes > Volume Types and IOPS](https://docs.outscale.com/en/userguide/About-Volumes.html#_volume_types_and_iops).
          type: string
      required:
      - SubregionName
      type: object
    CreateVolumeResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        Volume:
          $ref: '#/components/schemas/Volume'
      type: object
    CreateVpnConnectionRequest:
      additionalProperties: false
      properties:
        ClientGatewayId:
          description: The ID of the client gateway.
          type: string
        ConnectionType:
          description: The type of VPN connection (always `ipsec.1`).
          type: string
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        StaticRoutesOnly:
          description: By default or if false, the VPN connection uses dynamic routing with Border Gateway Protocol (BGP). If true, routing is controlled using static routes. For more information about how to create and delete static routes, see [CreateVpnConnectionRoute](#createvpnconnectionroute) and [DeleteVpnConnectionRoute](#deletevpnconnectionroute).
          type: boolean
        VirtualGatewayId:
          description: The ID of the virtual gateway.
          type: string
      required:
      - ClientGatewayId
      - ConnectionType
      - VirtualGatewayId
      type: object
    CreateVpnConnectionResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        VpnConnection:
          $ref: '#/components/schemas/VpnConnection'
      type: object
    CreateVpnConnectionRouteRequest:
      additionalProperties: false
      properties:
        DestinationIpRange:
          description: The network prefix of the route, in CIDR notation (for example, `10.12.0.0/16`).
          type: string
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        VpnConnectionId:
          description: The ID of the target VPN connection of the static route.
          type: string
      required:
      - DestinationIpRange
      - VpnConnectionId
      type: object
    CreateVpnConnectionRouteResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    DedicatedGroup:
      additionalProperties: false
      description: Information about the dedicated group.
      properties:
        AccountId:
          description: The account ID of the owners of the dedicated group.
          type: string
        CpuGeneration:
          description: The processor generation.
          type: integer
        DedicatedGroupId:
          description: The ID of the dedicated group.
          type: string
        Name:
          description: The name of the dedicated group.
          type: string
        NetIds:
          description: The IDs of the Nets in the dedicated group.
          items:
            type: string
          type: array
        SubregionName:
          description: The name of the Subregion in which the dedicated group is located.
          type: string
        VmIds:
          description: The IDs of the VMs in the dedicated group.
          items:
            type: string
          type: array
      type: object
    DeleteAccessKeyRequest:
      additionalProperties: false
      properties:
        AccessKeyId:
          description: The ID of the access key you want to delete.
          type: string
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        UserName:
          description: The name of the EIM user the access key you want to delete is associated with. By default, the user who sends the request (which can be the root account).
          type: string
      required:
      - AccessKeyId
      type: object
    DeleteAccessKeyResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    DeleteApiAccessRuleRequest:
      additionalProperties: false
      properties:
        ApiAccessRuleId:
          description: The ID of the API access rule you want to delete.
          type: string
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
      required:
      - ApiAccessRuleId
      type: object
    DeleteApiAccessRuleResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    DeleteCaRequest:
      additionalProperties: false
      properties:
        CaId:
          description: The ID of the CA you want to delete.
          type: string
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
      required:
      - CaId
      type: object
    DeleteCaResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    DeleteClientGatewayRequest:
      additionalProperties: false
      properties:
        ClientGatewayId:
          description: The ID of the client gateway you want to delete.
          type: string
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
      required:
      - ClientGatewayId
      type: object
    DeleteClientGatewayResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    DeleteDedicatedGroupRequest:
      additionalProperties: false
      properties:
        DedicatedGroupId:
          description: The ID of the dedicated group you want to delete.
          type: string
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        Force:
          description: If true, forces the deletion of the dedicated group and all its dependencies.
          type: boolean
      required:
      - DedicatedGroupId
      type: object
    DeleteDedicatedGroupResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    DeleteDhcpOptionsRequest:
      additionalProperties: false
      properties:
        DhcpOptionsSetId:
          description: The ID of the DHCP options set you want to delete.
          type: string
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
      required:
      - DhcpOptionsSetId
      type: object
    DeleteDhcpOptionsResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    DeleteDirectLinkInterfaceRequest:
      additionalProperties: false
      properties:
        DirectLinkInterfaceId:
          description: The ID of the DirectLink interface you want to delete.
          type: string
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
      required:
      - DirectLinkInterfaceId
      type: object
    DeleteDirectLinkInterfaceResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    DeleteDirectLinkRequest:
      additionalProperties: false
      properties:
        DirectLinkId:
          description: The ID of the DirectLink you want to delete.
          type: string
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
      required:
      - DirectLinkId
      type: object
    DeleteDirectLinkResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    DeleteExportTaskRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        ExportTaskId:
          description: The ID of the export task to delete.
          type: string
      required:
      - ExportTaskId
      type: object
    DeleteExportTaskResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    DeleteFlexibleGpuRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        FlexibleGpuId:
          description: The ID of the fGPU you want to delete.
          type: string
      required:
      - FlexibleGpuId
      type: object
    DeleteFlexibleGpuResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    DeleteImageRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        ImageId:
          description: The ID of the OMI you want to delete.
          type: string
      required:
      - ImageId
      type: object
    DeleteImageResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    DeleteInternetServiceRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        InternetServiceId:
          description: The ID of the internet service you want to delete.
          type: string
      required:
      - InternetServiceId
      type: object
    DeleteInternetServiceResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    DeleteKeypairRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        KeypairId:
          description: The ID of the keypair you want to delete.
          type: string
        KeypairName:
          description: The name of the keypair you want to delete.
          type: string
      type: object
    DeleteKeypairResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    DeleteListenerRuleRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        ListenerRuleName:
          description: The name of the rule you want to delete.
          type: string
      required:
      - ListenerRuleName
      type: object
    DeleteListenerRuleResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    DeleteLoadBalancerListenersRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        LoadBalancerName:
          description: The name of the load balancer for which you want to delete listeners.
          type: string
        LoadBalancerPorts:
          description: One or more port numbers of the listeners you want to delete.
          items:
            type: integer
          type: array
      required:
      - LoadBalancerName
      - LoadBalancerPorts
      type: object
    DeleteLoadBalancerListenersResponse:
      additionalProperties: false
      properties:
        LoadBalancer:
          $ref: '#/components/schemas/LoadBalancer'
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    DeleteLoadBalancerPolicyRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        LoadBalancerName:
          description: The name of the load balancer for which you want to delete a policy.
          type: string
        PolicyName:
          description: The name of the policy you want to delete.
          type: string
      required:
      - LoadBalancerName
      - PolicyName
      type: object
    DeleteLoadBalancerPolicyResponse:
      additionalProperties: false
      properties:
        LoadBalancer:
          $ref: '#/components/schemas/LoadBalancer'
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    DeleteLoadBalancerRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        LoadBalancerName:
          description: The name of the load balancer you want to delete.
          type: string
      required:
      - LoadBalancerName
      type: object
    DeleteLoadBalancerResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    DeleteLoadBalancerTagsRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        LoadBalancerNames:
          description: One or more load balancer names.
          items:
            type: string
          type: array
        Tags:
          description: One or more tags to delete from the load balancers.
          items:
            $ref: '#/components/schemas/ResourceLoadBalancerTag'
          type: array
      required:
      - LoadBalancerNames
      - Tags
      type: object
    DeleteLoadBalancerTagsResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    DeleteNatServiceRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        NatServiceId:
          description: The ID of the NAT service you want to delete.
          type: string
      required:
      - NatServiceId
      type: object
    DeleteNatServiceResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    DeleteNetAccessPointRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        NetAccessPointId:
          description: The ID of the Net access point.
          type: string
      required:
      - NetAccessPointId
      type: object
    DeleteNetAccessPointResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    DeleteNetPeeringRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        NetPeeringId:
          description: The ID of the Net peering you want to delete.
          type: string
      required:
      - NetPeeringId
      type: object
    DeleteNetPeeringResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    DeleteNetRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        NetId:
          description: The ID of the Net you want to delete.
          type: string
      required:
      - NetId
      type: object
    DeleteNetResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    DeleteNicRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        NicId:
          description: The ID of the NIC you want to delete.
          type: string
      required:
      - NicId
      type: object
    DeleteNicResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    DeletePolicyRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        PolicyOrn:
          description: The OUTSCALE Resource Name (ORN) of the policy you want to delete. For more information, see [Resource Identifiers](https://docs.outscale.com/en/userguide/Resource-Identifiers.html).
          pattern: ^orn:ows:(iam|idauth):\S*:\d{12}:policy/\S+$
          type: string
      required:
      - PolicyOrn
      type: object
    DeletePolicyResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    DeletePolicyVersionRequest:
      additionalProperties: false
      properties:
        PolicyOrn:
          description: The OUTSCALE Resource Name (ORN) of the policy. For more information, see [Resource Identifiers](https://docs.outscale.com/en/userguide/Resource-Identifiers.html).
          pattern: ^orn:ows:(iam|idauth):\S*:\d{12}:policy/\S+$
          type: string
        VersionId:
          description: The ID of the version of the policy you want to delete.
          type: string
      required:
      - PolicyOrn
      - VersionId
      type: object
    DeletePolicyVersionResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    DeleteProductTypeRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        Force:
          description: If true, forces the deletion of the product type associated with one or more OMIs.
          type: boolean
        ProductTypeId:
          description: The ID of the product type you want to delete.
          type: string
      required:
      - ProductTypeId
      type: object
    DeleteProductTypeResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    DeletePublicIpRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        PublicIp:
          description: The public IP. In the public Cloud, this parameter is required.
          type: string
        PublicIpId:
          description: The ID representing the association of the public IP with the VM or the NIC. In a Net, this parameter is required.
          type: string
      type: object
    DeletePublicIpResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    DeleteRouteRequest:
      additionalProperties: false
      properties:
        DestinationIpRange:
          description: The exact IP range for the route.
          type: string
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        RouteTableId:
          description: The ID of the route table from which you want to delete a route.
          type: string
      required:
      - RouteTableId
      - DestinationIpRange
      type: object
    DeleteRouteResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        RouteTable:
          $ref: '#/components/schemas/RouteTable'
      type: object
    DeleteRouteTableRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        RouteTableId:
          description: The ID of the route table you want to delete.
          type: string
      required:
      - RouteTableId
      type: object
    DeleteRouteTableResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    DeleteSecurityGroupRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        SecurityGroupId:
          description: The ID of the security group you want to delete.
          type: string
        SecurityGroupName:
          description: The name of the security group.
          type: string
      type: object
    DeleteSecurityGroupResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    DeleteSecurityGroupRuleRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        Flow:
          description: 'The direction of the flow: `Inbound` or `Outbound`. You can specify `Outbound` for Nets only.'
          type: string
        FromPortRange:
          description: The beginning of the port range for the TCP and UDP protocols, or an ICMP type number.
          type: integer
        IpProtocol:
          description: The IP protocol name (`tcp`, `udp`, `icmp`, or `-1` for all protocols). By default, `-1`. In a Net, this can also be an IP protocol number. For more information, see the [IANA.org website](https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml).
          type: string
        IpRange:
          description: The IP range for the security group rule, in CIDR notation (for example, `10.0.0.0/16`).
          type: string
        Rules:
          description: One or more rules you want to delete from the security group.
          items:
            $ref: '#/components/schemas/SecurityGroupRule'
          type: array
        SecurityGroupAccountIdToUnlink:
          description: The account ID of the owner of the security group you want to delete a rule from.
          type: string
        SecurityGroupId:
          description: The ID of the security group you want to delete a rule from.
          type: string
        SecurityGroupNameToUnlink:
          description: The ID of the source security group. If you are in the Public Cloud, you can also specify the name of the source security group.
          type: string
        ToPortRange:
          description: The end of the port range for the TCP and UDP protocols, or an ICMP code number.
          type: integer
      required:
      - SecurityGroupId
      - Flow
      type: object
    DeleteSecurityGroupRuleResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        SecurityGroup:
          $ref: '#/components/schemas/SecurityGroup'
      type: object
    DeleteServerCertificateRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        Name:
          description: The name of the server certificate you want to delete.
          type: string
      required:
      - Name
      type: object
    DeleteServerCertificateResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    DeleteSnapshotRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        SnapshotId:
          description: The ID of the snapshot you want to delete.
          type: string
      required:
      - SnapshotId
      type: object
    DeleteSnapshotResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    DeleteSubnetRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        SubnetId:
          description: The ID of the Subnet you want to delete.
          type: string
      required:
      - SubnetId
      type: object
    DeleteSubnetResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    DeleteTagsRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        ResourceIds:
          description: One or more resource IDs.
          items:
            type: string
          type: array
        Tags:
          description: One or more tags to delete (if you set a tag value, only the tags matching exactly this value are deleted).
          items:
            $ref: '#/components/schemas/ResourceTag'
          type: array
      required:
      - ResourceIds
      - Tags
      type: object
    DeleteTagsResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    DeleteUserGroupPolicyRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        PolicyName:
          description: The name of the policy document you want to delete.
          type: string
        UserGroupName:
          description: The name of the group.
          type: string
        UserGroupPath:
          description: The path to the group. If not specified, it is set to a slash (`/`).
          type: string
      required:
      - UserGroupName
      - PolicyName
      type: object
    DeleteUserGroupPolicyResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    DeleteUserGroupRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        Force:
          description: If true, forces the deletion of the user group even if it is not empty.
          type: boolean
        Path:
          description: The path to the group. If not specified, it is set to a slash (`/`).
          type: string
        UserGroupName:
          description: The name of the group you want to delete.
          type: string
      required:
      - UserGroupName
      type: object
    DeleteUserGroupResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    DeleteUserPolicyRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        PolicyName:
          description: The name of the policy document you want to delete (between 1 and 128 characters).
          type: string
        UserName:
          description: The name of the user you want to delete the policy from.
          type: string
      required:
      - UserName
      - PolicyName
      type: object
    DeleteUserPolicyResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    DeleteUserRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        UserName:
          description: The name of the EIM user you want to delete.
          type: string
      required:
      - UserName
      type: object
    DeleteUserResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    DeleteVirtualGatewayRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        VirtualGatewayId:
          description: The ID of the virtual gateway you want to delete.
          type: string
      required:
      - VirtualGatewayId
      type: object
    DeleteVirtualGatewayResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    DeleteVmGroupRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        VmGroupId:
          description: The ID of the VM group you want to delete.
          type: string
      required:
      - VmGroupId
      type: object
    DeleteVmGroupResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    DeleteVmTemplateRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        VmTemplateId:
          description: The ID of the VM template you want to delete.
          type: string
      required:
      - VmTemplateId
      type: object
    DeleteVmTemplateResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    DeleteVmsRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        VmIds:
          description: One or more IDs of VMs.
          items:
            type: string
          type: array
      required:
      - VmIds
      type: object
    DeleteVmsResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        Vms:
          description: Information about one or more terminated VMs.
          items:
            $ref: '#/components/schemas/VmState'
          type: array
      type: object
    DeleteVolumeRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        VolumeId:
          description: The ID of the volume you want to delete.
          type: string
      required:
      - VolumeId
      type: object
    DeleteVolumeResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    DeleteVpnConnectionRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        VpnConnectionId:
          description: The ID of the VPN connection you want to delete.
          type: string
      required:
      - VpnConnectionId
      type: object
    DeleteVpnConnectionResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    DeleteVpnConnectionRouteRequest:
      additionalProperties: false
      properties:
        DestinationIpRange:
          description: The network prefix of the route to delete, in CIDR notation (for example, `10.12.0.0/16`).
          type: string
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        VpnConnectionId:
          description: The ID of the target VPN connection of the static route to delete.
          type: string
      required:
      - DestinationIpRange
      - VpnConnectionId
      type: object
    DeleteVpnConnectionRouteResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    DeregisterVmsInLoadBalancerRequest:
      additionalProperties: false
      properties:
        BackendVmIds:
          description: One or more IDs of backend VMs.
          items:
            type: string
          type: array
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        LoadBalancerName:
          description: The name of the load balancer.
          type: string
      required:
      - BackendVmIds
      - LoadBalancerName
      type: object
    DeregisterVmsInLoadBalancerResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    DhcpOptionsSet:
      additionalProperties: false
      description: Information about the DHCP options set.
      properties:
        Default:
          description: If true, the DHCP options set is a default one. If false, it is not.
          type: boolean
        DhcpOptionsSetId:
          description: The ID of the DHCP options set.
          type: string
        DomainName:
          description: The domain name.
          type: string
        DomainNameServers:
          description: One or more IPs for the domain name servers.
          items:
            type: string
          type: array
        LogServers:
          description: One or more IPs for the log servers.
          items:
            type: string
          type: array
        NtpServers:
          description: One or more IPs for the NTP servers.
          items:
            type: string
          type: array
        Tags:
          description: One or more tags associated with the DHCP options set.
          items:
            $ref: '#/components/schemas/ResourceTag'
          type: array
      type: object
    DirectLink:
      additionalProperties: false
      description: Information about the DirectLink.
      properties:
        AccountId:
          description: The account ID of the owner of the DirectLink.
          type: string
        Bandwidth:
          description: The physical link bandwidth (either 1 Gbps or 10 Gbps).
          type: string
        DirectLinkId:
          description: The ID of the DirectLink (for example, `dxcon-xxxxxxxx`).
          type: string
        DirectLinkName:
          description: The name of the DirectLink.
          type: string
        Location:
          description: The datacenter where the DirectLink is located.
          type: string
        RegionName:
          description: The Region in which the DirectLink has been created.
          type: string
        State:
          description: |-
            The state of the DirectLink.<br />
            * `requested`: The DirectLink is requested but the request has not been validated yet.<br />
            * `pending`: The DirectLink request has been validated. It remains in the `pending` state until you establish the physical link.<br />
            * `available`: The physical link is established and the connection is ready to use.<br />
            * `deleting`: The deletion process is in progress.<br />
            * `deleted`: The DirectLink is deleted.
          type: string
      type: object
    DirectLinkInterface:
      additionalProperties: false
      description: Information about the DirectLink interface.
      properties:
        BgpAsn:
          description: |-
            The BGP (Border Gateway Protocol) ASN (Autonomous System Number) on the customer's side of the DirectLink interface. <br/>
            This number must be between `1` and `4294967295`, except `50624`, `53306`, and `132418`. <br/>
            If you do not have an ASN, you can choose one between `64512` and `65534` (both included), or between `4200000000` and `4294967295` (both included).
          type: integer
        BgpKey:
          description: The BGP authentication key.
          type: string
        ClientPrivateIp:
          description: The IP on the customer's side of the DirectLink interface.
          type: string
        DirectLinkInterfaceName:
          description: The name of the DirectLink interface.
          type: string
        OutscalePrivateIp:
          description: The IP on the OUTSCALE side of the DirectLink interface.
          type: string
        VirtualGatewayId:
          description: The ID of the target virtual gateway.
          type: string
        Vlan:
          description: The VLAN number associated with the DirectLink interface. This number must be unique and be between `2` and `4094`.
          type: integer
      required:
      - BgpAsn
      - DirectLinkInterfaceName
      - VirtualGatewayId
      - Vlan
      type: object
    DirectLinkInterfaces:
      additionalProperties: false
      description: Information about the DirectLink interfaces.
      properties:
        AccountId:
          description: The account ID of the owner of the DirectLink interface.
          type: string
        BgpAsn:
          description: The BGP (Border Gateway Protocol) ASN (Autonomous System Number) on the customer's side of the DirectLink interface.
          type: integer
        BgpKey:
          description: The BGP authentication key.
          type: string
        ClientPrivateIp:
          description: The IP on the customer's side of the DirectLink interface.
          type: string
        DirectLinkId:
          description: The ID of the DirectLink.
          type: string
        DirectLinkInterfaceId:
          description: The ID of the DirectLink interface.
          type: string
        DirectLinkInterfaceName:
          description: The name of the DirectLink interface.
          type: string
        InterfaceType:
          description: The type of the DirectLink interface (always `private`).
          type: string
        Location:
          description: The datacenter where the DirectLink interface is located.
          type: string
        Mtu:
          description: The maximum transmission unit (MTU) of the DirectLink interface, in bytes.
          type: integer
        OutscalePrivateIp:
          description: The IP on the OUTSCALE side of the DirectLink interface.
          type: string
        State:
          description: The state of the DirectLink interface (`pending` \| `available` \| `deleting` \| `deleted` \| `confirming` \| `rejected` \| `expired`).
          type: string
        VirtualGatewayId:
          description: The ID of the target virtual gateway.
          type: string
        Vlan:
          description: The VLAN number associated with the DirectLink interface.
          type: integer
      type: object
    DisableOutscaleLoginForUsersRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
      type: object
    DisableOutscaleLoginForUsersResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    DisableOutscaleLoginPerUsersRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        UserNames:
          description: The usernames of the EIM users you want to disable the Outscale login for.
          items:
            type: string
          type: array
      type: object
    DisableOutscaleLoginPerUsersResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    DisableOutscaleLoginRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
      type: object
    DisableOutscaleLoginResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    EnableOutscaleLoginForUsersRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
      type: object
    EnableOutscaleLoginForUsersResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    EnableOutscaleLoginPerUsersRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        UserNames:
          description: The usernames of the EIM users you want to enable the Outscale login for.
          items:
            type: string
          type: array
      type: object
    EnableOutscaleLoginPerUsersResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    EnableOutscaleLoginRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
      type: object
    EnableOutscaleLoginResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    ErrorResponse:
      additionalProperties: false
      properties:
        Errors:
          description: One or more errors.
          items:
            $ref: '#/components/schemas/Errors'
          type: array
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    Errors:
      additionalProperties: false
      description: Information about the errors.
      properties:
        Code:
          description: The code of the error (for example, `4078`). You can search for this returned code in the [errors page](api-errors.html) to find more details about the error.
          type: string
        Details:
          description: A description providing more details about the error.
          type: string
        Type:
          description: The type of the error (for example, `InvalidParameterValue`).
          type: string
      type: object
    FiltersAccessKeys:
      additionalProperties: false
      description: One or more filters.
      properties:
        AccessKeyIds:
          description: The IDs of the access keys.
          items:
            type: string
          type: array
        States:
          description: The states of the access keys (`ACTIVE` \| `INACTIVE`).
          items:
            type: string
          type: array
      type: object
    FiltersApiAccessRule:
      additionalProperties: false
      description: One or more filters.
      properties:
        ApiAccessRuleIds:
          description: One or more IDs of API access rules.
          items:
            type: string
          type: array
        CaIds:
          description: One or more IDs of Client Certificate Authorities (CAs).
          items:
            type: string
          type: array
        Cns:
          description: One or more Client Certificate Common Names (CNs).
          items:
            type: string
          type: array
        Descriptions:
          description: One or more descriptions of API access rules.
          items:
            type: string
          type: array
        IpRanges:
          description: One or more IPs or CIDR blocks (for example, `192.0.2.0/16`).
          items:
            type: string
          type: array
      type: object
    FiltersApiLog:
      additionalProperties: false
      description: One or more filters.
      properties:
        QueryAccessKeys:
          description: The access keys used for the logged calls.
          items:
            type: string
          type: array
        QueryApiNames:
          description: The names of the APIs of the logged calls (always `oapi` for the OUTSCALE API).
          items:
            type: string
          type: array
        QueryCallNames:
          description: The names of the logged calls.
          items:
            type: string
          type: array
        QueryDateAfter:
          description: The date and time, or the date, after which you want to retrieve logged calls, in ISO 8601 format (for example, `2020-06-14T00:00:00.000Z` or `2020-06-14`). By default, this date is set to 48 hours before the `QueryDateBefore` parameter value.
          oneOf:
          - format: date-time
            type: string
          - format: date
            type: string
        QueryDateBefore:
          description: The date and time, or the date, before which you want to retrieve logged calls, in ISO 8601 format (for example, `2020-06-30T00:00:00.000Z` or `2020-06-14`). By default, this date is set to now, or 48 hours after the `QueryDateAfter` parameter value.
          oneOf:
          - format: date-time
            type: string
          - format: date
            type: string
        QueryIpAddresses:
          description: The IPs used for the logged calls.
          items:
            type: string
          type: array
        QueryUserAgents:
          description: The user agents of the HTTP requests of the logged calls.
          items:
            type: string
          type: array
        RequestIds:
          description: The request IDs provided in the responses of the logged calls.
          items:
            type: string
          type: array
        ResponseStatusCodes:
          description: The HTTP status codes of the logged calls.
          items:
            type: integer
          type: array
      type: object
    FiltersCa:
      additionalProperties: false
      description: One or more filters.
      properties:
        CaFingerprints:
          description: The fingerprints of the CAs.
          items:
            type: string
          type: array
        CaIds:
          description: The IDs of the CAs.
          items:
            type: string
          type: array
        Descriptions:
          description: The descriptions of the CAs.
          items:
            type: string
          type: array
      type: object
    FiltersCatalogs:
      additionalProperties: false
      description: One or more filters.
      properties:
        CurrentCatalogOnly:
          description: By default or if set to true, only returns the current catalog. If false, returns the current catalog and past catalogs.
          type: boolean
        FromDate:
          description: The beginning of the time period, in ISO 8601 date format (for example, `2020-06-14`). This date cannot be older than 3 years. You must specify the parameters `FromDate` and `ToDate` together.
          format: date
          type: string
        ToDate:
          description: The end of the time period, in ISO 8601 date format (for example, `2020-06-30`). You must specify the parameters `FromDate` and `ToDate` together.
          format: date
          type: string
      type: object
    FiltersClientGateway:
      additionalProperties: false
      description: One or more filters.
      properties:
        BgpAsns:
          description: The Border Gateway Protocol (BGP) Autonomous System Numbers (ASNs) of the connections.
          items:
            type: integer
          type: array
        ClientGatewayIds:
          description: The IDs of the client gateways.
          items:
            type: string
          type: array
        ConnectionTypes:
          description: The types of communication tunnels used by the client gateways (always `ipsec.1`).
          items:
            type: string
          type: array
        PublicIps:
          description: The public IPv4 addresses of the client gateways.
          items:
            type: string
          type: array
        States:
          description: The states of the client gateways (`pending` \| `available` \| `deleting` \| `deleted`).
          items:
            type: string
          type: array
        TagKeys:
          description: The keys of the tags associated with the client gateways.
          items:
            type: string
          type: array
        TagValues:
          description: The values of the tags associated with the client gateways.
          items:
            type: string
          type: array
        Tags:
          description: 'The key/value combination of the tags associated with the client gateways, in the following format: &quot;Filters&quot;:{&quot;Tags&quot;:[&quot;TAGKEY=TAGVALUE&quot;]}.'
          items:
            type: string
          type: array
      type: object
    FiltersDedicatedGroup:
      additionalProperties: false
      description: One or more filters.
      properties:
        CpuGenerations:
          description: The processor generation for the VMs in the dedicated group (for example, `4`).
          items:
            type: integer
          type: array
        DedicatedGroupIds:
          description: The IDs of the dedicated groups.
          items:
            type: string
          type: array
        Names:
          description: The names of the dedicated groups.
          items:
            type: string
          type: array
        SubregionNames:
          description: The names of the Subregions in which the dedicated groups are located.
          items:
            type: string
          type: array
      type: object
    FiltersDhcpOptions:
      additionalProperties: false
      description: One or more filters.
      properties:
        Default:
          description: If true, lists all default DHCP options set. If false, lists all non-default DHCP options set.
          type: boolean
        DhcpOptionsSetIds:
          description: The IDs of the DHCP options sets.
          items:
            type: string
          type: array
        DomainNameServers:
          description: The IPs of the domain name servers used for the DHCP options sets.
          items:
            type: string
          type: array
        DomainNames:
          description: The domain names used for the DHCP options sets.
          items:
            type: string
          type: array
        LogServers:
          description: The IPs of the log servers used for the DHCP options sets.
          items:
            type: string
          type: array
        NtpServers:
          description: The IPs of the Network Time Protocol (NTP) servers used for the DHCP options sets.
          items:
            type: string
          type: array
        TagKeys:
          description: The keys of the tags associated with the DHCP options sets.
          items:
            type: string
          type: array
        TagValues:
          description: The values of the tags associated with the DHCP options sets.
          items:
            type: string
          type: array
        Tags:
          description: 'The key/value combination of the tags associated with the DHCP options sets, in the following format: &quot;Filters&quot;:{&quot;Tags&quot;:[&quot;TAGKEY=TAGVALUE&quot;]}.'
          items:
            type: string
          type: array
      type: object
    FiltersDirectLink:
      additionalProperties: false
      description: One or more filters.
      properties:
        DirectLinkIds:
          description: The IDs of the DirectLinks.
          items:
            type: string
          type: array
      type: object
    FiltersDirectLinkInterface:
      additionalProperties: false
      description: One or more filters.
      properties:
        DirectLinkIds:
          description: The IDs of the DirectLinks.
          items:
            type: string
          type: array
        DirectLinkInterfaceIds:
          description: The IDs of the DirectLink interfaces.
          items:
            type: string
          type: array
      type: object
    FiltersExportTask:
      additionalProperties: false
      description: One or more filters.
      properties:
        TaskIds:
          description: The IDs of the export tasks.
          items:
            type: string
          type: array
      type: object
    FiltersFlexibleGpu:
      additionalProperties: false
      description: One or more filters.
      properties:
        DeleteOnVmDeletion:
          description: Indicates whether the fGPU is deleted when terminating the VM.
          type: boolean
        FlexibleGpuIds:
          description: One or more IDs of fGPUs.
          items:
            type: string
          type: array
        Generations:
          description: The processor generations that the fGPUs are compatible with.
          items:
            type: string
          type: array
        ModelNames:
          description: One or more models of fGPUs. For more information, see [About Flexible GPUs](https://docs.outscale.com/en/userguide/About-Flexible-GPUs.html).
          items:
            type: string
          type: array
        States:
          description: The states of the fGPUs (`allocated` \| `attaching` \| `attached` \| `detaching`).
          items:
            type: string
          type: array
        SubregionNames:
          description: The Subregions where the fGPUs are located.
          items:
            type: string
          type: array
        VmIds:
          description: One or more IDs of VMs.
          items:
            type: string
          type: array
      type: object
    FiltersImage:
      additionalProperties: false
      description: One or more filters.
      properties:
        AccountAliases:
          description: The account aliases of the owners of the OMIs.
          items:
            type: string
          type: array
        AccountIds:
          description: The account IDs of the owners of the OMIs. By default, all the OMIs for which you have launch permissions are described.
          items:
            type: string
          type: array
        Architectures:
          description: The architectures of the OMIs (`i386` \| `x86_64`).
          items:
            type: string
          type: array
        BlockDeviceMappingDeleteOnVmDeletion:
          description: Whether the volumes are deleted or not when terminating the VM.
          type: boolean
        BlockDeviceMappingDeviceNames:
          description: The device names for the volumes.
          items:
            type: string
          type: array
        BlockDeviceMappingSnapshotIds:
          description: The IDs of the snapshots used to create the volumes.
          items:
            type: string
          type: array
        BlockDeviceMappingVolumeSizes:
          description: The sizes of the volumes, in gibibytes (GiB).
          items:
            type: integer
          type: array
        BlockDeviceMappingVolumeTypes:
          description: The types of volumes (`standard` \| `gp2` \| `io1`).
          items:
            type: string
          type: array
        BootModes:
          description: The boot modes compatible with the OMIs.
          items:
            $ref: '#/components/schemas/BootMode'
          type: array
        Descriptions:
          description: The descriptions of the OMIs, provided when they were created.
          items:
            type: string
          type: array
        FileLocations:
          description: The locations of the buckets where the OMI files are stored.
          items:
            type: string
          type: array
        Hypervisors:
          description: The hypervisor type of the OMI (always `xen`).
          items:
            type: string
          type: array
        ImageIds:
          description: The IDs of the OMIs.
          items:
            type: string
          type: array
        ImageNames:
          description: The names of the OMIs, provided when they were created.
          items:
            type: string
          type: array
        PermissionsToLaunchAccountIds:
          description: The account IDs which have launch permissions for the OMIs.
          items:
            type: string
          type: array
        PermissionsToLaunchGlobalPermission:
          description: If true, lists all public OMIs. If false, lists all private OMIs.
          type: boolean
        ProductCodeNames:
          description: The names of the product codes associated with the OMI.
          items:
            type: string
          type: array
        ProductCodes:
          description: The product codes associated with the OMI.
          items:
            type: string
          type: array
        RootDeviceNames:
          description: The name of the root device. This value must be /dev/sda1.
          items:
            type: string
          type: array
        RootDeviceTypes:
          description: The types of root device used by the OMIs (`bsu` or `ebs`).
          items:
            type: string
          type: array
        SecureBoot:
          description: Whether secure boot is activated or not.
          type: boolean
        States:
          description: The states of the OMIs (`pending` \| `available` \| `failed`).
          items:
            type: string
          type: array
        TagKeys:
          description: The keys of the tags associated with the OMIs.
          items:
            type: string
          type: array
        TagValues:
          description: The values of the tags associated with the OMIs.
          items:
            type: string
          type: array
        Tags:
          description: 'The key/value combination of the tags associated with the OMIs, in the following format: &quot;Filters&quot;:{&quot;Tags&quot;:[&quot;TAGKEY=TAGVALUE&quot;]}.'
          items:
            type: string
          type: array
        VirtualizationTypes:
          description: The virtualization types (always `hvm`).
          items:
            type: string
          type: array
      type: object
    FiltersInternetService:
      additionalProperties: false
      description: One or more filters.
      properties:
        InternetServiceIds:
          description: The IDs of the internet services.
          items:
            type: string
          type: array
        LinkNetIds:
          description: The IDs of the Nets the internet services are attached to.
          items:
            type: string
          type: array
        LinkStates:
          description: The current states of the attachments between the internet services and the Nets (only `available`, if the internet gateway is attached to a Net).
          items:
            type: string
          type: array
        TagKeys:
          description: The keys of the tags associated with the internet services.
          items:
            type: string
          type: array
        TagValues:
          description: The values of the tags associated with the internet services.
          items:
            type: string
          type: array
        Tags:
          description: 'The key/value combination of the tags associated with the internet services, in the following format: &quot;Filters&quot;:{&quot;Tags&quot;:[&quot;TAGKEY=TAGVALUE&quot;]}.'
          items:
            type: string
          type: array
      type: object
    FiltersKeypair:
      additionalProperties: false
      description: One or more filters.
      properties:
        KeypairFingerprints:
          description: The fingerprints of the keypairs.
          items:
            type: string
          type: array
        KeypairIds:
          description: The IDs of the keypairs.
          items:
            type: string
          type: array
        KeypairNames:
          description: The names of the keypairs.
          items:
            type: string
          type: array
        KeypairTypes:
          description: The types of the keypairs (`ssh-rsa`, `ssh-ed25519`, `ecdsa-sha2-nistp256`, `ecdsa-sha2-nistp384`, or `ecdsa-sha2-nistp521`).
          items:
            type: string
          type: array
        TagKeys:
          description: The keys of the tags associated with the keypairs.
          items:
            type: string
          type: array
        TagValues:
          description: The values of the tags associated with the keypairs.
          items:
            type: string
          type: array
        Tags:
          description: 'The key/value combination of the tags associated with the keypairs, in the following format: &quot;Filters&quot;:{&quot;Tags&quot;:[&quot;TAGKEY=TAGVALUE&quot;]}.'
          items:
            type: string
          type: array
      type: object
    FiltersListenerRule:
      additionalProperties: false
      description: One or more filters.
      properties:
        ListenerRuleNames:
          description: The names of the listener rules.
          items:
            type: string
          type: array
      type: object
    FiltersLoadBalancer:
      additionalProperties: false
      description: One or more filters.
      properties:
        LoadBalancerNames:
          description: The names of the load balancers.
          items:
            type: string
          type: array
      type: object
    FiltersNatService:
      additionalProperties: false
      description: One or more filters.
      properties:
        ClientTokens:
          description: The idempotency tokens provided when creating the NAT services.
          items:
            type: string
          type: array
        NatServiceIds:
          description: The IDs of the NAT services.
          items:
            type: string
          type: array
        NetIds:
          description: The IDs of the Nets in which the NAT services are.
          items:
            type: string
          type: array
        States:
          description: The states of the NAT services (`pending` \| `available` \| `deleting` \| `deleted`).
          items:
            type: string
          type: array
        SubnetIds:
          description: The IDs of the Subnets in which the NAT services are.
          items:
            type: string
          type: array
        TagKeys:
          description: The keys of the tags associated with the NAT services.
          items:
            type: string
          type: array
        TagValues:
          description: The values of the tags associated with the NAT services.
          items:
            type: string
          type: array
        Tags:
          description: 'The key/value combination of the tags associated with the NAT services, in the following format: &quot;Filters&quot;:{&quot;Tags&quot;:[&quot;TAGKEY=TAGVALUE&quot;]}.'
          items:
            type: string
          type: array
      type: object
    FiltersNet:
      additionalProperties: false
      description: One or more filters.
      properties:
        DhcpOptionsSetIds:
          description: The IDs of the DHCP options sets.
          items:
            type: string
          type: array
        IpRanges:
          description: The IP ranges for the Nets, in CIDR notation (for example, `10.0.0.0/16`).
          items:
            type: string
          type: array
        IsDefault:
          description: If true, the Net used is the default one.
          type: boolean
        NetIds:
          description: The IDs of the Nets.
          items:
            type: string
          type: array
        States:
          description: The states of the Nets (`pending` \| `available` \| `deleting`).
          items:
            type: string
          type: array
        TagKeys:
          description: The keys of the tags associated with the Nets.
          items:
            type: string
          type: array
        TagValues:
          description: The values of the tags associated with the Nets.
          items:
            type: string
          type: array
        Tags:
          description: 'The key/value combination of the tags associated with the Nets, in the following format: &quot;Filters&quot;:{&quot;Tags&quot;:[&quot;TAGKEY=TAGVALUE&quot;]}.'
          items:
            type: string
          type: array
      type: object
    FiltersNetAccessPoint:
      additionalProperties: false
      description: One or more filters.
      properties:
        NetAccessPointIds:
          description: The IDs of the Net access points.
          items:
            type: string
          type: array
        NetIds:
          description: The IDs of the Nets.
          items:
            type: string
          type: array
        ServiceNames:
          description: The names of the services. For more information, see [ReadNetAccessPointServices](#readnetaccesspointservices).
          items:
            type: string
          type: array
        States:
          description: The states of the Net access points (`pending` \| `available` \| `deleting` \| `deleted`).
          items:
            type: string
          type: array
        TagKeys:
          description: The keys of the tags associated with the Net access points.
          items:
            type: string
          type: array
        TagValues:
          description: The values of the tags associated with the Net access points.
          items:
            type: string
          type: array
        Tags:
          description: 'The key/value combination of the tags associated with the Net access points, in the following format: &quot;Filters&quot;:{&quot;Tags&quot;:[&quot;TAGKEY=TAGVALUE&quot;]}.'
          items:
            type: string
          type: array
      type: object
    FiltersNetPeering:
      additionalProperties: false
      description: One or more filters.
      properties:
        AccepterNetAccountIds:
          description: The account IDs of the owners of the peer Nets.
          items:
            type: string
          type: array
        AccepterNetIpRanges:
          description: The IP ranges of the peer Nets, in CIDR notation (for example, `10.0.0.0/24`).
          items:
            type: string
          type: array
        AccepterNetNetIds:
          description: The IDs of the peer Nets.
          items:
            type: string
          type: array
        ExpirationDates:
          description: The dates and times at which the Net peerings expire, in ISO 8601 date-time format (for example, `2020-06-14T00:00:00.000Z`).
          items:
            format: date-time
            type: string
          type: array
        NetPeeringIds:
          description: The IDs of the Net peerings.
          items:
            type: string
          type: array
        SourceNetAccountIds:
          description: The account IDs of the owners of the peer Nets.
          items:
            type: string
          type: array
        SourceNetIpRanges:
          description: The IP ranges of the peer Nets.
          items:
            type: string
          type: array
        SourceNetNetIds:
          description: The IDs of the peer Nets.
          items:
            type: string
          type: array
        StateMessages:
          description: Additional information about the states of the Net peerings.
          items:
            type: string
          type: array
        StateNames:
          description: The states of the Net peerings (`pending-acceptance` \| `active` \| `rejected` \| `failed` \| `expired` \| `deleted`).
          items:
            type: string
          type: array
        TagKeys:
          description: The keys of the tags associated with the Net peerings.
          items:
            type: string
          type: array
        TagValues:
          description: The values of the tags associated with the Net peerings.
          items:
            type: string
          type: array
        Tags:
          description: 'The key/value combination of the tags associated with the Net peerings, in the following format: &quot;Filters&quot;:{&quot;Tags&quot;:[&quot;TAGKEY=TAGVALUE&quot;]}.'
          items:
            type: string
          type: array
      type: object
    FiltersNic:
      additionalProperties: false
      description: One or more filters.
      properties:
        Descriptions:
          description: The descriptions of the NICs.
          items:
            type: string
          type: array
        IsSourceDestCheck:
          description: Whether the source/destination checking is enabled (true) or disabled (false).
          type: boolean
        LinkNicDeleteOnVmDeletion:
          description: Whether the NICs are deleted when the VMs they are attached to are terminated.
          type: boolean
        LinkNicDeviceNumbers:
          description: The device numbers the NICs are attached to.
          items:
            type: integer
          type: array
        LinkNicLinkNicIds:
          description: The attachment IDs of the NICs.
          items:
            type: string
          type: array
        LinkNicStates:
          description: The states of the attachments.
          items:
            type: string
          type: array
        LinkNicVmAccountIds:
          description: The account IDs of the owners of the VMs the NICs are attached to.
          items:
            type: string
          type: array
        LinkNicVmIds:
          description: The IDs of the VMs the NICs are attached to.
          items:
            type: string
          type: array
        LinkPublicIpAccountIds:
          description: The account IDs of the owners of the public IPs associated with the NICs.
          items:
            type: string
          type: array
        LinkPublicIpLinkPublicIpIds:
          description: The association IDs returned when the public IPs were associated with the NICs.
          items:
            type: string
          type: array
        LinkPublicIpPublicDnsNames:
          description: The public DNS names associated with the public IPs.
          items:
            type: string
          type: array
        LinkPublicIpPublicIpIds:
          description: The allocation IDs returned when the public IPs were allocated to their accounts.
          items:
            type: string
          type: array
        LinkPublicIpPublicIps:
          description: The public IPs associated with the NICs.
          items:
            type: string
          type: array
        MacAddresses:
          description: The Media Access Control (MAC) addresses of the NICs.
          items:
            type: string
          type: array
        NetIds:
          description: The IDs of the Nets where the NICs are located.
          items:
            type: string
          type: array
        NicIds:
          description: The IDs of the NICs.
          items:
            type: string
          type: array
        PrivateDnsNames:
          description: The private DNS names associated with the primary private IPs.
          items:
            type: string
          type: array
        PrivateIpsLinkPublicIpAccountIds:
          description: The account IDs of the owner of the public IPs associated with the private IPs.
          items:
            type: string
          type: array
        PrivateIpsLinkPublicIpPublicIps:
          description: The public IPs associated with the private IPs.
          items:
            type: string
          type: array
        PrivateIpsPrimaryIp:
          description: Whether the private IP is the primary IP associated with the NIC.
          type: boolean
        PrivateIpsPrivateIps:
          description: The private IPs of the NICs.
          items:
            type: string
          type: array
        SecurityGroupIds:
          description: The IDs of the security groups associated with the NICs.
          items:
            type: string
          type: array
        SecurityGroupNames:
          description: The names of the security groups associated with the NICs.
          items:
            type: string
          type: array
        States:
          description: The states of the NICs.
          items:
            type: string
          type: array
        SubnetIds:
          description: The IDs of the Subnets for the NICs.
          items:
            type: string
          type: array
        SubregionNames:
          description: The Subregions where the NICs are located.
          items:
            type: string
          type: array
        TagKeys:
          description: The keys of the tags associated with the NICs.
          items:
            type: string
          type: array
        TagValues:
          description: The values of the tags associated with the NICs.
          items:
            type: string
          type: array
        Tags:
          description: 'The key/value combination of the tags associated with the NICs, in the following format: &quot;Filters&quot;:{&quot;Tags&quot;:[&quot;TAGKEY=TAGVALUE&quot;]}.'
          items:
            type: string
          type: array
      type: object
    FiltersProductType:
      additionalProperties: false
      description: One or more filters.
      properties:
        ProductTypeIds:
          description: The IDs of the product types.
          items:
            type: string
          type: array
      type: object
    FiltersPublicIp:
      additionalProperties: false
      description: One or more filters.
      properties:
        LinkPublicIpIds:
          description: The IDs representing the associations of public IPs with VMs or NICs.
          items:
            type: string
          type: array
        NicAccountIds:
          description: The account IDs of the owners of the NICs.
          items:
            type: string
          type: array
        NicIds:
          description: The IDs of the NICs.
          items:
            type: string
          type: array
        Placements:
          description: Whether the public IPs are for use in the public Cloud or in a Net.
          items:
            type: string
          type: array
        PrivateIps:
          description: The private IPs associated with the public IPs.
          items:
            type: string
          type: array
        PublicIpIds:
          description: The IDs of the public IPs.
          items:
            type: string
          type: array
        PublicIps:
          description: The public IPs.
          items:
            type: string
          type: array
        TagKeys:
          description: The keys of the tags associated with the public IPs.
          items:
            type: string
          type: array
        TagValues:
          description: The values of the tags associated with the public IPs.
          items:
            type: string
          type: array
        Tags:
          description: 'The key/value combination of the tags associated with the public IPs, in the following format: &quot;Filters&quot;:{&quot;Tags&quot;:[&quot;TAGKEY=TAGVALUE&quot;]}.'
          items:
            type: string
          type: array
        VmIds:
          description: The IDs of the VMs.
          items:
            type: string
          type: array
      type: object
    FiltersQuota:
      additionalProperties: false
      description: One or more filters.
      properties:
        Collections:
          description: The group names of the quotas.
          items:
            type: string
          type: array
        QuotaNames:
          description: The names of the quotas.
          items:
            type: string
          type: array
        QuotaTypes:
          description: The resource IDs if these are resource-specific quotas, `global` if they are not.
          items:
            type: string
          type: array
        ShortDescriptions:
          description: The description of the quotas.
          items:
            type: string
          type: array
      type: object
    FiltersRouteTable:
      additionalProperties: false
      description: One or more filters.
      properties:
        LinkRouteTableIds:
          description: The IDs of the route tables involved in the associations.
          items:
            type: string
          type: array
        LinkRouteTableLinkRouteTableIds:
          description: The IDs of the associations between the route tables and the Subnets.
          items:
            type: string
          type: array
        LinkRouteTableMain:
          description: If true, the route tables are the main ones for their Nets.
          type: boolean
        LinkSubnetIds:
          description: The IDs of the Subnets involved in the associations.
          items:
            type: string
          type: array
        NetIds:
          description: The IDs of the Nets for the route tables.
          items:
            type: string
          type: array
        RouteCreationMethods:
          description: The methods used to create a route.
          items:
            type: string
          type: array
        RouteDestinationIpRanges:
          description: The IP ranges specified in routes in the tables.
          items:
            type: string
          type: array
        RouteDestinationServiceIds:
          description: The service IDs specified in routes in the tables.
          items:
            type: string
          type: array
        RouteGatewayIds:
          description: The IDs of the gateways specified in routes in the tables.
          items:
            type: string
          type: array
        RouteNatServiceIds:
          description: The IDs of the NAT services specified in routes in the tables.
          items:
            type: string
          type: array
        RouteNetPeeringIds:
          description: The IDs of the Net peerings specified in routes in the tables.
          items:
            type: string
          type: array
        RouteStates:
          description: The states of routes in the route tables (always `active`).
          items:
            type: string
          type: array
        RouteTableIds:
          description: The IDs of the route tables.
          items:
            type: string
          type: array
        RouteVmIds:
          description: The IDs of the VMs specified in routes in the tables.
          items:
            type: string
          type: array
        TagKeys:
          description: The keys of the tags associated with the route tables.
          items:
            type: string
          type: array
        TagValues:
          description: The values of the tags associated with the route tables.
          items:
            type: string
          type: array
        Tags:
          description: 'The key/value combination of the tags associated with the route tables, in the following format: &quot;Filters&quot;:{&quot;Tags&quot;:[&quot;TAGKEY=TAGVALUE&quot;]}.'
          items:
            type: string
          type: array
      type: object
    FiltersSecurityGroup:
      additionalProperties: false
      description: One or more filters.
      properties:
        Descriptions:
          description: The descriptions of the security groups.
          items:
            type: string
          type: array
        InboundRuleAccountIds:
          description: The account IDs that have been granted permissions.
          items:
            type: string
          type: array
        InboundRuleFromPortRanges:
          description: The beginnings of the port ranges for the TCP and UDP protocols, or the ICMP type numbers.
          items:
            type: integer
          type: array
        InboundRuleIpRanges:
          description: The IP ranges that have been granted permissions, in CIDR notation (for example, `10.0.0.0/24`).
          items:
            type: string
          type: array
        InboundRuleProtocols:
          description: The IP protocols for the permissions (`tcp` \| `udp` \| `icmp`, or a protocol number, or `-1` for all protocols).
          items:
            type: string
          type: array
        InboundRuleSecurityGroupIds:
          description: The IDs of the security groups that have been granted permissions.
          items:
            type: string
          type: array
        InboundRuleSecurityGroupNames:
          description: The names of the security groups that have been granted permissions.
          items:
            type: string
          type: array
        InboundRuleToPortRanges:
          description: The ends of the port ranges for the TCP and UDP protocols, or the ICMP code numbers.
          items:
            type: integer
          type: array
        NetIds:
          description: The IDs of the Nets specified when the security groups were created.
          items:
            type: string
          type: array
        OutboundRuleAccountIds:
          description: The account IDs that have been granted permissions.
          items:
            type: string
          type: array
        OutboundRuleFromPortRanges:
          description: The beginnings of the port ranges for the TCP and UDP protocols, or the ICMP type numbers.
          items:
            type: integer
          type: array
        OutboundRuleIpRanges:
          description: The IP ranges that have been granted permissions, in CIDR notation (for example, `10.0.0.0/24`).
          items:
            type: string
          type: array
        OutboundRuleProtocols:
          description: The IP protocols for the permissions (`tcp` \| `udp` \| `icmp`, or a protocol number, or `-1` for all protocols).
          items:
            type: string
          type: array
        OutboundRuleSecurityGroupIds:
          description: The IDs of the security groups that have been granted permissions.
          items:
            type: string
          type: array
        OutboundRuleSecurityGroupNames:
          description: The names of the security groups that have been granted permissions.
          items:
            type: string
          type: array
        OutboundRuleToPortRanges:
          description: The ends of the port ranges for the TCP and UDP protocols, or the ICMP code numbers.
          items:
            type: integer
          type: array
        SecurityGroupIds:
          description: The IDs of the security groups.
          items:
            type: string
          type: array
        SecurityGroupNames:
          description: The names of the security groups.
          items:
            type: string
          type: array
        TagKeys:
          description: The keys of the tags associated with the security groups.
          items:
            type: string
          type: array
        TagValues:
          description: The values of the tags associated with the security groups.
          items:
            type: string
          type: array
        Tags:
          description: 'The key/value combination of the tags associated with the security groups, in the following format: &quot;Filters&quot;:{&quot;Tags&quot;:[&quot;TAGKEY=TAGVALUE&quot;]}.'
          items:
            type: string
          type: array
      type: object
    FiltersServerCertificate:
      additionalProperties: false
      description: One or more filters.
      properties:
        Paths:
          description: The paths to the server certificates.
          items:
            type: string
          type: array
      type: object
    FiltersService:
      additionalProperties: false
      description: One or more filters.
      properties:
        ServiceIds:
          description: The IDs of the services.
          items:
            type: string
          type: array
        ServiceNames:
          description: The names of the services.
          items:
            type: string
          type: array
      type: object
    FiltersSnapshot:
      additionalProperties: false
      description: One or more filters.
      properties:
        AccountAliases:
          description: The account aliases of the owners of the snapshots.
          items:
            type: string
          type: array
        AccountIds:
          description: The account IDs of the owners of the snapshots.
          items:
            type: string
          type: array
        ClientTokens:
          description: The idempotency tokens provided when creating the snapshots.
          items:
            type: string
          type: array
        Descriptions:
          description: The descriptions of the snapshots.
          items:
            type: string
          type: array
        FromCreationDate:
          description: The beginning of the time period, in ISO 8601 date-time format (for example, `2020-06-14T00:00:00.000Z`).
          format: date-time
          type: string
        PermissionsToCreateVolumeAccountIds:
          description: The account IDs which have permissions to create volumes.
          items:
            type: string
          type: array
        PermissionsToCreateVolumeGlobalPermission:
          description: If true, lists all public volumes. If false, lists all private volumes.
          type: boolean
        Progresses:
          description: The progresses of the snapshots, as a percentage.
          items:
            type: integer
          type: array
        SnapshotIds:
          description: The IDs of the snapshots.
          items:
            type: string
          type: array
        States:
          description: The states of the snapshots (`in-queue` \| `pending` \| `completed` \| `error` \| `deleting`).
          items:
            type: string
          type: array
        TagKeys:
          description: The keys of the tags associated with the snapshots.
          items:
            type: string
          type: array
        TagValues:
          description: The values of the tags associated with the snapshots.
          items:
            type: string
          type: array
        Tags:
          description: 'The key/value combination of the tags associated with the snapshots, in the following format: &quot;Filters&quot;:{&quot;Tags&quot;:[&quot;TAGKEY=TAGVALUE&quot;]}.'
          items:
            type: string
          type: array
        ToCreationDate:
          description: The end of the time period, in ISO 8601 date-time format (for example, `2020-06-30T00:00:00.000Z`).
          format: date-time
          type: string
        VolumeIds:
          description: The IDs of the volumes used to create the snapshots.
          items:
            type: string
          type: array
        VolumeSizes:
          description: The sizes of the volumes used to create the snapshots, in gibibytes (GiB).
          items:
            type: integer
          type: array
      type: object
    FiltersSubnet:
      additionalProperties: false
      description: One or more filters.
      properties:
        AvailableIpsCounts:
          description: The number of available IPs.
          items:
            type: integer
          type: array
        IpRanges:
          description: The IP ranges in the Subnets, in CIDR notation (for example, `10.0.0.0/16`).
          items:
            type: string
          type: array
        NetIds:
          description: The IDs of the Nets in which the Subnets are.
          items:
            type: string
          type: array
        States:
          description: The states of the Subnets (`pending` \| `available` \| `deleted`).
          items:
            type: string
          type: array
        SubnetIds:
          description: The IDs of the Subnets.
          items:
            type: string
          type: array
        SubregionNames:
          description: The names of the Subregions in which the Subnets are located.
          items:
            type: string
          type: array
        TagKeys:
          description: The keys of the tags associated with the Subnets.
          items:
            type: string
          type: array
        TagValues:
          description: The values of the tags associated with the Subnets.
          items:
            type: string
          type: array
        Tags:
          description: 'The key/value combination of the tags associated with the Subnets, in the following format: &quot;Filters&quot;:{&quot;Tags&quot;:[&quot;TAGKEY=TAGVALUE&quot;]}.'
          items:
            type: string
          type: array
      type: object
    FiltersSubregion:
      additionalProperties: false
      description: One or more filters.
      properties:
        RegionNames:
          description: The names of the Regions containing the Subregions.
          items:
            type: string
          type: array
        States:
          description: The states of the Subregions.
          items:
            type: string
          type: array
        SubregionNames:
          description: The names of the Subregions.
          items:
            type: string
          type: array
      type: object
    FiltersTag:
      additionalProperties: false
      description: One or more filters.
      properties:
        Keys:
          description: The keys of the tags that are assigned to the resources. You can use this filter alongside the `Values` filter. In that case, you filter the resources corresponding to each tag, regardless of the other filter.
          items:
            type: string
          type: array
        ResourceIds:
          description: The IDs of the resources with which the tags are associated.
          items:
            type: string
          type: array
        ResourceTypes:
          description: The resource type (`customer-gateway` \| `dhcpoptions` \| `image` \| `instance` \| `keypair` \| `natgateway` \| `network-interface` \| `public-ip` \| `route-table` \| `security-group` \| `snapshot` \| `subnet` \| `task` \| `virtual-private-gateway` \| `volume` \| `vpc` \| `vpc-endpoint` \| `vpc-peering-connection`\| `vpn-connection`).
          items:
            type: string
          type: array
        Values:
          description: The values of the tags that are assigned to the resources. You can use this filter alongside the `TagKeys` filter. In that case, you filter the resources corresponding to each tag, regardless of the other filter.
          items:
            type: string
          type: array
      type: object
    FiltersUserGroup:
      additionalProperties: false
      description: One or more filters.
      properties:
        PathPrefix:
          description: The path prefix of the groups. If not specified, it is set to a slash (`/`).
          type: string
        UserGroupIds:
          description: The IDs of the user groups.
          items:
            type: string
          type: array
      type: object
    FiltersUsers:
      additionalProperties: false
      description: One or more filters.
      properties:
        UserIds:
          description: The IDs of the users.
          items:
            type: string
          type: array
      type: object
    FiltersVirtualGateway:
      additionalProperties: false
      description: One or more filters.
      properties:
        ConnectionTypes:
          description: The types of the virtual gateways (always `ipsec.1`).
          items:
            type: string
          type: array
        LinkNetIds:
          description: The IDs of the Nets the virtual gateways are attached to.
          items:
            type: string
          type: array
        LinkStates:
          description: The current states of the attachments between the virtual gateways and the Nets (`attaching` \| `attached` \| `detaching` \| `detached`).
          items:
            type: string
          type: array
        States:
          description: The states of the virtual gateways (`pending` \| `available` \| `deleting` \| `deleted`).
          items:
            type: string
          type: array
        TagKeys:
          description: The keys of the tags associated with the virtual gateways.
          items:
            type: string
          type: array
        TagValues:
          description: The values of the tags associated with the virtual gateways.
          items:
            type: string
          type: array
        Tags:
          description: 'The key/value combination of the tags associated with the virtual gateways, in the following format: &quot;Filters&quot;:{&quot;Tags&quot;:[&quot;TAGKEY=TAGVALUE&quot;]}.'
          items:
            type: string
          type: array
        VirtualGatewayIds:
          description: The IDs of the virtual gateways.
          items:
            type: string
          type: array
      type: object
    FiltersVm:
      additionalProperties: false
      description: One or more filters.
      properties:
        Architectures:
          description: The architectures of the VMs (`i386` \| `x86_64`).
          items:
            type: string
          type: array
        BlockDeviceMappingDeleteOnVmDeletion:
          description: Whether the BSU volumes are deleted when terminating the VMs.
          type: boolean
        BlockDeviceMappingDeviceNames:
          description: The device names for the BSU volumes (in the format `/dev/sdX`, `/dev/sdXX`, `/dev/xvdX`, or `/dev/xvdXX`).
          items:
            type: string
          type: array
        BlockDeviceMappingLinkDates:
          description: The link dates for the BSU volumes mapped to the VMs (for example, `2016-01-23T18:45:30.000Z`).
          items:
            oneOf:
            - format: date
              type: string
            - format: date-time
              type: string
          type: array
        BlockDeviceMappingStates:
          description: The states for the BSU volumes (`attaching` \| `attached` \| `detaching` \| `detached`).
          items:
            type: string
          type: array
        BlockDeviceMappingVolumeIds:
          description: The volume IDs of the BSU volumes.
          items:
            type: string
          type: array
        BootModes:
          description: The boot modes of the VMs.
          items:
            $ref: '#/components/schemas/BootMode'
          type: array
        ClientTokens:
          description: The idempotency tokens provided when launching the VMs.
          items:
            type: string
          type: array
        CreationDates:
          description: The dates when the VMs were launched.
          items:
            oneOf:
            - format: date
              type: string
            - format: date-time
              type: string
          type: array
        ImageIds:
          description: The IDs of the OMIs used to launch the VMs.
          items:
            type: string
          type: array
        IsSourceDestChecked:
          description: Whether the source/destination checking is enabled (true) or disabled (false).
          type: boolean
        KeypairNames:
          description: The names of the keypairs used when launching the VMs.
          items:
            type: string
          type: array
        LaunchNumbers:
          description: The numbers for the VMs when launching a group of several VMs (for example, `0`, `1`, `2`, and so on).
          items:
            type: integer
          type: array
        Lifecycles:
          description: Whether the VMs are Spot Instances (spot).
          items:
            type: string
          type: array
        NetIds:
          description: The IDs of the Nets in which the VMs are running.
          items:
            type: string
          type: array
        NicAccountIds:
          description: The IDs of the NICs.
          items:
            type: string
          type: array
        NicDescriptions:
          description: The descriptions of the NICs.
          items:
            type: string
          type: array
        NicIsSourceDestChecked:
          description: Whether the source/destination checking is enabled (true) or disabled (false).
          type: boolean
        NicLinkNicDeleteOnVmDeletion:
          description: Whether the NICs are deleted when the VMs they are attached to are deleted.
          type: boolean
        NicLinkNicDeviceNumbers:
          description: The device numbers the NICs are attached to.
          items:
            type: integer
          type: array
        NicLinkNicLinkNicDates:
          description: The dates and times (UTC) when the NICs were attached to the VMs.
          items:
            oneOf:
            - format: date
              type: string
            - format: date-time
              type: string
          type: array
        NicLinkNicLinkNicIds:
          description: The IDs of the NIC attachments.
          items:
            type: string
          type: array
        NicLinkNicStates:
          description: The states of the attachments.
          items:
            type: string
          type: array
        NicLinkNicVmAccountIds:
          description: The account IDs of the owners of the VMs the NICs are attached to.
          items:
            type: string
          type: array
        NicLinkNicVmIds:
          description: The IDs of the VMs the NICs are attached to.
          items:
            type: string
          type: array
        NicLinkPublicIpAccountIds:
          description: The account IDs of the owners of the public IPs associated with the NICs.
          items:
            type: string
          type: array
        NicLinkPublicIpLinkPublicIpIds:
          description: The association IDs returned when the public IPs were associated with the NICs.
          items:
            type: string
          type: array
        NicLinkPublicIpPublicIpIds:
          description: The allocation IDs returned when the public IPs were allocated to their accounts.
          items:
            type: string
          type: array
        NicLinkPublicIpPublicIps:
          description: The public IPs associated with the NICs.
          items:
            type: string
          type: array
        NicMacAddresses:
          description: The Media Access Control (MAC) addresses of the NICs.
          items:
            type: string
          type: array
        NicNetIds:
          description: The IDs of the Nets where the NICs are located.
          items:
            type: string
          type: array
        NicNicIds:
          description: The IDs of the NICs.
          items:
            type: string
          type: array
        NicPrivateIpsLinkPublicIpAccountIds:
          description: The account IDs of the owner of the public IPs associated with the private IPs.
          items:
            type: string
          type: array
        NicPrivateIpsLinkPublicIpIds:
          description: The public IPs associated with the private IPs.
          items:
            type: string
          type: array
        NicPrivateIpsPrimaryIp:
          description: Whether the private IPs are the primary IPs associated with the NICs.
          type: boolean
        NicPrivateIpsPrivateIps:
          description: The private IPs of the NICs.
          items:
            type: string
          type: array
        NicSecurityGroupIds:
          description: The IDs of the security groups associated with the NICs.
          items:
            type: string
          type: array
        NicSecurityGroupNames:
          description: The names of the security groups associated with the NICs.
          items:
            type: string
          type: array
        NicStates:
          description: The states of the NICs (`available` \| `in-use`).
          items:
            type: string
          type: array
        NicSubnetIds:
          description: The IDs of the Subnets for the NICs.
          items:
            type: string
          type: array
        NicSubregionNames:
          description: The Subregions where the NICs are located.
          items:
            type: string
          type: array
        Platforms:
          description: The platforms. Use windows if you have Windows VMs. Otherwise, leave this filter blank.
          items:
            type: string
          type: array
        PrivateIps:
          description: The private IPs of the VMs.
          items:
            type: string
          type: array
        ProductCodes:
          description: The product codes associated with the OMI used to create the VMs.
          items:
            type: string
          type: array
        PublicIps:
          description: The public IPs of the VMs.
          items:
            type: string
          type: array
        ReservationIds:
          description: The IDs of the reservation of the VMs, created every time you launch VMs. These reservation IDs can be associated with several VMs when you launch a group of VMs using the same launch request.
          items:
            type: string
          type: array
        RootDeviceNames:
          description: The names of the root devices for the VMs (for example, `/dev/sda1`)
          items:
            type: string
          type: array
        RootDeviceTypes:
          description: The root devices types used by the VMs (always `ebs`)
          items:
            type: string
          type: array
        SecurityGroupIds:
          description: The IDs of the security groups for the VMs (only in the public Cloud).
          items:
            type: string
          type: array
        SecurityGroupNames:
          description: The names of the security groups for the VMs (only in the public Cloud).
          items:
            type: string
          type: array
        StateReasonCodes:
          description: The reason codes for the state changes.
          items:
            type: integer
          type: array
        StateReasonMessages:
          description: The messages describing the state changes.
          items:
            type: string
          type: array
        StateReasons:
          description: The reasons explaining the current states of the VMs. This filter is like the `StateReasonCodes` one.
          items:
            type: string
          type: array
        SubnetIds:
          description: The IDs of the Subnets for the VMs.
          items:
            type: string
          type: array
        SubregionNames:
          description: The names of the Subregions of the VMs.
          items:
            type: string
          type: array
        TagKeys:
          description: The keys of the tags associated with the VMs.
          items:
            type: string
          type: array
        TagValues:
          description: The values of the tags associated with the VMs.
          items:
            type: string
          type: array
        Tags:
          description: 'The key/value combination of the tags associated with the VMs, in the following format: &quot;Filters&quot;:{&quot;Tags&quot;:[&quot;TAGKEY=TAGVALUE&quot;]}.'
          items:
            type: string
          type: array
        Tenancies:
          description: The tenancies of the VMs (`dedicated` \| `default` \| `host`).
          items:
            type: string
          type: array
        VmIds:
          description: One or more IDs of VMs.
          items:
            type: string
          type: array
        VmSecurityGroupIds:
          description: The IDs of the security groups for the VMs.
          items:
            type: string
          type: array
        VmSecurityGroupNames:
          description: The names of the security group for the VMs.
          items:
            type: string
          type: array
        VmStateCodes:
          description: 'The state codes of the VMs: `-1` (quarantine), `0` (pending), `16` (running), `32` (shutting-down), `48` (terminated), `64` (stopping), and `80` (stopped).'
          items:
            type: integer
          type: array
        VmStateNames:
          description: The state names of the VMs (`pending` \| `running` \| `stopping` \| `stopped` \| `shutting-down` \| `terminated` \| `quarantine`).
          items:
            type: string
          type: array
        VmTypes:
          description: The VM types (for example, t2.micro). For more information, see [VM Types](https://docs.outscale.com/en/userguide/VM-Types.html).
          items:
            type: string
          type: array
      type: object
    FiltersVmGroup:
      additionalProperties: false
      description: One or more filters.
      properties:
        Descriptions:
          description: The descriptions of the VM groups.
          items:
            type: string
          type: array
        SecurityGroupIds:
          description: The IDs of the security groups.
          items:
            type: string
          type: array
        SubnetIds:
          description: The IDs of the Subnets.
          items:
            type: string
          type: array
        TagKeys:
          description: The keys of the tags associated with the VM groups.
          items:
            type: string
          type: array
        TagValues:
          description: The values of the tags associated with the VM groups.
          items:
            type: string
          type: array
        Tags:
          description: 'The key/value combination of the tags associated with the VMs, in the following format: &quot;Filters&quot;:{&quot;Tags&quot;:[&quot;TAGKEY=TAGVALUE&quot;]}.'
          items:
            type: string
          type: array
        VmCounts:
          description: The number of VMs in the VM group.
          items:
            type: integer
          type: array
        VmGroupIds:
          description: The IDs of the VM groups.
          items:
            type: string
          type: array
        VmGroupNames:
          description: The names of the VM groups.
          items:
            type: string
          type: array
        VmTemplateIds:
          description: The IDs of the VM templates.
          items:
            type: string
          type: array
      type: object
    FiltersVmTemplate:
      additionalProperties: false
      description: One or more filters.
      properties:
        CpuCores:
          description: The number of vCores.
          items:
            type: integer
          type: array
        CpuGenerations:
          description: The processor generations (for example, `v4`).
          items:
            type: string
          type: array
        CpuPerformances:
          description: The performances of the VMs.
          items:
            type: string
          type: array
        Descriptions:
          description: The descriptions of the VM templates.
          items:
            type: string
          type: array
        ImageIds:
          description: The IDs of the OMIs.
          items:
            type: string
          type: array
        KeypairNames:
          description: The names of the keypairs.
          items:
            type: string
          type: array
        Rams:
          description: The amount of RAM.
          items:
            type: integer
          type: array
        TagKeys:
          description: The keys of the tags associated with the VM templates.
          items:
            type: string
          type: array
        TagValues:
          description: The values of the tags associated with the VM templates.
          items:
            type: string
          type: array
        Tags:
          description: 'The key/value combination of the tags associated with the VM templates, in the following format: &quot;Filters&quot;:{&quot;Tags&quot;:[&quot;TAGKEY=TAGVALUE&quot;]}.'
          items:
            type: string
          type: array
        VmTemplateIds:
          description: The IDs of the VM templates.
          items:
            type: string
          type: array
        VmTemplateNames:
          description: The names of the VM templates.
          items:
            type: string
          type: array
      type: object
    FiltersVmType:
      additionalProperties: false
      description: One or more filters.
      properties:
        BsuOptimized:
          description: This parameter is not available. It is present in our API for the sake of historical compatibility with AWS.
          type: boolean
        EphemeralsTypes:
          description: The types of ephemeral storage disk.
          items:
            type: string
          type: array
        Eths:
          description: The number of Ethernet interfaces available.
          items:
            type: integer
          type: array
        Gpus:
          description: The number of GPUs available.
          items:
            type: integer
          type: array
        MemorySizes:
          description: The amounts of memory, in gibibytes (GiB).
          items:
            format: float
            type: number
          type: array
        VcoreCounts:
          description: The numbers of vCores.
          items:
            type: integer
          type: array
        VmTypeNames:
          description: The names of the VM types. For more information, see [VM Types](https://docs.outscale.com/en/userguide/VM-Types.html).
          items:
            type: string
          type: array
        VolumeCounts:
          description: The maximum number of ephemeral storage disks.
          items:
            type: integer
          type: array
        VolumeSizes:
          description: The size of one ephemeral storage disk, in gibibytes (GiB).
          items:
            type: integer
          type: array
      type: object
    FiltersVmsState:
      additionalProperties: false
      description: One or more filters.
      properties:
        MaintenanceEventCodes:
          description: The code for the scheduled event (`system-reboot` \| `system-maintenance`).
          items:
            type: string
          type: array
        MaintenanceEventDescriptions:
          description: The description of the scheduled event.
          items:
            type: string
          type: array
        MaintenanceEventsNotAfter:
          description: The latest date and time (UTC) the event can end.
          items:
            format: date
            type: string
          type: array
        MaintenanceEventsNotBefore:
          description: The earliest date and time (UTC) the event can start.
          items:
            format: date
            type: string
          type: array
        SubregionNames:
          description: The names of the Subregions of the VMs.
          items:
            type: string
          type: array
        VmIds:
          description: One or more IDs of VMs.
          items:
            type: string
          type: array
        VmStates:
          description: The states of the VMs (`pending` \| `running` \| `stopping` \| `stopped` \| `shutting-down` \| `terminated` \| `quarantine`).
          items:
            type: string
          type: array
      type: object
    FiltersVolume:
      additionalProperties: false
      description: One or more filters.
      properties:
        ClientTokens:
          description: The idempotency tokens provided when creating the volumes.
          items:
            type: string
          type: array
        CreationDates:
          description: The dates and times at which the volumes were created, in ISO 8601 date-time format (for example, `2020-06-30T00:00:00.000Z`).
          items:
            format: date-time
            type: string
          type: array
        LinkVolumeDeleteOnVmDeletion:
          description: Whether the volumes are deleted or not when terminating the VMs.
          type: boolean
        LinkVolumeDeviceNames:
          description: The VM device names.
          items:
            type: string
          type: array
        LinkVolumeLinkDates:
          description: The dates and times at which the volumes were attached, in ISO 8601 date-time format (for example, `2020-06-30T00:00:00.000Z`).
          items:
            format: date-time
            type: string
          type: array
        LinkVolumeLinkStates:
          description: The attachment states of the volumes (`attaching` \| `detaching` \| `attached` \| `detached`).
          items:
            type: string
          type: array
        LinkVolumeVmIds:
          description: One or more IDs of VMs.
          items:
            type: string
          type: array
        SnapshotIds:
          description: The snapshots from which the volumes were created.
          items:
            type: string
          type: array
        SubregionNames:
          description: The names of the Subregions in which the volumes were created.
          items:
            type: string
          type: array
        TagKeys:
          description: The keys of the tags associated with the volumes.
          items:
            type: string
          type: array
        TagValues:
          description: The values of the tags associated with the volumes.
          items:
            type: string
          type: array
        Tags:
          description: 'The key/value combination of the tags associated with the volumes, in the following format: &quot;Filters&quot;:{&quot;Tags&quot;:[&quot;TAGKEY=TAGVALUE&quot;]}.'
          items:
            type: string
          type: array
        VolumeIds:
          description: The IDs of the volumes.
          items:
            type: string
          type: array
        VolumeSizes:
          description: The sizes of the volumes, in gibibytes (GiB).
          items:
            type: integer
          type: array
        VolumeStates:
          description: The states of the volumes (`creating` \| `available` \| `in-use` \| `deleting` \| `error`).
          items:
            type: string
          type: array
        VolumeTypes:
          description: The types of the volumes (`standard` \| `gp2` \| `io1`).
          items:
            type: string
          type: array
      type: object
    FiltersVpnConnection:
      additionalProperties: false
      description: One or more filters.
      properties:
        BgpAsns:
          description: The Border Gateway Protocol (BGP) Autonomous System Numbers (ASNs) of the connections.
          items:
            type: integer
          type: array
        ClientGatewayIds:
          description: The IDs of the client gateways.
          items:
            type: string
          type: array
        ConnectionTypes:
          description: The types of the VPN connections (always `ipsec.1`).
          items:
            type: string
          type: array
        RouteDestinationIpRanges:
          description: The destination IP ranges.
          items:
            type: string
          type: array
        States:
          description: The states of the VPN connections (`pending` \| `available` \| `deleting` \| `deleted`).
          items:
            type: string
          type: array
        StaticRoutesOnly:
          description: If false, the VPN connection uses dynamic routing with Border Gateway Protocol (BGP). If true, routing is controlled using static routes. For more information about how to create and delete static routes, see [CreateVpnConnectionRoute](#createvpnconnectionroute) and [DeleteVpnConnectionRoute](#deletevpnconnectionroute).
          type: boolean
        TagKeys:
          description: The keys of the tags associated with the VPN connections.
          items:
            type: string
          type: array
        TagValues:
          description: The values of the tags associated with the VPN connections.
          items:
            type: string
          type: array
        Tags:
          description: 'The key/value combination of the tags associated with the VPN connections, in the following format: &quot;Filters&quot;:{&quot;Tags&quot;:[&quot;TAGKEY=TAGVALUE&quot;]}.'
          items:
            type: string
          type: array
        VirtualGatewayIds:
          description: The IDs of the virtual gateways.
          items:
            type: string
          type: array
        VpnConnectionIds:
          description: The IDs of the VPN connections.
          items:
            type: string
          type: array
      type: object
    FlexibleGpu:
      additionalProperties: false
      description: Information about the flexible GPU (fGPU).
      properties:
        DeleteOnVmDeletion:
          description: If true, the fGPU is deleted when the VM is terminated.
          type: boolean
        FlexibleGpuId:
          description: The ID of the fGPU.
          type: string
        Generation:
          description: The compatible processor generation.
          type: string
        ModelName:
          description: The model of fGPU. For more information, see [About Flexible GPUs](https://docs.outscale.com/en/userguide/About-Flexible-GPUs.html).
          type: string
        State:
          description: The state of the fGPU (`allocated` \| `attaching` \| `attached` \| `detaching`).
          type: string
        SubregionName:
          description: The Subregion where the fGPU is located.
          type: string
        VmId:
          description: The ID of the VM the fGPU is attached to, if any.
          type: string
      type: object
    FlexibleGpuCatalog:
      additionalProperties: false
      description: Information about the flexible GPU (fGPU) that is available in the public catalog.
      properties:
        Generations:
          description: The processor generations that the fGPUs are compatible with.
          items:
            type: string
          type: array
        MaxCpu:
          description: The maximum number of VM vCores that the fGPU is compatible with.
          type: integer
        MaxRam:
          description: The maximum amount of VM memory that the fGPU is compatible with.
          type: integer
        ModelName:
          description: The model of fGPU.
          type: string
        VRam:
          description: The amount of video RAM (VRAM) of the fGPU.
          type: integer
      type: object
    HealthCheck:
      additionalProperties: false
      description: Information about the health check configuration.
      properties:
        CheckInterval:
          description: The number of seconds between two requests (between `5` and `600` both included).
          type: integer
        HealthyThreshold:
          description: The number of consecutive successful requests before considering the VM as healthy (between `2` and `10` both included).
          type: integer
        Path:
          description: If you use the HTTP or HTTPS protocols, the request URL path. Always starts with a slash (`/`).
          type: string
        Port:
          description: The port number (between `1` and `65535`, both included).
          type: integer
        Protocol:
          description: The protocol for the URL of the VM (`HTTP` \| `HTTPS` \| `TCP` \| `SSL`).
          type: string
        Timeout:
          description: The maximum waiting time for a response before considering the VM as unhealthy, in seconds (between `2` and `60` both included).
          type: integer
        UnhealthyThreshold:
          description: The number of consecutive failed requests before considering the VM as unhealthy (between `2` and `10` both included).
          type: integer
      required:
      - CheckInterval
      - HealthyThreshold
      - Port
      - Protocol
      - Timeout
      - UnhealthyThreshold
      type: object
    Image:
      additionalProperties: false
      description: Information about the OMI.
      properties:
        AccountAlias:
          description: The account alias of the owner of the OMI.
          type: string
        AccountId:
          description: The account ID of the owner of the OMI.
          type: string
        Architecture:
          description: The architecture of the OMI.
          type: string
        BlockDeviceMappings:
          description: One or more block device mappings.
          items:
            $ref: '#/components/schemas/BlockDeviceMappingImage'
          type: array
        BootModes:
          description: The boot modes compatible with the OMI.
          items:
            $ref: '#/components/schemas/BootMode'
          type: array
        CreationDate:
          description: The date and time (UTC) at which the OMI was created.
          format: date-time
          type: string
        Description:
          description: The description of the OMI.
          type: string
        FileLocation:
          description: The location from which the OMI files were created.
          type: string
        ImageId:
          description: The ID of the OMI.
          type: string
        ImageName:
          description: The name of the OMI.
          type: string
        ImageType:
          description: The type of the OMI.
          type: string
        PermissionsToLaunch:
          $ref: '#/components/schemas/PermissionsOnResource'
        ProductCodes:
          description: The product codes associated with the OMI.
          items:
            type: string
          type: array
        RootDeviceName:
          description: The name of the root device.
          type: string
        RootDeviceType:
          description: The type of root device used by the OMI (always `bsu`).
          type: string
        SecureBoot:
          description: Whether secure boot is activated or not.
          type: boolean
        State:
          description: The state of the OMI (`pending` \| `available` \| `failed`).
          type: string
        StateComment:
          $ref: '#/components/schemas/StateComment'
        Tags:
          description: One or more tags associated with the OMI.
          items:
            $ref: '#/components/schemas/ResourceTag'
          type: array
      type: object
    ImageExportTask:
      additionalProperties: false
      description: Information about the OMI export task.
      properties:
        Comment:
          description: If the OMI export task fails, an error message appears.
          type: string
        ImageId:
          description: The ID of the OMI to be exported.
          type: string
        OsuExport:
          $ref: '#/components/schemas/OsuExportImageExportTask'
        Progress:
          description: The progress of the OMI export task, as a percentage.
          type: integer
        State:
          description: The state of the OMI export task (`pending/queued` \| `pending` \| `completed` \| `failed` \| `cancelled`).
          type: string
        Tags:
          description: One or more tags associated with the image export task.
          items:
            $ref: '#/components/schemas/ResourceTag'
          type: array
        TaskId:
          description: The ID of the OMI export task.
          type: string
      type: object
    InlinePolicy:
      additionalProperties: false
      description: Information about an inline policy.
      properties:
        Body:
          description: The policy document, corresponding to a JSON string that contains the policy. For more information, see [EIM Reference Information](https://docs.outscale.com/en/userguide/EIM-Reference-Information.html) and [EIM Policy Generator](https://docs.outscale.com/en/userguide/EIM-Policy-Generator.html).
          type: string
        Name:
          description: The name of the policy.
          type: string
      type: object
    InternetService:
      additionalProperties: false
      description: Information about the internet service.
      properties:
        InternetServiceId:
          description: The ID of the internet service.
          type: string
        NetId:
          description: The ID of the Net attached to the internet service.
          type: string
        State:
          description: The state of the attachment of the internet service to the Net (always `available`).
          type: string
        Tags:
          description: One or more tags associated with the internet service.
          items:
            $ref: '#/components/schemas/ResourceTag'
          type: array
      type: object
    Keypair:
      additionalProperties: false
      description: Information about the keypair.
      properties:
        KeypairFingerprint:
          description: The MD5 public key fingerprint as specified in section 4 of RFC 4716.
          type: string
        KeypairId:
          description: The ID of the keypair.
          type: string
        KeypairName:
          description: The name of the keypair.
          type: string
        KeypairType:
          description: The type of the keypair (`ssh-rsa`, `ssh-ed25519`, `ecdsa-sha2-nistp256`, `ecdsa-sha2-nistp384`, or `ecdsa-sha2-nistp521`).
          type: string
        Tags:
          description: One or more tags associated with the keypair.
          items:
            $ref: '#/components/schemas/ResourceTag'
          type: array
      type: object
    KeypairCreated:
      additionalProperties: false
      description: Information about the created keypair.
      properties:
        KeypairFingerprint:
          description: The MD5 public key fingerprint, as specified in section 4 of RFC 4716.
          type: string
        KeypairId:
          description: The ID of the keypair.
          type: string
        KeypairName:
          description: The name of the keypair.
          type: string
        KeypairType:
          description: The type of the keypair (`ssh-rsa`, `ssh-ed25519`, `ecdsa-sha2-nistp256`, `ecdsa-sha2-nistp384`, or `ecdsa-sha2-nistp521`).
          type: string
        PrivateKey:
          description: The private key, returned only if you are creating a keypair (not if you are importing). When you save this private key in a .rsa file, make sure you replace the `\n` escape sequences with real line breaks.
          type: string
        Tags:
          description: One or more tags associated with the keypair.
          items:
            $ref: '#/components/schemas/ResourceTag'
          type: array
      type: object
    LinkFlexibleGpuRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        FlexibleGpuId:
          description: The ID of the fGPU you want to attach.
          type: string
        VmId:
          description: The ID of the VM you want to attach the fGPU to.
          type: string
      required:
      - FlexibleGpuId
      - VmId
      type: object
    LinkFlexibleGpuResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    LinkInternetServiceRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        InternetServiceId:
          description: The ID of the internet service you want to attach.
          type: string
        NetId:
          description: The ID of the Net to which you want to attach the internet service.
          type: string
      required:
      - InternetServiceId
      - NetId
      type: object
    LinkInternetServiceResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    LinkLoadBalancerBackendMachinesRequest:
      additionalProperties: false
      properties:
        BackendIps:
          description: One or more public IPs of backend VMs.
          items:
            type: string
          type: array
        BackendVmIds:
          description: One or more IDs of backend VMs.
          items:
            type: string
          type: array
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        LoadBalancerName:
          description: The name of the load balancer.
          type: string
      required:
      - LoadBalancerName
      type: object
    LinkLoadBalancerBackendMachinesResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    LinkManagedPolicyToUserGroupRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        PolicyOrn:
          description: The OUTSCALE Resource Name (ORN) of the policy. For more information, see [Resource Identifiers](https://docs.outscale.com/en/userguide/Resource-Identifiers.html).
          type: string
        UserGroupName:
          description: The name of the group you want to link the policy to.
          type: string
      required:
      - PolicyOrn
      - UserGroupName
      type: object
    LinkManagedPolicyToUserGroupResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    LinkNic:
      additionalProperties: false
      description: Information about the NIC attachment.
      properties:
        DeleteOnVmDeletion:
          description: If true, the NIC is deleted when the VM is terminated.
          type: boolean
        DeviceNumber:
          description: The device index for the NIC attachment (between `1` and `7`, both included).
          type: integer
        LinkNicId:
          description: The ID of the NIC to attach.
          type: string
        State:
          description: The state of the attachment (`attaching` \| `attached` \| `detaching` \| `detached`).
          type: string
        VmAccountId:
          description: The account ID of the owner of the VM.
          type: string
        VmId:
          description: The ID of the VM.
          type: string
      type: object
    LinkNicLight:
      additionalProperties: false
      description: Information about the network interface card (NIC).
      properties:
        DeleteOnVmDeletion:
          description: If true, the NIC is deleted when the VM is terminated.
          type: boolean
        DeviceNumber:
          description: The device index for the NIC attachment (between `1` and `7`, both included).
          type: integer
        LinkNicId:
          description: The ID of the NIC to attach.
          type: string
        State:
          description: The state of the attachment (`attaching` \| `attached` \| `detaching` \| `detached`).
          type: string
      type: object
    LinkNicRequest:
      additionalProperties: false
      properties:
        DeviceNumber:
          description: The index of the VM device for the NIC attachment (between `1` and `7`, both included).
          type: integer
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        NicId:
          description: The ID of the NIC you want to attach.
          type: string
        VmId:
          description: The ID of the VM to which you want to attach the NIC.
          type: string
      required:
      - DeviceNumber
      - VmId
      - NicId
      type: object
    LinkNicResponse:
      additionalProperties: false
      properties:
        LinkNicId:
          description: The ID of the NIC attachment.
          type: string
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    LinkNicToUpdate:
      additionalProperties: false
      description: Information about the NIC attachment. If you are modifying the `DeleteOnVmDeletion` attribute, you must specify the ID of the NIC attachment.
      properties:
        DeleteOnVmDeletion:
          description: If true, the NIC is deleted when the VM is terminated. If false, the NIC is detached from the VM.
          type: boolean
        LinkNicId:
          description: The ID of the NIC attachment.
          type: string
      type: object
    LinkPolicyRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        PolicyOrn:
          description: The OUTSCALE Resource Name (ORN) of the policy. For more information, see [Resource Identifiers](https://docs.outscale.com/en/userguide/Resource-Identifiers.html).
          pattern: ^orn:ows:(iam|idauth):\S*:\d{12}:policy/\S+$
          type: string
        UserName:
          description: The name of the user you want to link the policy to (between 1 and 64 characters).
          type: string
      required:
      - PolicyOrn
      - UserName
      type: object
    LinkPolicyResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    LinkPrivateIpsRequest:
      additionalProperties: false
      properties:
        AllowRelink:
          description: If true, allows an IP that is already assigned to another NIC in the same Subnet to be assigned to the NIC you specified.
          type: boolean
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        NicId:
          description: The ID of the NIC.
          type: string
        PrivateIps:
          description: The secondary private IP or IPs you want to assign to the NIC within the IP range of the Subnet.
          items:
            type: string
          type: array
        SecondaryPrivateIpCount:
          description: The number of secondary private IPs to assign to the NIC.
          type: integer
      required:
      - NicId
      type: object
    LinkPrivateIpsResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    LinkPublicIp:
      additionalProperties: false
      description: Information about the public IP association.
      properties:
        LinkPublicIpId:
          description: (Required in a Net) The ID representing the association of the public IP with the VM or the NIC.
          type: string
        PublicDnsName:
          description: The name of the public DNS.
          type: string
        PublicIp:
          description: The public IP associated with the NIC.
          type: string
        PublicIpAccountId:
          description: The account ID of the owner of the public IP.
          type: string
        PublicIpId:
          description: The allocation ID of the public IP.
          type: string
      type: object
    LinkPublicIpLightForVm:
      additionalProperties: false
      description: Information about the public IP associated with the NIC.
      properties:
        PublicDnsName:
          description: The name of the public DNS.
          type: string
        PublicIp:
          description: The public IP associated with the NIC.
          type: string
        PublicIpAccountId:
          description: The account ID of the owner of the public IP.
          type: string
      type: object
    LinkPublicIpRequest:
      additionalProperties: false
      properties:
        AllowRelink:
          description: If true, allows the public IP to be associated with the VM or NIC that you specify even if it is already associated with another VM or NIC. If false, prevents the public IP from being associated with the VM or NIC that you specify if it is already associated with another VM or NIC. (By default, true in the public Cloud, false in a Net.)
          type: boolean
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        NicId:
          description: (Net only) The ID of the NIC. This parameter is required if the VM has more than one NIC attached. Otherwise, you need to specify the `VmId` parameter instead. You cannot specify both parameters at the same time.
          type: string
        PrivateIp:
          description: (Net only) The primary or secondary private IP of the specified NIC. By default, the primary private IP.
          type: string
        PublicIp:
          description: The public IP. This parameter is required unless you use the `PublicIpId` parameter.
          type: string
        PublicIpId:
          description: The allocation ID of the public IP. This parameter is required unless you use the `PublicIp` parameter.
          type: string
        VmId:
          description: |-
            The ID of the VM.<br />
            - In the public Cloud, this parameter is required.<br />
            - In a Net, this parameter is required if the VM has only one NIC. Otherwise, you need to specify the `NicId` parameter instead. You cannot specify both parameters at the same time.
          type: string
      type: object
    LinkPublicIpResponse:
      additionalProperties: false
      properties:
        LinkPublicIpId:
          description: (Net only) The ID representing the association of the public IP with the VM or the NIC.
          type: string
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    LinkRouteTable:
      additionalProperties: false
      description: One or more associations between the route table and the Subnets.
      properties:
        LinkRouteTableId:
          description: The ID of the association between the route table and the Net or Subnet.
          type: string
        Main:
          description: If true, the route table is the main one.
          type: boolean
        NetId:
          description: The ID of the Net, if the route table is not explicitly linked to a Subnet.
          type: string
        RouteTableId:
          description: The ID of the route table.
          type: string
        SubnetId:
          description: The ID of the Subnet, if the route table is explicitly linked to a Subnet.
          type: string
      type: object
    LinkRouteTableRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        RouteTableId:
          description: The ID of the route table.
          type: string
        SubnetId:
          description: The ID of the Subnet.
          type: string
      required:
      - RouteTableId
      - SubnetId
      type: object
    LinkRouteTableResponse:
      additionalProperties: false
      properties:
        LinkRouteTableId:
          description: The ID of the association between the route table and the Subnet.
          type: string
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    LinkVirtualGatewayRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        NetId:
          description: The ID of the Net to which you want to attach the virtual gateway.
          type: string
        VirtualGatewayId:
          description: The ID of the virtual gateway.
          type: string
      required:
      - NetId
      - VirtualGatewayId
      type: object
    LinkVirtualGatewayResponse:
      additionalProperties: false
      properties:
        NetToVirtualGatewayLink:
          $ref: '#/components/schemas/NetToVirtualGatewayLink'
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    LinkVolumeRequest:
      additionalProperties: false
      properties:
        DeviceName:
          description: The name of the device. For a root device, you must use `/dev/sda1`. For other volumes, you must use `/dev/sdX`, `/dev/sdXX`, `/dev/xvdX`, or `/dev/xvdXX` (where the first `X` is a letter between `b` and `z`, and the second `X` is a letter between `a` and `z`).
          type: string
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        VmId:
          description: The ID of the VM you want to attach the volume to.
          type: string
        VolumeId:
          description: The ID of the volume you want to attach.
          type: string
      required:
      - DeviceName
      - VmId
      - VolumeId
      type: object
    LinkVolumeResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    LinkedPolicy:
      additionalProperties: false
      description: Information about the linked policy.
      properties:
        CreationDate:
          description: The date and time (UTC) at which the linked policy was created.
          format: date-time
          type: string
        LastModificationDate:
          description: The date and time (UTC) at which the linked policy was last modified.
          format: date-time
          type: string
        Orn:
          description: The OUTSCALE Resource Name (ORN) of the policy. For more information, see [Resource Identifiers](https://docs.outscale.com/en/userguide/Resource-Identifiers.html).
          type: string
        PolicyId:
          description: The ID of the policy.
          type: string
        PolicyName:
          description: The name of the policy.
          type: string
      type: object
    LinkedVolume:
      additionalProperties: false
      description: Information about volume attachment.
      properties:
        DeleteOnVmDeletion:
          description: If true, the volume is deleted when terminating the VM. If false, the volume is not deleted when terminating the VM.
          type: boolean
        DeviceName:
          description: The name of the device.
          type: string
        State:
          description: The state of the attachment of the volume (`attaching` \| `detaching` \| `attached` \| `detached`).
          type: string
        VmId:
          description: The ID of the VM.
          type: string
        VolumeId:
          description: The ID of the volume.
          type: string
      type: object
    Listener:
      additionalProperties: false
      description: Information about the listener.
      properties:
        BackendPort:
          description: The port on which the backend VM is listening (between `1` and `65535`, both included).
          type: integer
        BackendProtocol:
          description: The protocol for routing traffic to backend VMs (`HTTP` \| `HTTPS` \| `TCP` \| `SSL`).
          type: string
        LoadBalancerPort:
          description: The port on which the load balancer is listening (between `1` and `65535`, both included).
          type: integer
        LoadBalancerProtocol:
          description: The routing protocol (`HTTP` \| `HTTPS` \| `TCP` \| `SSL`).
          type: string
        PolicyNames:
          description: The names of the policies. If there are no policies enabled, the list is empty.
          items:
            type: string
          type: array
        ServerCertificateId:
          description: The OUTSCALE Resource Name (ORN) of the server certificate. For more information, see [Resource Identifiers > OUTSCALE Resource Names (ORNs)](https://docs.outscale.com/en/userguide/Resource-Identifiers.html#_outscale_resource_names_orns).
          type: string
      type: object
    ListenerForCreation:
      additionalProperties: false
      description: Information about the listener to create.
      properties:
        BackendPort:
          description: The port on which the backend VM is listening (between `1` and `65535`, both included).
          type: integer
        BackendProtocol:
          description: The protocol for routing traffic to backend VMs (`HTTP` \| `HTTPS` \| `TCP` \| `SSL`).
          type: string
        LoadBalancerPort:
          description: The port on which the load balancer is listening (between `1` and `65535`, both included).
          type: integer
        LoadBalancerProtocol:
          description: The routing protocol (`HTTP` \| `HTTPS` \| `TCP` \| `SSL`).
          type: string
        ServerCertificateId:
          description: |-
            The OUTSCALE Resource Name (ORN) of the server certificate. For more information, see [Resource Identifiers > OUTSCALE Resource Names (ORNs)](https://docs.outscale.com/en/userguide/Resource-Identifiers.html#_outscale_resource_names_orns).<br/>
            This parameter is required for `HTTPS` and `SSL` protocols.
          type: string
      required:
      - BackendPort
      - LoadBalancerPort
      - LoadBalancerProtocol
      type: object
    ListenerRule:
      additionalProperties: false
      description: Information about the listener rule.
      properties:
        Action:
          description: The type of action for the rule (always `forward`).
          type: string
        HostNamePattern:
          description: A host-name pattern for the rule, with a maximum length of 128 characters. This host-name pattern supports maximum three wildcards, and must not contain any special characters except `-.?`.
          type: string
        ListenerId:
          description: The ID of the listener.
          type: integer
        ListenerRuleId:
          description: The ID of the listener rule.
          type: integer
        ListenerRuleName:
          description: A human-readable name for the listener rule.
          type: string
        PathPattern:
          description: A path pattern for the rule, with a maximum length of 128 characters. This path pattern supports maximum three wildcards, and must not contain any special characters except `_-.$/~&quot;'@:+?`.
          type: string
        Priority:
          description: The priority level of the listener rule, between `1` and `19999` both included. Each rule must have a unique priority level. Otherwise, an error is returned.
          type: integer
        VmIds:
          description: The IDs of the backend VMs.
          items:
            type: string
          type: array
      type: object
    ListenerRuleForCreation:
      additionalProperties: false
      description: Information about the listener rule.
      properties:
        Action:
          description: The type of action for the rule (always `forward`).
          type: string
        HostNamePattern:
          description: A host-name pattern for the rule, with a maximum length of 128 characters. This host-name pattern supports maximum three wildcards, and must not contain any special characters except `-.?`.
          type: string
        ListenerRuleName:
          description: A human-readable name for the listener rule.
          type: string
        PathPattern:
          description: A path pattern for the rule, with a maximum length of 128 characters. This path pattern supports maximum three wildcards, and must not contain any special characters except `_-.$/~&quot;'@:+?`.
          type: string
        Priority:
          description: The priority level of the listener rule, between `1` and `19999` both included. Each rule must have a unique priority level. Otherwise, an error is returned.
          type: integer
      required:
      - ListenerRuleName
      - Priority
      type: object
    LoadBalancer:
      additionalProperties: false
      description: Information about the load balancer.
      properties:
        AccessLog:
          $ref: '#/components/schemas/AccessLog'
        ApplicationStickyCookiePolicies:
          description: The stickiness policies defined for the load balancer.
          items:
            $ref: '#/components/schemas/ApplicationStickyCookiePolicy'
          type: array
        BackendIps:
          description: One or more public IPs of backend VMs.
          items:
            type: string
          type: array
        BackendVmIds:
          description: One or more IDs of backend VMs for the load balancer.
          items:
            type: string
          type: array
        DnsName:
          description: The DNS name of the load balancer.
          type: string
        HealthCheck:
          $ref: '#/components/schemas/HealthCheck'
        Listeners:
          description: The listeners for the load balancer.
          items:
            $ref: '#/components/schemas/Listener'
          type: array
        LoadBalancerName:
          description: The name of the load balancer.
          type: string
        LoadBalancerStickyCookiePolicies:
          description: The policies defined for the load balancer.
          items:
            $ref: '#/components/schemas/LoadBalancerStickyCookiePolicy'
          type: array
        LoadBalancerType:
          description: |-
            The type of load balancer. Valid only for load balancers in a Net.<br />
            If `LoadBalancerType` is `internet-facing`, the load balancer has a public DNS name that resolves to a public IP.<br />
            If `LoadBalancerType` is `internal`, the load balancer has a public DNS name that resolves to a private IP.
          type: string
        NetId:
          description: The ID of the Net for the load balancer.
          type: string
        PublicIp:
          description: (internet-facing only) The public IP associated with the load balancer.
          type: string
        SecuredCookies:
          description: Whether secure cookies are enabled for the load balancer.
          type: boolean
        SecurityGroups:
          description: One or more IDs of security groups for the load balancers. Valid only for load balancers in a Net.
          items:
            type: string
          type: array
        SourceSecurityGroup:
          $ref: '#/components/schemas/SourceSecurityGroup'
        Subnets:
          description: The ID of the Subnet in which the load balancer was created.
          items:
            type: string
          type: array
        SubregionNames:
          description: The ID of the Subregion in which the load balancer was created.
          items:
            type: string
          type: array
        Tags:
          description: One or more tags associated with the load balancer.
          items:
            $ref: '#/components/schemas/ResourceTag'
          type: array
      type: object
    LoadBalancerLight:
      additionalProperties: false
      description: Information about the load balancer.
      properties:
        LoadBalancerName:
          description: The name of the load balancer to which the listener is attached.
          type: string
        LoadBalancerPort:
          description: The port of load balancer on which the load balancer is listening (between `1` and `65535` both included).
          type: integer
      required:
      - LoadBalancerName
      - LoadBalancerPort
      type: object
    LoadBalancerStickyCookiePolicy:
      additionalProperties: false
      description: Information about the stickiness policy.
      properties:
        CookieExpirationPeriod:
          description: |-
            The time period, in seconds, after which the cookie should be considered stale.<br />
            If `1`, the stickiness session lasts for the duration of the browser session.
          type: integer
        PolicyName:
          description: The name of the stickiness policy.
          type: string
      type: object
    LoadBalancerTag:
      additionalProperties: false
      description: Information about the load balancer tag.
      properties:
        Key:
          description: The key of the tag.
          type: string
        LoadBalancerName:
          description: The name of the load balancer.
          type: string
        Value:
          description: The value of the tag.
          type: string
      type: object
    Location:
      additionalProperties: false
      description: Information about the DirectLink location.
      properties:
        Code:
          description: The location code, to be set as the `Location` parameter of the *CreateDirectLink* method when creating a DirectLink.
          type: string
        Name:
          description: The name and description of the location, corresponding to a datacenter.
          type: string
      type: object
    Log:
      additionalProperties: false
      description: Information about the log.
      properties:
        AccountId:
          description: The account ID of the logged call.
          type: string
        CallDuration:
          description: The duration of the logged call, in microseconds.
          type: integer
        QueryAccessKey:
          description: The access key used for the logged call.
          type: string
        QueryApiName:
          description: The name of the API used by the logged call (always `oapi` for the OUTSCALE API).
          type: string
        QueryApiVersion:
          description: The version of the API used by the logged call.
          type: string
        QueryCallName:
          description: The name of the logged call.
          type: string
        QueryDate:
          description: The date and time (UTC) of the logged call.
          format: date-time
          type: string
        QueryHeaderRaw:
          description: The raw header of the HTTP request of the logged call.
          type: string
        QueryHeaderSize:
          description: The size of the raw header of the HTTP request of the logged call, in bytes.
          type: integer
        QueryIpAddress:
          description: The IP used for the logged call.
          type: string
        QueryPayloadRaw:
          description: The raw payload of the HTTP request of the logged call.
          type: string
        QueryPayloadSize:
          description: The size of the raw payload of the HTTP request of the logged call, in bytes.
          type: integer
        QueryUserAgent:
          description: The user agent of the HTTP request of the logged call.
          type: string
        RequestId:
          description: The request ID provided in the response of the logged call.
          type: string
        ResponseSize:
          description: The size of the response of the logged call, in bytes.
          type: integer
        ResponseStatusCode:
          description: The HTTP status code of the response of the logged call.
          type: integer
      type: object
    MaintenanceEvent:
      additionalProperties: false
      description: Information about the maintenance event.
      properties:
        Code:
          description: The code of the event (`system-reboot` \| `system-maintenance`).
          type: string
        Description:
          description: The description of the event.
          type: string
        NotAfter:
          description: The latest scheduled end date and time (UTC) for the event.
          format: date
          type: string
        NotBefore:
          description: The earliest scheduled start date and time (UTC) for the event.
          format: date
          type: string
      type: object
    MinimalPolicy:
      additionalProperties: false
      description: Information about the entity.
      properties:
        Id:
          description: The ID of the entity.
          type: string
        Name:
          description: The name of the entity.
          type: string
        Orn:
          description: The OUTSCALE Resource Name (ORN) of the entity. For more information, see [Resource Identifiers](https://docs.outscale.com/en/userguide/Resource-Identifiers.html).
          type: string
      type: object
    NatService:
      additionalProperties: false
      description: Information about the NAT service.
      properties:
        ClientToken:
          description: The idempotency token provided when creating the NAT service.
          type: string
        NatServiceId:
          description: The ID of the NAT service.
          type: string
        NetId:
          description: The ID of the Net in which the NAT service is.
          type: string
        PublicIps:
          description: Information about the public IP or IPs associated with the NAT service.
          items:
            $ref: '#/components/schemas/PublicIpLight'
          type: array
        State:
          description: The state of the NAT service (`pending` \| `available` \| `deleting` \| `deleted`).
          type: string
        SubnetId:
          description: The ID of the Subnet in which the NAT service is.
          type: string
        Tags:
          description: One or more tags associated with the NAT service.
          items:
            $ref: '#/components/schemas/ResourceTag'
          type: array
      type: object
    Net:
      additionalProperties: false
      description: Information about the Net.
      properties:
        DhcpOptionsSetId:
          description: The ID of the DHCP options set (or `default` if you want to associate the default one).
          type: string
        IpRange:
          description: The IP range for the Net, in CIDR notation (for example, `10.0.0.0/16`).
          type: string
        NetId:
          description: The ID of the Net.
          type: string
        State:
          description: The state of the Net (`pending` \| `available` \| `deleting`).
          type: string
        Tags:
          description: One or more tags associated with the Net.
          items:
            $ref: '#/components/schemas/ResourceTag'
          type: array
        Tenancy:
          description: The VM tenancy in a Net.
          type: string
      type: object
    NetAccessPoint:
      additionalProperties: false
      description: Information about the Net access point.
      properties:
        NetAccessPointId:
          description: The ID of the Net access point.
          type: string
        NetId:
          description: The ID of the Net with which the Net access point is associated.
          type: string
        RouteTableIds:
          description: The ID of the route tables associated with the Net access point.
          items:
            type: string
          type: array
        ServiceName:
          description: The name of the service with which the Net access point is associated.
          type: string
        State:
          description: The state of the Net access point (`pending` \| `available` \| `deleting` \| `deleted`).
          type: string
        Tags:
          description: One or more tags associated with the Net access point.
          items:
            $ref: '#/components/schemas/ResourceTag'
          type: array
      type: object
    NetPeering:
      additionalProperties: false
      description: Information about the Net peering.
      properties:
        AccepterNet:
          $ref: '#/components/schemas/AccepterNet'
        ExpirationDate:
          description: The date and time (UTC) at which the Net peerings expire.
          format: date-time
          nullable: true
          type: string
        NetPeeringId:
          description: The ID of the Net peering.
          type: string
        SourceNet:
          $ref: '#/components/schemas/SourceNet'
        State:
          $ref: '#/components/schemas/NetPeeringState'
        Tags:
          description: One or more tags associated with the Net peering.
          items:
            $ref: '#/components/schemas/ResourceTag'
          type: array
      type: object
    NetPeeringState:
      additionalProperties: false
      description: Information about the state of the Net peering.
      properties:
        Message:
          description: Additional information about the state of the Net peering.
          type: string
        Name:
          description: The state of the Net peering (`pending-acceptance` \| `active` \| `rejected` \| `failed` \| `expired` \| `deleted`).
          type: string
      type: object
    NetToVirtualGatewayLink:
      additionalProperties: false
      description: Information about the attachment.
      properties:
        NetId:
          description: The ID of the Net to which the virtual gateway is attached.
          type: string
        State:
          description: The state of the attachment (`attaching` \| `attached` \| `detaching` \| `detached`).
          type: string
      type: object
    Nic:
      additionalProperties: false
      description: Information about the NIC.
      properties:
        AccountId:
          description: The account ID of the owner of the NIC.
          type: string
        Description:
          description: The description of the NIC.
          type: string
        IsSourceDestChecked:
          description: (Net only) If true, the source/destination check is enabled. If false, it is disabled.
          type: boolean
        LinkNic:
          $ref: '#/components/schemas/LinkNic'
        LinkPublicIp:
          $ref: '#/components/schemas/LinkPublicIp'
        MacAddress:
          description: The Media Access Control (MAC) address of the NIC.
          type: string
        NetId:
          description: The ID of the Net for the NIC.
          type: string
        NicId:
          description: The ID of the NIC.
          type: string
        PrivateDnsName:
          description: The name of the private DNS.
          type: string
        PrivateIps:
          description: The private IPs of the NIC.
          items:
            $ref: '#/components/schemas/PrivateIp'
          type: array
        SecurityGroups:
          description: One or more IDs of security groups for the NIC.
          items:
            $ref: '#/components/schemas/SecurityGroupLight'
          type: array
        State:
          description: The state of the NIC (`available` \| `attaching` \| `in-use` \| `detaching`).
          type: string
        SubnetId:
          description: The ID of the Subnet.
          type: string
        SubregionName:
          description: The Subregion in which the NIC is located.
          type: string
        Tags:
          description: One or more tags associated with the NIC.
          items:
            $ref: '#/components/schemas/ResourceTag'
          type: array
      type: object
    NicForVmCreation:
      additionalProperties: false
      description: Information about the network interface card (NIC) when creating a virtual machine (VM).
      properties:
        DeleteOnVmDeletion:
          description: If true, the NIC is deleted when the VM is terminated. You can specify this parameter only for a new NIC. To modify this value for an existing NIC, see [UpdateNic](#updatenic).
          type: boolean
        Description:
          description: The description of the NIC, if you are creating a NIC when creating the VM.
          type: string
        DeviceNumber:
          description: The index of the VM device for the NIC attachment (between `0` and `7`, both included). This parameter is required if you create a NIC when creating the VM.
          type: integer
        NicId:
          description: The ID of the NIC, if you are attaching an existing NIC when creating a VM.
          type: string
        PrivateIps:
          description: One or more private IPs to assign to the NIC, if you create a NIC when creating a VM. Only one private IP can be the primary private IP.
          items:
            $ref: '#/components/schemas/PrivateIpLight'
          type: array
        SecondaryPrivateIpCount:
          description: The number of secondary private IPs, if you create a NIC when creating a VM. This parameter cannot be specified if you specified more than one private IP in the `PrivateIps` parameter.
          type: integer
        SecurityGroupIds:
          description: One or more IDs of security groups for the NIC, if you create a NIC when creating a VM.
          items:
            type: string
          type: array
        SubnetId:
          description: The ID of the Subnet for the NIC, if you create a NIC when creating a VM. This parameter is required if you create a NIC when creating the VM.
          type: string
      type: object
    NicLight:
      additionalProperties: false
      description: Information about the network interface card (NIC).
      properties:
        AccountId:
          description: The account ID of the owner of the NIC.
          type: string
        Description:
          description: The description of the NIC.
          type: string
        IsSourceDestChecked:
          description: (Net only) If true, the source/destination check is enabled. If false, it is disabled.
          type: boolean
        LinkNic:
          $ref: '#/components/schemas/LinkNicLight'
        LinkPublicIp:
          $ref: '#/components/schemas/LinkPublicIpLightForVm'
        MacAddress:
          description: The Media Access Control (MAC) address of the NIC.
          type: string
        NetId:
          description: The ID of the Net for the NIC.
          type: string
        NicId:
          description: The ID of the NIC.
          type: string
        PrivateDnsName:
          description: The name of the private DNS.
          type: string
        PrivateIps:
          description: The private IP or IPs of the NIC.
          items:
            $ref: '#/components/schemas/PrivateIpLightForVm'
          type: array
        SecurityGroups:
          description: One or more IDs of security groups for the NIC.
          items:
            $ref: '#/components/schemas/SecurityGroupLight'
          type: array
        State:
          description: The state of the NIC (`available` \| `attaching` \| `in-use` \| `detaching`).
          type: string
        SubnetId:
          description: The ID of the Subnet for the NIC.
          type: string
      type: object
    OsuApiKey:
      additionalProperties: false
      description: Information about the OOS API key.
      properties:
        ApiKeyId:
          description: The API key of the OOS account that enables you to access the bucket.
          type: string
        SecretKey:
          description: The secret key of the OOS account that enables you to access the bucket.
          type: string
      type: object
    OsuExportImageExportTask:
      additionalProperties: false
      description: Information about the OMI export task.
      properties:
        DiskImageFormat:
          description: The format of the export disk (`qcow2` \| `raw`).
          type: string
        OsuBucket:
          description: The name of the OOS bucket the OMI is exported to.
          type: string
        OsuManifestUrl:
          description: The URL of the manifest file.
          type: string
        OsuPrefix:
          description: The prefix for the key of the OOS object corresponding to the image.
          type: string
      required:
      - DiskImageFormat
      - OsuBucket
      type: object
    OsuExportSnapshotExportTask:
      additionalProperties: false
      description: Information about the snapshot export task.
      properties:
        DiskImageFormat:
          description: The format of the export disk (`qcow2` \| `raw`).
          type: string
        OsuBucket:
          description: The name of the OOS bucket the snapshot is exported to.
          type: string
        OsuPrefix:
          description: The prefix for the key of the OOS object corresponding to the snapshot.
          type: string
      required:
      - DiskImageFormat
      - OsuBucket
      type: object
    OsuExportToCreate:
      additionalProperties: false
      description: Information about the OOS export task to create.
      properties:
        DiskImageFormat:
          description: The format of the export disk (`qcow2` \| `raw`).
          type: string
        OsuApiKey:
          $ref: '#/components/schemas/OsuApiKey'
        OsuBucket:
          description: The name of the OOS bucket where you want to export the object.
          type: string
        OsuManifestUrl:
          description: The URL of the manifest file.
          type: string
        OsuPrefix:
          description: The prefix for the key of the OOS object.
          type: string
      required:
      - DiskImageFormat
      - OsuBucket
      type: object
    PermissionsOnResource:
      additionalProperties: false
      description: Permissions for the resource.
      properties:
        AccountIds:
          description: One or more account IDs that the permission is associated with.
          items:
            type: string
          type: array
        GlobalPermission:
          description: |-
            A global permission for all accounts.<br />
            (Request) Set this parameter to true to make the resource public (if the parent parameter is `Additions`) or to make the resource private (if the parent parameter is `Removals`).<br />
            (Response) If true, the resource is public. If false, the resource is private.
          type: boolean
      type: object
    PermissionsOnResourceCreation:
      additionalProperties: false
      description: |-
        Information about the permissions for the resource.<br />
        Specify either the `Additions` or the `Removals` parameter.
      properties:
        Additions:
          $ref: '#/components/schemas/PermissionsOnResource'
        Removals:
          $ref: '#/components/schemas/PermissionsOnResource'
      type: object
    Phase1Options:
      additionalProperties: false
      description: Information about Phase 1 of the Internet Key Exchange (IKE) negotiation. When Phase 1 finishes successfully, peers proceed to Phase 2 negotiations.
      properties:
        DpdTimeoutAction:
          description: The action to carry out after a Dead Peer Detection (DPD) timeout occurs.
          type: string
        DpdTimeoutSeconds:
          description: The maximum waiting time for a Dead Peer Detection (DPD) response before considering the peer as dead, in seconds.
          type: integer
        IkeVersions:
          description: The Internet Key Exchange (IKE) versions allowed for the VPN tunnel.
          items:
            type: string
          type: array
        Phase1DhGroupNumbers:
          description: The Diffie-Hellman (DH) group numbers allowed for the VPN tunnel for phase 1.
          items:
            type: integer
          type: array
        Phase1EncryptionAlgorithms:
          description: The encryption algorithms allowed for the VPN tunnel for phase 1.
          items:
            type: string
          type: array
        Phase1IntegrityAlgorithms:
          description: The integrity algorithms allowed for the VPN tunnel for phase 1.
          items:
            type: string
          type: array
        Phase1LifetimeSeconds:
          description: The lifetime for phase 1 of the IKE negotiation process, in seconds.
          type: integer
        ReplayWindowSize:
          description: The number of packets in an IKE replay window.
          type: integer
        StartupAction:
          description: The action to carry out when establishing tunnels for a VPN connection.
          type: string
      type: object
    Phase2Options:
      additionalProperties: false
      description: Information about Phase 2 of the Internet Key Exchange (IKE) negotiation.
      properties:
        Phase2DhGroupNumbers:
          description: The Diffie-Hellman (DH) group numbers allowed for the VPN tunnel for phase 2.
          items:
            type: integer
          type: array
        Phase2EncryptionAlgorithms:
          description: The encryption algorithms allowed for the VPN tunnel for phase 2.
          items:
            type: string
          type: array
        Phase2IntegrityAlgorithms:
          description: The integrity algorithms allowed for the VPN tunnel for phase 2.
          items:
            type: string
          type: array
        Phase2LifetimeSeconds:
          description: The lifetime for phase 2 of the Internet Key Exchange (IKE) negotiation process, in seconds.
          type: integer
        PreSharedKey:
          description: The pre-shared key to establish the initial authentication between the client gateway and the virtual gateway. This key can contain any character except line breaks and double quotes (&quot;).
          type: string
      type: object
    Placement:
      additionalProperties: false
      description: Information about the placement of the VM.
      properties:
        SubregionName:
          description: The name of the Subregion. If you specify this parameter, you must not specify the `Nics` parameter.
          type: string
        Tenancy:
          description: The tenancy of the VM (`default`, `dedicated`, or a dedicated group ID).
          type: string
      type: object
    Policy:
      additionalProperties: false
      description: Information about the policy.
      properties:
        CreationDate:
          description: The date and time (UTC) at which the policy was created.
          format: date-time
          type: string
        Description:
          description: A friendly name for the policy (between 0 and 1000 characters).
          type: string
        IsLinkable:
          description: Indicates whether the policy can be linked to a group or an EIM user.
          type: boolean
        LastModificationDate:
          description: The date and time (UTC) at which the policy was last modified.
          format: date-time
          type: string
        Orn:
          description: The OUTSCALE Resource Name (ORN) of the policy. For more information, see [Resource Identifiers](https://docs.outscale.com/en/userguide/Resource-Identifiers.html).
          type: string
        Path:
          description: The path to the policy.
          type: string
        PolicyDefaultVersionId:
          description: The ID of the policy default version.
          type: string
        PolicyId:
          description: The ID of the policy.
          type: string
        PolicyName:
          description: The name of the policy.
          type: string
        ResourcesCount:
          description: The number of resources attached to the policy.
          type: integer
      type: object
    PolicyEntities:
      additionalProperties: false
      description: Information about the policy entities.
      properties:
        Accounts:
          description: The accounts linked to the specified policy.
          items:
            $ref: '#/components/schemas/MinimalPolicy'
          type: array
        Groups:
          description: The groups linked to the specified policy.
          items:
            $ref: '#/components/schemas/MinimalPolicy'
          type: array
        HasMoreItems:
          description: If true, there are more items to return using the `FirstItem` parameter in a new request.
          type: boolean
        ItemsCount:
          description: The number of entities the specified policy is linked to.
          type: integer
        MaxResultsLimit:
          description: Indicates maximum results defined for the operation.
          type: integer
        MaxResultsTruncated:
          description: If true, indicates whether requested page size is more than allowed.
          type: boolean
        Users:
          description: The users linked to the specified policy.
          items:
            $ref: '#/components/schemas/MinimalPolicy'
          type: array
      type: object
    PolicyVersion:
      additionalProperties: false
      description: Information about the policy version.
      properties:
        Body:
          description: The policy document, corresponding to a JSON string that contains the policy. For more information, see [EIM Reference Information](https://docs.outscale.com/en/userguide/EIM-Reference-Information.html) and [EIM Policy Generator](https://docs.outscale.com/en/userguide/EIM-Policy-Generator.html).
          type: string
        CreationDate:
          description: The date and time (UTC) at which the version was created.
          format: date-time
          type: string
        DefaultVersion:
          description: If true, the version is the default one.
          type: boolean
        VersionId:
          description: The ID of the version.
          type: string
      type: object
    PrivateIp:
      additionalProperties: false
      description: Information about the private IP.
      properties:
        IsPrimary:
          description: If true, the IP is the primary private IP of the NIC.
          type: boolean
        LinkPublicIp:
          $ref: '#/components/schemas/LinkPublicIp'
        PrivateDnsName:
          description: The name of the private DNS.
          type: string
        PrivateIp:
          description: The private IP of the NIC.
          type: string
      type: object
    PrivateIpLight:
      additionalProperties: false
      description: Information about the private IP.
      properties:
        IsPrimary:
          description: If true, the IP is the primary private IP of the NIC.
          type: boolean
        PrivateIp:
          description: The private IP of the NIC.
          type: string
      type: object
    PrivateIpLightForVm:
      additionalProperties: false
      description: Information about the private IP of the NIC.
      properties:
        IsPrimary:
          description: If true, the IP is the primary private IP of the NIC.
          type: boolean
        LinkPublicIp:
          $ref: '#/components/schemas/LinkPublicIpLightForVm'
        PrivateDnsName:
          description: The name of the private DNS.
          type: string
        PrivateIp:
          description: The private IP.
          type: string
      type: object
    ProductType:
      additionalProperties: false
      description: Information about the product type.
      properties:
        Description:
          description: The description of the product type.
          type: string
        ProductTypeId:
          description: The ID of the product type.
          type: string
        Vendor:
          description: The vendor of the product type.
          type: string
      type: object
    PublicIp:
      additionalProperties: false
      description: Information about the public IP.
      properties:
        LinkPublicIpId:
          description: (Required in a Net) The ID representing the association of the public IP with the VM or the NIC.
          type: string
        NicAccountId:
          description: The account ID of the owner of the NIC.
          type: string
        NicId:
          description: The ID of the NIC the public IP is associated with (if any).
          type: string
        PrivateIp:
          description: The private IP associated with the public IP.
          type: string
        PublicIp:
          description: The public IP.
          type: string
        PublicIpId:
          description: The allocation ID of the public IP.
          type: string
        Tags:
          description: One or more tags associated with the public IP.
          items:
            $ref: '#/components/schemas/ResourceTag'
          type: array
        VmId:
          description: The ID of the VM the public IP is associated with (if any).
          type: string
      type: object
    PublicIpLight:
      additionalProperties: false
      description: Information about the public IP.
      properties:
        PublicIp:
          description: The public IP associated with the NAT service.
          type: string
        PublicIpId:
          description: The allocation ID of the public IP associated with the NAT service.
          type: string
      type: object
    PutUserGroupPolicyRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        PolicyDocument:
          description: The policy document, corresponding to a JSON string that contains the policy. For more information, see [EIM Reference Information](https://docs.outscale.com/en/userguide/EIM-Reference-Information.html) and [EIM Policy Generator](https://docs.outscale.com/en/userguide/EIM-Policy-Generator.html).
          type: string
        PolicyName:
          description: The name of the policy.
          type: string
        UserGroupName:
          description: The name of the group.
          type: string
        UserGroupPath:
          description: The path to the group. If not specified, it is set to a slash (`/`).
          type: string
      required:
      - PolicyName
      - PolicyDocument
      - UserGroupName
      type: object
    PutUserGroupPolicyResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    PutUserPolicyRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        PolicyDocument:
          description: The policy document, corresponding to a JSON string that contains the policy. For more information, see [EIM Reference Information](https://docs.outscale.com/en/userguide/EIM-Reference-Information.html) and [EIM Policy Generator](https://docs.outscale.com/en/userguide/EIM-Policy-Generator.html).
          type: string
        PolicyName:
          description: The name of the policy (between 1 and 128 characters).
          type: string
        UserName:
          description: The name of the user.
          type: string
      required:
      - PolicyName
      - PolicyDocument
      - UserName
      type: object
    PutUserPolicyResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    Quota:
      additionalProperties: false
      description: Information about the quota.
      properties:
        AccountId:
          description: The account ID of the owner of the quotas.
          type: string
        Description:
          description: The description of the quota.
          type: string
        MaxValue:
          description: The maximum value of the quota for the account (if there is no limit, `0`).
          type: integer
        Name:
          description: The unique name of the quota.
          type: string
        QuotaCollection:
          description: The group name of the quota.
          type: string
        ShortDescription:
          description: The description of the quota.
          type: string
        UsedValue:
          description: The limit value currently used by the account.
          type: integer
      type: object
    QuotaTypes:
      additionalProperties: false
      description: One or more quotas.
      properties:
        QuotaType:
          description: The resource ID if it is a resource-specific quota, `global` if it is not.
          type: string
        Quotas:
          description: One or more quotas associated with the account.
          items:
            $ref: '#/components/schemas/Quota'
          type: array
      type: object
    ReadAccessKeysRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        Filters:
          $ref: '#/components/schemas/FiltersAccessKeys'
        Tag:
          description: The tag added to the access key.
          type: string
        UserName:
          description: The name of the EIM user. By default, the user who sends the request (which can be the root account).
          type: string
      type: object
    ReadAccessKeysResponse:
      additionalProperties: false
      properties:
        AccessKeys:
          description: A list of access keys.
          items:
            $ref: '#/components/schemas/AccessKey'
          type: array
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    ReadAccountsRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
      type: object
    ReadAccountsResponse:
      additionalProperties: false
      properties:
        Accounts:
          description: The list of the accounts.
          items:
            $ref: '#/components/schemas/Account'
          type: array
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    ReadAdminPasswordRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        VmId:
          description: The ID of the VM.
          type: string
      required:
      - VmId
      type: object
    ReadAdminPasswordResponse:
      additionalProperties: false
      properties:
        AdminPassword:
          description: The password of the VM. After the first boot, returns an empty string.
          type: string
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        VmId:
          description: The ID of the VM.
          type: string
      type: object
    ReadApiAccessPolicyRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
      type: object
    ReadApiAccessPolicyResponse:
      additionalProperties: false
      properties:
        ApiAccessPolicy:
          $ref: '#/components/schemas/ApiAccessPolicy'
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    ReadApiAccessRulesRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        Filters:
          $ref: '#/components/schemas/FiltersApiAccessRule'
      type: object
    ReadApiAccessRulesResponse:
      additionalProperties: false
      properties:
        ApiAccessRules:
          description: A list of API access rules.
          items:
            $ref: '#/components/schemas/ApiAccessRule'
          type: array
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    ReadApiLogsRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        Filters:
          $ref: '#/components/schemas/FiltersApiLog'
        NextPageToken:
          description: The token to request the next page of results. Each token refers to a specific page.
          type: string
        ResultsPerPage:
          default: 100
          description: The maximum number of logs returned in a single response (between `1` and `1000`, both included).
          type: integer
        With:
          $ref: '#/components/schemas/With'
      type: object
    ReadApiLogsResponse:
      additionalProperties: false
      properties:
        Logs:
          description: Information about one or more logs.
          items:
            $ref: '#/components/schemas/Log'
          type: array
        NextPageToken:
          description: The token to request the next page of results. Each token refers to a specific page.
          type: string
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    ReadCasRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        Filters:
          $ref: '#/components/schemas/FiltersCa'
      type: object
    ReadCasResponse:
      additionalProperties: false
      properties:
        Cas:
          description: Information about one or more CAs.
          items:
            $ref: '#/components/schemas/Ca'
          type: array
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    ReadCatalogRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
      type: object
    ReadCatalogResponse:
      additionalProperties: false
      properties:
        Catalog:
          $ref: '#/components/schemas/Catalog'
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    ReadCatalogsRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        Filters:
          $ref: '#/components/schemas/FiltersCatalogs'
      type: object
    ReadCatalogsResponse:
      additionalProperties: false
      properties:
        Catalogs:
          description: Information about one or more catalogs.
          items:
            $ref: '#/components/schemas/Catalogs'
          type: array
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    ReadClientGatewaysRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        Filters:
          $ref: '#/components/schemas/FiltersClientGateway'
        NextPageToken:
          description: The token to request the next page of results. Each token refers to a specific page.
          format: byte
          type: string
        ResultsPerPage:
          description: The maximum number of logs returned in a single response (between `1` and `1000`, both included).
          type: integer
      type: object
    ReadClientGatewaysResponse:
      additionalProperties: false
      properties:
        ClientGateways:
          description: Information about one or more client gateways.
          items:
            $ref: '#/components/schemas/ClientGateway'
          type: array
        NextPageToken:
          description: The token to request the next page of results. Each token refers to a specific page.
          format: byte
          type: string
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    ReadConsoleOutputRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        VmId:
          description: The ID of the VM.
          type: string
      required:
      - VmId
      type: object
    ReadConsoleOutputResponse:
      additionalProperties: false
      properties:
        ConsoleOutput:
          description: The Base64-encoded output of the console. If a command line tool is used, the output is decoded by the tool.
          type: string
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        VmId:
          description: The ID of the VM.
          type: string
      type: object
    ReadConsumptionAccountRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        FromDate:
          description: The beginning of the time period, in ISO 8601 date format (for example, `2020-06-14`). The date-time format is also accepted, but only with a time set to midnight (for example, `2020-06-14T00:00:00.000Z`). This value is included in the time period.
          oneOf:
          - format: date
            type: string
          - format: date-time
            type: string
        Overall:
          default: false
          description: If false, returns only the consumption of the specific account that sends this request. If true, returns either the overall consumption of your paying account and all linked accounts (if the account that sends this request is a paying account) or returns nothing (if the account that sends this request is a linked account).
          type: boolean
        ShowPrice:
          description: If true, the response also includes the unit price of the consumed resource (`UnitPrice`) and the total price of the consumed resource during the specified time period (`Price`), in the currency of your account.
          type: boolean
        ToDate:
          description: The end of the time period, in ISO 8601 date format (for example, `2020-06-30`). The date-time format is also accepted, but only with a time set to midnight (for example, `2020-06-30T00:00:00.000Z`). This value is excluded from the time period, and must be set to a later date than `FromDate`.
          oneOf:
          - format: date
            type: string
          - format: date-time
            type: string
      required:
      - FromDate
      - ToDate
      type: object
    ReadConsumptionAccountResponse:
      additionalProperties: false
      properties:
        ConsumptionEntries:
          description: Information about the resources consumed during the specified time period.
          items:
            $ref: '#/components/schemas/ConsumptionEntry'
          type: array
        Currency:
          description: The currency of your account for the `UnitPrice` and `Price` parameters, in the ISO-4217 format (for example, `EUR`).
          nullable: true
          type: string
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    ReadDedicatedGroupsRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        Filters:
          $ref: '#/components/schemas/FiltersDedicatedGroup'
        NextPageToken:
          description: The token to request the next page of results. Each token refers to a specific page.
          format: byte
          type: string
        ResultsPerPage:
          description: The maximum number of logs returned in a single response (between `1` and `1000`, both included).
          type: integer
      type: object
    ReadDedicatedGroupsResponse:
      additionalProperties: false
      properties:
        DedicatedGroups:
          description: Information about one or more dedicated groups.
          items:
            $ref: '#/components/schemas/DedicatedGroup'
          type: array
        NextPageToken:
          description: The token to request the next page of results. Each token refers to a specific page.
          format: byte
          type: string
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    ReadDhcpOptionsRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        Filters:
          $ref: '#/components/schemas/FiltersDhcpOptions'
        NextPageToken:
          description: The token to request the next page of results. Each token refers to a specific page.
          format: byte
          type: string
        ResultsPerPage:
          description: The maximum number of logs returned in a single response (between `1` and `1000`, both included).
          type: integer
      type: object
    ReadDhcpOptionsResponse:
      additionalProperties: false
      properties:
        DhcpOptionsSets:
          description: Information about one or more DHCP options sets.
          items:
            $ref: '#/components/schemas/DhcpOptionsSet'
          type: array
        NextPageToken:
          description: The token to request the next page of results. Each token refers to a specific page.
          format: byte
          type: string
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    ReadDirectLinkInterfacesRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        Filters:
          $ref: '#/components/schemas/FiltersDirectLinkInterface'
        NextPageToken:
          description: The token to request the next page of results. Each token refers to a specific page.
          format: byte
          type: string
        ResultsPerPage:
          description: The maximum number of logs returned in a single response (between `1` and `1000`, both included).
          type: integer
      type: object
    ReadDirectLinkInterfacesResponse:
      additionalProperties: false
      properties:
        DirectLinkInterfaces:
          description: Information about one or more DirectLink interfaces.
          items:
            $ref: '#/components/schemas/DirectLinkInterfaces'
          type: array
        NextPageToken:
          description: The token to request the next page of results. Each token refers to a specific page.
          format: byte
          type: string
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    ReadDirectLinksRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        Filters:
          $ref: '#/components/schemas/FiltersDirectLink'
        NextPageToken:
          description: The token to request the next page of results. Each token refers to a specific page.
          format: byte
          type: string
        ResultsPerPage:
          description: The maximum number of logs returned in a single response (between `1` and `1000`, both included).
          type: integer
      type: object
    ReadDirectLinksResponse:
      additionalProperties: false
      properties:
        DirectLinks:
          description: Information about one or more DirectLinks.
          items:
            $ref: '#/components/schemas/DirectLink'
          type: array
        NextPageToken:
          description: The token to request the next page of results. Each token refers to a specific page.
          format: byte
          type: string
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    ReadEntitiesLinkedToPolicyRequest:
      additionalProperties: false
      properties:
        EntitiesType:
          description: The type of entity linked to the policy you want to get information about.
          items:
            enum:
            - ACCOUNT
            - USER
            - GROUP
            type: string
          type: array
        FirstItem:
          description: The item starting the list of entities requested.
          type: integer
        PolicyOrn:
          description: The OUTSCALE Resource Name (ORN) of the policy. For more information, see [Resource Identifiers](https://docs.outscale.com/en/userguide/Resource-Identifiers.html).
          pattern: ^orn:ows:(iam|idauth):\S*:\d{12}:policy/\S+$
          type: string
        ResultsPerPage:
          description: The maximum number of items that can be returned in a single response (by default, 100).
          type: integer
      type: object
    ReadEntitiesLinkedToPolicyResponse:
      additionalProperties: false
      properties:
        PolicyEntities:
          $ref: '#/components/schemas/PolicyEntities'
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    ReadFlexibleGpuCatalogRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
      type: object
    ReadFlexibleGpuCatalogResponse:
      additionalProperties: false
      properties:
        FlexibleGpuCatalog:
          description: Information about one or more fGPUs available in the public catalog.
          items:
            $ref: '#/components/schemas/FlexibleGpuCatalog'
          type: array
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    ReadFlexibleGpusRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        Filters:
          $ref: '#/components/schemas/FiltersFlexibleGpu'
      type: object
    ReadFlexibleGpusResponse:
      additionalProperties: false
      properties:
        FlexibleGpus:
          description: Information about one or more fGPUs.
          items:
            $ref: '#/components/schemas/FlexibleGpu'
          type: array
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    ReadImageExportTasksRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        Filters:
          $ref: '#/components/schemas/FiltersExportTask'
        NextPageToken:
          description: The token to request the next page of results. Each token refers to a specific page.
          format: byte
          type: string
        ResultsPerPage:
          description: The maximum number of logs returned in a single response (between `1` and `1000`, both included).
          type: integer
      type: object
    ReadImageExportTasksResponse:
      additionalProperties: false
      properties:
        ImageExportTasks:
          description: Information about one or more image export tasks.
          items:
            $ref: '#/components/schemas/ImageExportTask'
          type: array
        NextPageToken:
          description: The token to request the next page of results. Each token refers to a specific page.
          format: byte
          type: string
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    ReadImagesRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        Filters:
          $ref: '#/components/schemas/FiltersImage'
        NextPageToken:
          description: The token to request the next page of results. Each token refers to a specific page.
          format: byte
          type: string
        ResultsPerPage:
          description: The maximum number of logs returned in a single response (between `1` and `1000`, both included).
          type: integer
      type: object
    ReadImagesResponse:
      additionalProperties: false
      properties:
        Images:
          description: Information about one or more OMIs.
          items:
            $ref: '#/components/schemas/Image'
          type: array
        NextPageToken:
          description: The token to request the next page of results. Each token refers to a specific page.
          format: byte
          type: string
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    ReadInternetServicesRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        Filters:
          $ref: '#/components/schemas/FiltersInternetService'
        NextPageToken:
          description: The token to request the next page of results. Each token refers to a specific page.
          format: byte
          type: string
        ResultsPerPage:
          description: The maximum number of logs returned in a single response (between `1` and `1000`, both included).
          type: integer
      type: object
    ReadInternetServicesResponse:
      additionalProperties: false
      properties:
        InternetServices:
          description: Information about one or more internet services.
          items:
            $ref: '#/components/schemas/InternetService'
          type: array
        NextPageToken:
          description: The token to request the next page of results. Each token refers to a specific page.
          format: byte
          type: string
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    ReadKeypairsRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        Filters:
          $ref: '#/components/schemas/FiltersKeypair'
        NextPageToken:
          description: The token to request the next page of results. Each token refers to a specific page.
          format: byte
          type: string
        ResultsPerPage:
          description: The maximum number of logs returned in a single response (between `1` and `1000`, both included). By default, `100`.
          type: integer
      type: object
    ReadKeypairsResponse:
      additionalProperties: false
      properties:
        Keypairs:
          description: Information about one or more keypairs.
          items:
            $ref: '#/components/schemas/Keypair'
          type: array
        NextPageToken:
          description: The token to request the next page of results. Each token refers to a specific page.
          format: byte
          type: string
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    ReadLinkedPoliciesFilters:
      additionalProperties: false
      description: One or more filters.
      properties:
        PathPrefix:
          description: The path prefix of the policies. If not specified, it is set to a slash (`/`).
          type: string
      type: object
    ReadLinkedPoliciesRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        Filters:
          $ref: '#/components/schemas/ReadLinkedPoliciesFilters'
        FirstItem:
          description: The item starting the list of policies requested.
          type: integer
        ResultsPerPage:
          description: The maximum number of items that can be returned in a single response (by default, `100`).
          type: integer
        UserName:
          description: The name of the user the policies are linked to.
          type: string
      required:
      - UserName
      type: object
    ReadLinkedPoliciesResponse:
      additionalProperties: false
      properties:
        HasMoreItems:
          description: If true, there are more items to return using the `FirstItem` parameter in a new request.
          type: boolean
        MaxResultsLimit:
          description: Indicates maximum results defined for the operation.
          type: integer
        MaxResultsTruncated:
          description: If true, indicates whether requested page size is more than allowed.
          type: boolean
        Policies:
          description: One or more policies linked to the specified user.
          items:
            $ref: '#/components/schemas/LinkedPolicy'
          type: array
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    ReadListenerRulesRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        Filters:
          $ref: '#/components/schemas/FiltersListenerRule'
      type: object
    ReadListenerRulesResponse:
      additionalProperties: false
      properties:
        ListenerRules:
          description: The list of the rules to describe.
          items:
            $ref: '#/components/schemas/ListenerRule'
          type: array
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    ReadLoadBalancerTagsRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        LoadBalancerNames:
          description: One or more load balancer names.
          items:
            type: string
          type: array
      required:
      - LoadBalancerNames
      type: object
    ReadLoadBalancerTagsResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        Tags:
          description: Information about one or more load balancer tags.
          items:
            $ref: '#/components/schemas/LoadBalancerTag'
          type: array
      type: object
    ReadLoadBalancersRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        Filters:
          $ref: '#/components/schemas/FiltersLoadBalancer'
      type: object
    ReadLoadBalancersResponse:
      additionalProperties: false
      properties:
        LoadBalancers:
          description: Information about one or more load balancers.
          items:
            $ref: '#/components/schemas/LoadBalancer'
          type: array
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    ReadLocationsRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        NextPageToken:
          description: The token to request the next page of results. Each token refers to a specific page.
          format: byte
          type: string
        ResultsPerPage:
          description: The maximum number of logs returned in a single response (between `1` and `1000`, both included).
          type: integer
      type: object
    ReadLocationsResponse:
      additionalProperties: false
      properties:
        Locations:
          description: Information about one or more locations.
          items:
            $ref: '#/components/schemas/Location'
          type: array
        NextPageToken:
          description: The token to request the next page of results. Each token refers to a specific page.
          format: byte
          type: string
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    ReadManagedPoliciesLinkedToUserGroupRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        Filters:
          $ref: '#/components/schemas/FiltersUserGroup'
        FirstItem:
          description: The item starting the list of policies requested.
          type: integer
        ResultsPerPage:
          description: The maximum number of items that can be returned in a single response (by default, `100`).
          type: integer
        UserGroupName:
          description: The name of the group.
          type: string
      required:
      - UserGroupName
      type: object
    ReadManagedPoliciesLinkedToUserGroupResponse:
      additionalProperties: false
      properties:
        HasMoreItems:
          description: If true, there are more items to return using the `FirstItem` parameter in a new request.
          type: boolean
        MaxResultsLimit:
          description: Indicates maximum results defined for the operation.
          type: integer
        MaxResultsTruncated:
          description: If true, indicates whether requested page size is more than allowed.
          type: boolean
        Policies:
          description: A list of policies.
          items:
            $ref: '#/components/schemas/LinkedPolicy'
          type: array
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    ReadNatServicesRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        Filters:
          $ref: '#/components/schemas/FiltersNatService'
        NextPageToken:
          description: The token to request the next page of results. Each token refers to a specific page.
          format: byte
          type: string
        ResultsPerPage:
          description: The maximum number of logs returned in a single response (between `1` and `1000`, both included).
          type: integer
      type: object
    ReadNatServicesResponse:
      additionalProperties: false
      properties:
        NatServices:
          description: Information about one or more NAT services.
          items:
            $ref: '#/components/schemas/NatService'
          type: array
        NextPageToken:
          description: The token to request the next page of results. Each token refers to a specific page.
          format: byte
          type: string
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    ReadNetAccessPointServicesRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        Filters:
          $ref: '#/components/schemas/FiltersService'
        NextPageToken:
          description: The token to request the next page of results. Each token refers to a specific page.
          format: byte
          type: string
        ResultsPerPage:
          description: The maximum number of logs returned in a single response (between `1` and `1000`, both included).
          type: integer
      type: object
    ReadNetAccessPointServicesResponse:
      additionalProperties: false
      properties:
        NextPageToken:
          description: The token to request the next page of results. Each token refers to a specific page.
          format: byte
          type: string
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        Services:
          description: The names of the services you can use for Net access points.
          items:
            $ref: '#/components/schemas/Service'
          type: array
      type: object
    ReadNetAccessPointsRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        Filters:
          $ref: '#/components/schemas/FiltersNetAccessPoint'
        NextPageToken:
          description: The token to request the next page of results. Each token refers to a specific page.
          format: byte
          type: string
        ResultsPerPage:
          description: The maximum number of logs returned in a single response (between `1` and `1000`, both included).
          type: integer
      type: object
    ReadNetAccessPointsResponse:
      additionalProperties: false
      properties:
        NetAccessPoints:
          description: One or more Net access points.
          items:
            $ref: '#/components/schemas/NetAccessPoint'
          type: array
        NextPageToken:
          description: The token to request the next page of results. Each token refers to a specific page.
          format: byte
          type: string
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    ReadNetPeeringsRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        Filters:
          $ref: '#/components/schemas/FiltersNetPeering'
        NextPageToken:
          description: The token to request the next page of results. Each token refers to a specific page.
          format: byte
          type: string
        ResultsPerPage:
          description: The maximum number of logs returned in a single response (between `1` and `1000`, both included).
          type: integer
      type: object
    ReadNetPeeringsResponse:
      additionalProperties: false
      properties:
        NetPeerings:
          description: Information about one or more Net peerings.
          items:
            $ref: '#/components/schemas/NetPeering'
          type: array
        NextPageToken:
          description: The token to request the next page of results. Each token refers to a specific page.
          format: byte
          type: string
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    ReadNetsRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        Filters:
          $ref: '#/components/schemas/FiltersNet'
        NextPageToken:
          description: The token to request the next page of results. Each token refers to a specific page.
          format: byte
          type: string
        ResultsPerPage:
          description: The maximum number of logs returned in a single response (between `1` and `1000`, both included).
          type: integer
      type: object
    ReadNetsResponse:
      additionalProperties: false
      properties:
        Nets:
          description: Information about the described Nets.
          items:
            $ref: '#/components/schemas/Net'
          type: array
        NextPageToken:
          description: The token to request the next page of results. Each token refers to a specific page.
          format: byte
          type: string
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    ReadNicsRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        Filters:
          $ref: '#/components/schemas/FiltersNic'
        NextPageToken:
          description: The token to request the next page of results. Each token refers to a specific page.
          format: byte
          type: string
        ResultsPerPage:
          description: The maximum number of logs returned in a single response (between `1` and `1000`, both included).
          type: integer
      type: object
    ReadNicsResponse:
      additionalProperties: false
      properties:
        NextPageToken:
          description: The token to request the next page of results. Each token refers to a specific page.
          format: byte
          type: string
        Nics:
          description: Information about one or more NICs.
          items:
            $ref: '#/components/schemas/Nic'
          type: array
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    ReadPoliciesFilters:
      additionalProperties: false
      description: One or more filters.
      properties:
        OnlyLinked:
          description: If set to true, lists only the policies attached to a user.
          type: boolean
        PathPrefix:
          description: The path prefix you can use to filter the results. If not specified, it is set to a slash (`/`).
          type: string
        Scope:
          description: The scope of the policies. A policy can either be created by Outscale (`OWS`), and therefore applies to all accounts, or be created by its users (`LOCAL`).
          enum:
          - LOCAL
          - OWS
          type: string
      type: object
    ReadPoliciesRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        Filters:
          $ref: '#/components/schemas/ReadPoliciesFilters'
        FirstItem:
          description: The item starting the list of policies requested.
          type: integer
        ResultsPerPage:
          description: The maximum number of items that can be returned in a single response (by default, `100`).
          type: integer
      type: object
    ReadPoliciesResponse:
      additionalProperties: false
      properties:
        HasMoreItems:
          description: If true, there are more items to return using the `FirstItem` parameter in a new request.
          type: boolean
        MaxResultsLimit:
          description: Indicates maximum results defined for the operation.
          type: integer
        MaxResultsTruncated:
          description: If true, indicates whether requested page size is more than allowed.
          type: boolean
        Policies:
          description: Information about one or more policies.
          items:
            $ref: '#/components/schemas/Policy'
          type: array
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    ReadPolicyRequest:
      additionalProperties: false
      properties:
        PolicyOrn:
          description: The OUTSCALE Resource Name (ORN) of the policy. For more information, see [Resource Identifiers](https://docs.outscale.com/en/userguide/Resource-Identifiers.html).
          pattern: ^orn:ows:(iam|idauth):\S*:\d{12}:policy/\S+$
          type: string
      required:
      - PolicyOrn
      type: object
    ReadPolicyResponse:
      additionalProperties: false
      properties:
        Policy:
          $ref: '#/components/schemas/Policy'
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    ReadPolicyVersionRequest:
      additionalProperties: false
      properties:
        PolicyOrn:
          description: The OUTSCALE Resource Name (ORN) of the policy. For more information, see [Resource Identifiers](https://docs.outscale.com/en/userguide/Resource-Identifiers.html).
          pattern: ^orn:ows:(iam|idauth):\S*:\d{12}:policy/\S+$
          type: string
        VersionId:
          description: The ID of the policy version.
          type: string
      required:
      - PolicyOrn
      - VersionId
      type: object
    ReadPolicyVersionResponse:
      additionalProperties: false
      properties:
        PolicyVersion:
          $ref: '#/components/schemas/PolicyVersion'
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    ReadPolicyVersionsRequest:
      additionalProperties: false
      properties:
        FirstItem:
          description: The item starting the list of policies requested.
          type: integer
        PolicyOrn:
          description: The OUTSCALE Resource Name (ORN) of the policy. For more information, see [Resource Identifiers](https://docs.outscale.com/en/userguide/Resource-Identifiers.html).
          pattern: ^orn:ows:(iam|idauth):\S*:\d{12}:policy/\S+$
          type: string
        ResultsPerPage:
          description: The maximum number of items that can be returned in a single response (by default, `100`).
          type: integer
      required:
      - PolicyOrn
      type: object
    ReadPolicyVersionsResponse:
      additionalProperties: false
      properties:
        HasMoreItems:
          description: If true, there are more items to return using the `FirstItem` parameter in a new request.
          type: boolean
        MaxResultsLimit:
          description: Indicates maximum results defined for the operation.
          type: integer
        PolicyVersions:
          description: A list of all the versions of the policy.
          items:
            $ref: '#/components/schemas/PolicyVersion'
          type: array
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    ReadProductTypesRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        Filters:
          $ref: '#/components/schemas/FiltersProductType'
        NextPageToken:
          description: The token to request the next page of results. Each token refers to a specific page.
          format: byte
          type: string
        ResultsPerPage:
          description: The maximum number of logs returned in a single response (between `1` and `1000`, both included).
          type: integer
      type: object
    ReadProductTypesResponse:
      additionalProperties: false
      properties:
        NextPageToken:
          description: The token to request the next page of results. Each token refers to a specific page.
          format: byte
          type: string
        ProductTypes:
          description: Information about one or more product types.
          items:
            $ref: '#/components/schemas/ProductType'
          type: array
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    ReadPublicCatalogRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
      type: object
    ReadPublicCatalogResponse:
      additionalProperties: false
      properties:
        Catalog:
          $ref: '#/components/schemas/Catalog'
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    ReadPublicIpRangesRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        NextPageToken:
          description: The token to request the next page of results. Each token refers to a specific page.
          format: byte
          type: string
        ResultsPerPage:
          description: The maximum number of logs returned in a single response (between `1` and `1000`, both included).
          type: integer
      type: object
    ReadPublicIpRangesResponse:
      additionalProperties: false
      properties:
        NextPageToken:
          description: The token to request the next page of results. Each token refers to a specific page.
          format: byte
          type: string
        PublicIps:
          description: The list of public IPv4 addresses used in the Region, in CIDR notation.
          items:
            type: string
          type: array
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    ReadPublicIpsRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        Filters:
          $ref: '#/components/schemas/FiltersPublicIp'
        NextPageToken:
          description: The token to request the next page of results. Each token refers to a specific page.
          format: byte
          type: string
        ResultsPerPage:
          description: The maximum number of logs returned in a single response (between `1` and `1000`, both included).
          type: integer
      type: object
    ReadPublicIpsResponse:
      additionalProperties: false
      properties:
        NextPageToken:
          description: The token to request the next page of results. Each token refers to a specific page.
          format: byte
          type: string
        PublicIps:
          description: Information about one or more public IPs.
          items:
            $ref: '#/components/schemas/PublicIp'
          type: array
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    ReadQuotasRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        Filters:
          $ref: '#/components/schemas/FiltersQuota'
        NextPageToken:
          description: The token to request the next page of results. Each token refers to a specific page.
          format: byte
          type: string
        ResultsPerPage:
          description: The maximum number of logs returned in a single response (between `1` and `1000`, both included).
          type: integer
      type: object
    ReadQuotasResponse:
      additionalProperties: false
      properties:
        NextPageToken:
          description: The token to request the next page of results. Each token refers to a specific page.
          format: byte
          type: string
        QuotaTypes:
          description: Information about one or more quotas.
          items:
            $ref: '#/components/schemas/QuotaTypes'
          type: array
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    ReadRegionsRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
      type: object
    ReadRegionsResponse:
      additionalProperties: false
      properties:
        Regions:
          description: Information about one or more Regions.
          items:
            $ref: '#/components/schemas/Region'
          type: array
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    ReadRouteTablesRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        Filters:
          $ref: '#/components/schemas/FiltersRouteTable'
        NextPageToken:
          description: The token to request the next page of results. Each token refers to a specific page.
          format: byte
          type: string
        ResultsPerPage:
          description: The maximum number of logs returned in a single response (between `1` and `1000`, both included).
          type: integer
      type: object
    ReadRouteTablesResponse:
      additionalProperties: false
      properties:
        NextPageToken:
          description: The token to request the next page of results. Each token refers to a specific page.
          format: byte
          type: string
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        RouteTables:
          description: Information about one or more route tables.
          items:
            $ref: '#/components/schemas/RouteTable'
          type: array
      type: object
    ReadSecurityGroupsRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        Filters:
          $ref: '#/components/schemas/FiltersSecurityGroup'
        NextPageToken:
          description: The token to request the next page of results. Each token refers to a specific page.
          format: byte
          type: string
        ResultsPerPage:
          description: The maximum number of logs returned in a single response (between `1` and `1000`, both included).
          type: integer
      type: object
    ReadSecurityGroupsResponse:
      additionalProperties: false
      properties:
        NextPageToken:
          description: The token to request the next page of results. Each token refers to a specific page.
          format: byte
          type: string
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        SecurityGroups:
          description: Information about one or more security groups.
          items:
            $ref: '#/components/schemas/SecurityGroup'
          type: array
      type: object
    ReadServerCertificatesRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        Filters:
          $ref: '#/components/schemas/FiltersServerCertificate'
      type: object
    ReadServerCertificatesResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        ServerCertificates:
          description: Information about one or more server certificates.
          items:
            $ref: '#/components/schemas/ServerCertificate'
          type: array
      type: object
    ReadSnapshotExportTasksRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        Filters:
          $ref: '#/components/schemas/FiltersExportTask'
        NextPageToken:
          description: The token to request the next page of results. Each token refers to a specific page.
          format: byte
          type: string
        ResultsPerPage:
          description: The maximum number of logs returned in a single response (between `1` and `1000`, both included).
          type: integer
      type: object
    ReadSnapshotExportTasksResponse:
      additionalProperties: false
      properties:
        NextPageToken:
          description: The token to request the next page of results. Each token refers to a specific page.
          format: byte
          type: string
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        SnapshotExportTasks:
          description: Information about one or more snapshot export tasks.
          items:
            $ref: '#/components/schemas/SnapshotExportTask'
          type: array
      type: object
    ReadSnapshotsRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        Filters:
          $ref: '#/components/schemas/FiltersSnapshot'
        NextPageToken:
          description: The token to request the next page of results. Each token refers to a specific page.
          format: byte
          type: string
        ResultsPerPage:
          description: The maximum number of logs returned in a single response (between `1` and `1000`, both included).
          type: integer
      type: object
    ReadSnapshotsResponse:
      additionalProperties: false
      properties:
        NextPageToken:
          description: The token to request the next page of results. Each token refers to a specific page.
          format: byte
          type: string
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        Snapshots:
          description: Information about one or more snapshots and their permissions.
          items:
            $ref: '#/components/schemas/Snapshot'
          type: array
      type: object
    ReadSubnetsRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        Filters:
          $ref: '#/components/schemas/FiltersSubnet'
        NextPageToken:
          description: The token to request the next page of results. Each token refers to a specific page.
          format: byte
          type: string
        ResultsPerPage:
          description: The maximum number of logs returned in a single response (between `1` and `1000`, both included).
          type: integer
      type: object
    ReadSubnetsResponse:
      additionalProperties: false
      properties:
        NextPageToken:
          description: The token to request the next page of results. Each token refers to a specific page.
          format: byte
          type: string
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        Subnets:
          description: Information about one or more Subnets.
          items:
            $ref: '#/components/schemas/Subnet'
          type: array
      type: object
    ReadSubregionsRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        Filters:
          $ref: '#/components/schemas/FiltersSubregion'
        NextPageToken:
          description: The token to request the next page of results. Each token refers to a specific page.
          format: byte
          type: string
        ResultsPerPage:
          description: The maximum number of logs returned in a single response (between `1` and `1000`, both included).
          type: integer
      type: object
    ReadSubregionsResponse:
      additionalProperties: false
      properties:
        NextPageToken:
          description: The token to request the next page of results. Each token refers to a specific page.
          format: byte
          type: string
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        Subregions:
          description: Information about one or more Subregions.
          items:
            $ref: '#/components/schemas/Subregion'
          type: array
      type: object
    ReadTagsRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        Filters:
          $ref: '#/components/schemas/FiltersTag'
        NextPageToken:
          description: The token to request the next page of results. Each token refers to a specific page.
          format: byte
          type: string
        ResultsPerPage:
          description: The maximum number of logs returned in a single response (between `1` and `1000`, both included).
          type: integer
      type: object
    ReadTagsResponse:
      additionalProperties: false
      properties:
        NextPageToken:
          description: The token to request the next page of results. Each token refers to a specific page.
          format: byte
          type: string
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        Tags:
          description: Information about one or more tags.
          items:
            $ref: '#/components/schemas/Tag'
          type: array
      type: object
    ReadUnitPriceRequest:
      additionalProperties: false
      properties:
        Operation:
          description: The operation associated with the catalog entry (for example, `RunInstances-OD` or `CreateVolume`).
          type: string
        Service:
          description: The service associated with the catalog entry (for example, `TinaOS-FCU` or `TinaOS-OOS`).
          type: string
        Type:
          description: The type associated with the catalog entry (for example, `BSU:VolumeIOPS:io1` or `BoxUsage:tinav6.c6r16p3`).
          type: string
      required:
      - Operation
      - Service
      - Type
      type: object
    ReadUnitPriceResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        UnitPriceEntry:
          $ref: '#/components/schemas/UnitPriceEntry'
      type: object
    ReadUserGroupPoliciesRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        FirstItem:
          description: The item starting the list of policies requested.
          type: integer
        ResultsPerPage:
          description: The maximum number of items that can be returned in a single response (by default, `100`).
          type: integer
        UserGroupName:
          description: The name of the group.
          type: string
        UserGroupPath:
          description: The path to the group. If not specified, it is set to a slash (`/`).
          type: string
      required:
      - UserGroupName
      type: object
    ReadUserGroupPoliciesResponse:
      additionalProperties: false
      properties:
        HasMoreItems:
          description: If true, there are more items to return using the `FirstItem` parameter in a new request.
          type: boolean
        MaxResultsLimit:
          description: Indicates maximum results defined for the operation.
          type: integer
        MaxResultsTruncated:
          description: If true, indicates whether requested page size is more than allowed.
          type: boolean
        Policies:
          description: A list of policies.
          items:
            $ref: '#/components/schemas/InlinePolicy'
          type: array
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    ReadUserGroupPolicyRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        PolicyName:
          description: The name of the policy.
          type: string
        UserGroupName:
          description: The name of the group.
          type: string
        UserGroupPath:
          description: The path to the group. If not specified, it is set to a slash (`/`).
          type: string
      required:
      - PolicyName
      - UserGroupName
      type: object
    ReadUserGroupPolicyResponse:
      additionalProperties: false
      properties:
        Policy:
          $ref: '#/components/schemas/InlinePolicy'
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    ReadUserGroupRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        Path:
          description: The path to the group. If not specified, it is set to a slash (`/`).
          type: string
        UserGroupName:
          description: The name of the group.
          type: string
      required:
      - UserGroupName
      type: object
    ReadUserGroupResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        UserGroup:
          $ref: '#/components/schemas/UserGroup'
        Users:
          description: A list of EIM users.
          items:
            $ref: '#/components/schemas/User'
          type: array
      type: object
    ReadUserGroupsPerUserRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        UserName:
          description: The name of the user.
          type: string
        UserPath:
          description: The path to the user (by default, `/`).
          type: string
      required:
      - UserName
      type: object
    ReadUserGroupsPerUserResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        UserGroups:
          description: A list of user groups.
          items:
            $ref: '#/components/schemas/UserGroup'
          type: array
      type: object
    ReadUserGroupsRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        Filters:
          $ref: '#/components/schemas/FiltersUserGroup'
        FirstItem:
          description: The item starting the list of groups requested.
          type: integer
        ResultsPerPage:
          description: The maximum number of items that can be returned in a single response (by default, `100`).
          type: integer
      type: object
    ReadUserGroupsResponse:
      additionalProperties: false
      properties:
        HasMoreItems:
          description: If true, there are more items to return using the `FirstItem` parameter in a new request.
          type: boolean
        MaxResultsLimit:
          description: Indicates maximum results defined for the operation.
          type: integer
        MaxResultsTruncated:
          description: If true, indicates whether requested page size is more than allowed.
          type: boolean
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        UserGroups:
          description: A list of user groups.
          items:
            $ref: '#/components/schemas/UserGroup'
          type: array
      type: object
    ReadUserPoliciesRequest:
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        UserName:
          description: The name of the user.
          type: string
      required:
      - UserName
      type: object
    ReadUserPoliciesResponse:
      properties:
        PolicyNames:
          description: A list of policy names.
          items:
            type: string
          type: array
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    ReadUserPolicyRequest:
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        PolicyName:
          description: The name of the policy.
          type: string
        UserName:
          description: The name of the user.
          type: string
      required:
      - UserName
      - PolicyName
      type: object
    ReadUserPolicyResponse:
      properties:
        PolicyDocument:
          description: The policy document, providing a description of the policy.
          type: string
        PolicyName:
          description: The name of the inline policy.
          type: string
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        UserName:
          description: The name of the user in which the inline policy is included.
          type: string
      type: object
    ReadUsersRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        Filters:
          $ref: '#/components/schemas/FiltersUsers'
        FirstItem:
          description: The item starting the list of users requested.
          type: integer
        ResultsPerPage:
          description: The maximum number of items that can be returned in a single response (by default, `100`).
          type: integer
      type: object
    ReadUsersResponse:
      additionalProperties: false
      properties:
        HasMoreItems:
          description: If true, there are more items to return using the `FirstItem` parameter in a new request.
          type: boolean
        MaxResultsLimit:
          description: Indicates maximum results defined for the operation.
          type: integer
        MaxResultsTruncated:
          description: If true, indicates whether requested page size is more than allowed.
          type: boolean
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        Users:
          description: A list of EIM users.
          items:
            $ref: '#/components/schemas/User'
          type: array
      type: object
    ReadVirtualGatewaysRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        Filters:
          $ref: '#/components/schemas/FiltersVirtualGateway'
        NextPageToken:
          description: The token to request the next page of results. Each token refers to a specific page.
          format: byte
          type: string
        ResultsPerPage:
          description: The maximum number of logs returned in a single response (between `1` and `1000`, both included).
          type: integer
      type: object
    ReadVirtualGatewaysResponse:
      additionalProperties: false
      properties:
        NextPageToken:
          description: The token to request the next page of results. Each token refers to a specific page.
          format: byte
          type: string
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        VirtualGateways:
          description: Information about one or more virtual gateways.
          items:
            $ref: '#/components/schemas/VirtualGateway'
          type: array
      type: object
    ReadVmGroupsRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        Filters:
          $ref: '#/components/schemas/FiltersVmGroup'
      type: object
    ReadVmGroupsResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        VmGroups:
          description: Information about one or more VM groups.
          items:
            $ref: '#/components/schemas/VmGroup'
          type: array
      type: object
    ReadVmTemplatesRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        Filters:
          $ref: '#/components/schemas/FiltersVmTemplate'
      type: object
    ReadVmTemplatesResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        VmTemplates:
          description: Information about one or more VM templates.
          items:
            $ref: '#/components/schemas/VmTemplate'
          type: array
      type: object
    ReadVmTypesRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        Filters:
          $ref: '#/components/schemas/FiltersVmType'
        NextPageToken:
          description: The token to request the next page of results. Each token refers to a specific page.
          format: byte
          type: string
        ResultsPerPage:
          description: The maximum number of logs returned in a single response (between `1` and `1000`, both included).
          type: integer
      type: object
    ReadVmTypesResponse:
      additionalProperties: false
      properties:
        NextPageToken:
          description: The token to request the next page of results. Each token refers to a specific page.
          format: byte
          type: string
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        VmTypes:
          description: Information about one or more VM types.
          items:
            $ref: '#/components/schemas/VmType'
          type: array
      type: object
    ReadVmsHealthRequest:
      additionalProperties: false
      properties:
        BackendVmIds:
          description: One or more IDs of backend VMs.
          items:
            type: string
          type: array
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        LoadBalancerName:
          description: The name of the load balancer.
          type: string
      required:
      - LoadBalancerName
      type: object
    ReadVmsHealthResponse:
      additionalProperties: false
      properties:
        BackendVmHealth:
          description: Information about the health of one or more backend VMs.
          items:
            $ref: '#/components/schemas/BackendVmHealth'
          type: array
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    ReadVmsRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        Filters:
          $ref: '#/components/schemas/FiltersVm'
        NextPageToken:
          description: The token to request the next page of results. Each token refers to a specific page.
          format: byte
          type: string
        ResultsPerPage:
          description: The maximum number of logs returned in a single response (between `1` and `1000`, both included).
          type: integer
      type: object
    ReadVmsResponse:
      additionalProperties: false
      properties:
        NextPageToken:
          description: The token to request the next page of results. Each token refers to a specific page.
          format: byte
          type: string
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        Vms:
          description: Information about one or more VMs.
          items:
            $ref: '#/components/schemas/Vm'
          type: array
      type: object
    ReadVmsStateRequest:
      additionalProperties: false
      properties:
        AllVms:
          default: false
          description: If true, includes the status of all VMs. If false, only includes the status of running VMs.
          type: boolean
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        Filters:
          $ref: '#/components/schemas/FiltersVmsState'
        NextPageToken:
          description: The token to request the next page of results. Each token refers to a specific page.
          format: byte
          type: string
        ResultsPerPage:
          description: The maximum number of logs returned in a single response (between `1` and `1000`, both included).
          type: integer
      type: object
    ReadVmsStateResponse:
      additionalProperties: false
      properties:
        NextPageToken:
          description: The token to request the next page of results. Each token refers to a specific page.
          format: byte
          type: string
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        VmStates:
          description: Information about one or more VM states.
          items:
            $ref: '#/components/schemas/VmStates'
          type: array
      type: object
    ReadVolumesRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        Filters:
          $ref: '#/components/schemas/FiltersVolume'
        NextPageToken:
          description: The token to request the next page of results. Each token refers to a specific page.
          format: byte
          type: string
        ResultsPerPage:
          description: The maximum number of logs returned in a single response (between `1` and `1000`, both included).
          type: integer
      type: object
    ReadVolumesResponse:
      additionalProperties: false
      properties:
        NextPageToken:
          description: The token to request the next page of results. Each token refers to a specific page.
          format: byte
          type: string
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        Volumes:
          description: Information about one or more volumes.
          items:
            $ref: '#/components/schemas/Volume'
          type: array
      type: object
    ReadVpnConnectionsRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        Filters:
          $ref: '#/components/schemas/FiltersVpnConnection'
        NextPageToken:
          description: The token to request the next page of results. Each token refers to a specific page.
          format: byte
          type: string
        ResultsPerPage:
          description: The maximum number of logs returned in a single response (between `1` and `1000`, both included).
          type: integer
      type: object
    ReadVpnConnectionsResponse:
      additionalProperties: false
      properties:
        NextPageToken:
          description: The token to request the next page of results. Each token refers to a specific page.
          format: byte
          type: string
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        VpnConnections:
          description: Information about one or more VPN connections.
          items:
            $ref: '#/components/schemas/VpnConnection'
          type: array
      type: object
    RebootVmsRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        VmIds:
          description: One or more IDs of the VMs you want to reboot.
          items:
            type: string
          type: array
      required:
      - VmIds
      type: object
    RebootVmsResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    Region:
      additionalProperties: false
      description: Information about the Region.
      properties:
        Endpoint:
          description: The hostname of the gateway to access the Region.
          type: string
        RegionName:
          description: The administrative name of the Region.
          type: string
      type: object
    RegisterVmsInLoadBalancerRequest:
      additionalProperties: false
      properties:
        BackendVmIds:
          description: |-
            One or more IDs of backend VMs.<br />
            Specifying the same ID several times has no effect as each backend VM has equal weight.
          items:
            type: string
          type: array
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        LoadBalancerName:
          description: The name of the load balancer.
          type: string
      required:
      - BackendVmIds
      - LoadBalancerName
      type: object
    RegisterVmsInLoadBalancerResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    RejectNetPeeringRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        NetPeeringId:
          description: The ID of the Net peering you want to reject.
          type: string
      required:
      - NetPeeringId
      type: object
    RejectNetPeeringResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    RemoveUserFromUserGroupRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        UserGroupName:
          description: The name of the group you want to remove the user from.
          type: string
        UserGroupPath:
          description: The path to the group. If not specified, it is set to a slash (`/`).
          type: string
        UserName:
          description: The name of the user you want to remove from the group.
          type: string
        UserPath:
          description: The path to the user (by default, `/`).
          type: string
      required:
      - UserGroupName
      - UserName
      type: object
    RemoveUserFromUserGroupResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    ResourceLoadBalancerTag:
      additionalProperties: false
      description: Information about the tag.
      properties:
        Key:
          description: The key of the tag, between 1 and 128 characters.
          type: string
      required:
      - Key
      type: object
    ResourceTag:
      additionalProperties: false
      description: Information about the tag.
      properties:
        Key:
          description: The key of the tag, with a minimum of 1 character.
          type: string
        Value:
          description: The value of the tag, between 0 and 255 characters.
          type: string
      required:
      - Key
      - Value
      type: object
    ResponseContext:
      additionalProperties: false
      description: Information about the context of the response.
      properties:
        RequestId:
          description: The ID of the request.
          type: string
      type: object
    Route:
      additionalProperties: false
      description: Information about the route.
      properties:
        CreationMethod:
          description: The method used to create the route.
          type: string
        DestinationIpRange:
          description: The IP range used for the destination match, in CIDR notation (for example, `10.0.0.0/24`).
          type: string
        DestinationServiceId:
          description: The ID of the OUTSCALE service.
          type: string
        GatewayId:
          description: The ID of the internet service or virtual gateway attached to the Net.
          type: string
        NatServiceId:
          description: The ID of a NAT service attached to the Net.
          type: string
        NetAccessPointId:
          description: The ID of the Net access point.
          type: string
        NetPeeringId:
          description: The ID of the Net peering.
          type: string
        NicId:
          description: The ID of the NIC.
          type: string
        State:
          description: The state of a route in the route table (always `active`).
          type: string
        VmAccountId:
          description: The account ID of the owner of the VM.
          type: string
        VmId:
          description: The ID of a VM specified in a route in the table.
          type: string
      type: object
    RouteLight:
      additionalProperties: false
      description: Information about the route.
      properties:
        DestinationIpRange:
          description: The IP range used for the destination match, in CIDR notation (for example, `10.0.0.0/24`).
          type: string
        RouteType:
          description: The type of route (always `static`).
          type: string
        State:
          description: The current state of the static route (`pending` \| `available` \| `deleting` \| `deleted`).
          type: string
      type: object
    RoutePropagatingVirtualGateway:
      additionalProperties: false
      description: Information about the route propagating virtual gateway.
      properties:
        VirtualGatewayId:
          description: The ID of the virtual gateway.
          type: string
      type: object
    RouteTable:
      additionalProperties: false
      description: Information about the route table.
      properties:
        LinkRouteTables:
          description: One or more associations between the route table and Subnets.
          items:
            $ref: '#/components/schemas/LinkRouteTable'
          type: array
        NetId:
          description: The ID of the Net for the route table.
          type: string
        RoutePropagatingVirtualGateways:
          description: Information about virtual gateways propagating routes.
          items:
            $ref: '#/components/schemas/RoutePropagatingVirtualGateway'
          type: array
        RouteTableId:
          description: The ID of the route table.
          type: string
        Routes:
          description: One or more routes in the route table.
          items:
            $ref: '#/components/schemas/Route'
          type: array
        Tags:
          description: One or more tags associated with the route table.
          items:
            $ref: '#/components/schemas/ResourceTag'
          type: array
      type: object
    ScaleDownVmGroupRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        VmGroupId:
          description: The ID of the VM group you want to scale down.
          type: string
        VmSubtraction:
          description: The number of VMs you want to delete from the VM group.
          type: integer
      required:
      - VmGroupId
      - VmSubtraction
      type: object
    ScaleDownVmGroupResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    ScaleUpVmGroupRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        VmAddition:
          description: The number of VMs you want to add to the VM group.
          type: integer
        VmGroupId:
          description: The ID of the VM group you want to scale up.
          type: string
      required:
      - VmGroupId
      - VmAddition
      type: object
    ScaleUpVmGroupResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    SecureBootAction:
      description: One action to perform on the next boot of the VM. For more information, see [About Secure Boot](https://docs.outscale.com/en/userguide/About-Secure-Boot.html#_secure_boot_actions).
      enum:
      - enable
      - disable
      - setup-mode
      - none
      type: string
    SecurityGroup:
      additionalProperties: false
      description: Information about the security group.
      properties:
        AccountId:
          description: The account ID that has been granted permission.
          type: string
        Description:
          description: The description of the security group.
          type: string
        InboundRules:
          description: The inbound rules associated with the security group.
          items:
            $ref: '#/components/schemas/SecurityGroupRule'
          type: array
        NetId:
          description: The ID of the Net for the security group.
          type: string
        OutboundRules:
          description: The outbound rules associated with the security group.
          items:
            $ref: '#/components/schemas/SecurityGroupRule'
          type: array
        SecurityGroupId:
          description: The ID of the security group.
          type: string
        SecurityGroupName:
          description: The name of the security group.
          type: string
        Tags:
          description: One or more tags associated with the security group.
          items:
            $ref: '#/components/schemas/ResourceTag'
          type: array
      type: object
    SecurityGroupLight:
      additionalProperties: false
      description: Information about the security group.
      properties:
        SecurityGroupId:
          description: The ID of the security group.
          type: string
        SecurityGroupName:
          description: The name of the security group.
          type: string
      type: object
    SecurityGroupRule:
      additionalProperties: false
      description: Information about the security group rule.
      properties:
        FromPortRange:
          description: The beginning of the port range for the TCP and UDP protocols, or an ICMP type number.
          type: integer
        IpProtocol:
          description: The IP protocol name (`tcp`, `udp`, `icmp`, or `-1` for all protocols). By default, `-1`. In a Net, this can also be an IP protocol number. For more information, see the [IANA.org website](https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml).
          type: string
        IpRanges:
          description: One or more IP ranges for the security group rules, in CIDR notation (for example, `10.0.0.0/16`).
          items:
            type: string
          type: array
        SecurityGroupsMembers:
          description: Information about one or more source or destination security groups.
          items:
            $ref: '#/components/schemas/SecurityGroupsMember'
          type: array
        ServiceIds:
          description: One or more service IDs to allow traffic from a Net to access the corresponding OUTSCALE services. For more information, see [ReadNetAccessPointServices](#readnetaccesspointservices).
          items:
            type: string
          type: array
        ToPortRange:
          description: The end of the port range for the TCP and UDP protocols, or an ICMP code number.
          type: integer
      type: object
    SecurityGroupsMember:
      additionalProperties: false
      description: Information about a source or destination security group.
      properties:
        AccountId:
          description: The account ID that owns the source or destination security group.
          type: string
        SecurityGroupId:
          description: The ID of a source or destination security group that you want to link to the security group of the rule.
          type: string
        SecurityGroupName:
          description: (Public Cloud only) The name of a source or destination security group that you want to link to the security group of the rule.
          type: string
      type: object
    ServerCertificate:
      additionalProperties: false
      description: Information about the server certificate.
      properties:
        ExpirationDate:
          description: The date on which the server certificate expires.
          format: date
          type: string
        Id:
          description: The ID of the server certificate.
          type: string
        Name:
          description: The name of the server certificate.
          type: string
        Orn:
          description: The OUTSCALE Resource Name (ORN) of the server certificate. For more information, see [Resource Identifiers > OUTSCALE Resource Names (ORNs)](https://docs.outscale.com/en/userguide/Resource-Identifiers.html#_outscale_resource_names_orns).
          type: string
        Path:
          description: The path to the server certificate.
          type: string
        UploadDate:
          description: The date on which the server certificate has been uploaded.
          format: date
          type: string
      type: object
    Service:
      additionalProperties: false
      description: Information about the service.
      properties:
        IpRanges:
          description: The list of network prefixes used by the service, in CIDR notation.
          items:
            type: string
          type: array
        ServiceId:
          description: The ID of the service.
          type: string
        ServiceName:
          description: The name of the service.
          type: string
      type: object
    SetDefaultPolicyVersionRequest:
      additionalProperties: false
      properties:
        PolicyOrn:
          description: The OUTSCALE Resource Name (ORN) of the policy. For more information, see [Resource Identifiers](https://docs.outscale.com/en/userguide/Resource-Identifiers.html).
          pattern: ^orn:ows:(iam|idauth):\S*:\d{12}:policy/\S+$
          type: string
        VersionId:
          description: The ID of the version.
          type: string
      required:
      - PolicyOrn
      - VersionId
      type: object
    SetDefaultPolicyVersionResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    Snapshot:
      additionalProperties: false
      description: Information about the snapshot.
      properties:
        AccountAlias:
          description: The account alias of the owner of the snapshot.
          type: string
        AccountId:
          description: The account ID of the owner of the snapshot.
          type: string
        ClientToken:
          description: The idempotency token provided when creating the snapshot.
          type: string
        CreationDate:
          description: The date and time (UTC) at which the snapshot was created.
          format: date-time
          type: string
        Description:
          description: The description of the snapshot.
          type: string
        PermissionsToCreateVolume:
          $ref: '#/components/schemas/PermissionsOnResource'
        Progress:
          description: The progress of the snapshot, as a percentage.
          type: integer
        SnapshotId:
          description: The ID of the snapshot.
          type: string
        State:
          description: The state of the snapshot (`in-queue` \| `pending` \| `completed` \| `error` \| `deleting`)).
          type: string
        Tags:
          description: One or more tags associated with the snapshot.
          items:
            $ref: '#/components/schemas/ResourceTag'
          type: array
        VolumeId:
          description: The ID of the volume used to create the snapshot.
          type: string
        VolumeSize:
          description: The size of the volume used to create the snapshot, in gibibytes (GiB).
          type: integer
      type: object
    SnapshotExportTask:
      additionalProperties: false
      description: Information about the snapshot export task.
      properties:
        Comment:
          description: If the snapshot export task fails, an error message appears.
          type: string
        OsuExport:
          $ref: '#/components/schemas/OsuExportSnapshotExportTask'
        Progress:
          description: The progress of the snapshot export task, as a percentage.
          type: integer
        SnapshotId:
          description: The ID of the snapshot to be exported.
          type: string
        State:
          description: The state of the snapshot export task (`pending` \| `active` \| `completed` \| `cancelled` \| `failed`).
          type: string
        Tags:
          description: One or more tags associated with the snapshot export task.
          items:
            $ref: '#/components/schemas/ResourceTag'
          type: array
        TaskId:
          description: The ID of the snapshot export task.
          type: string
      type: object
    SourceNet:
      additionalProperties: false
      description: Information about the source Net.
      properties:
        AccountId:
          description: The account ID of the owner of the source Net.
          type: string
        IpRange:
          description: The IP range for the source Net, in CIDR notation (for example, `10.0.0.0/16`).
          type: string
        NetId:
          description: The ID of the source Net.
          type: string
      type: object
    SourceSecurityGroup:
      additionalProperties: false
      description: |-
        Information about the source security group of the load balancer, which you can use as part of your inbound rules for your registered VMs.<br />
        To only allow traffic from load balancers, add a security group rule that specifies this source security group as the inbound source.
      properties:
        SecurityGroupAccountId:
          description: The account ID of the owner of the security group.
          type: string
        SecurityGroupName:
          description: The name of the security group.
          type: string
      type: object
    StartVmsRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        VmIds:
          description: One or more IDs of VMs.
          items:
            type: string
          type: array
      required:
      - VmIds
      type: object
    StartVmsResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        Vms:
          description: Information about one or more started VMs.
          items:
            $ref: '#/components/schemas/VmState'
          type: array
      type: object
    StateComment:
      additionalProperties: false
      description: Information about the change of state.
      properties:
        StateCode:
          description: The code of the change of state.
          type: string
        StateMessage:
          description: A message explaining the change of state.
          type: string
      type: object
    StopVmsRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        ForceStop:
          description: Forces the VM to stop.
          type: boolean
        VmIds:
          description: One or more IDs of VMs.
          items:
            type: string
          type: array
      required:
      - VmIds
      type: object
    StopVmsResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        Vms:
          description: Information about one or more stopped VMs.
          items:
            $ref: '#/components/schemas/VmState'
          type: array
      type: object
    Subnet:
      additionalProperties: false
      description: Information about the Subnet.
      properties:
        AvailableIpsCount:
          description: The number of available IPs in the Subnets.
          type: integer
        IpRange:
          description: The IP range in the Subnet, in CIDR notation (for example, `10.0.0.0/16`).
          type: string
        MapPublicIpOnLaunch:
          description: If true, a public IP is assigned to the network interface cards (NICs) created in the specified Subnet.
          type: boolean
        NetId:
          description: The ID of the Net in which the Subnet is.
          type: string
        State:
          description: The state of the Subnet (`pending` \| `available` \| `deleted`).
          type: string
        SubnetId:
          description: The ID of the Subnet.
          type: string
        SubregionName:
          description: The name of the Subregion in which the Subnet is located.
          type: string
        Tags:
          description: One or more tags associated with the Subnet.
          items:
            $ref: '#/components/schemas/ResourceTag'
          type: array
      type: object
    Subregion:
      additionalProperties: false
      description: Information about the Subregion.
      properties:
        LocationCode:
          description: The location code (physical zone) of the Subregion. For more information, see [About Regions > Mapping Between Subregions and Physical Zones](https://docs.outscale.com/en/userguide/About-Regions-and-Subregions.html#_mapping_between_subregions_and_physical_zones).
          type: string
        RegionName:
          description: The name of the Region containing the Subregion.
          type: string
        State:
          description: The state of the Subregion.
          type: string
        SubregionName:
          description: The name of the Subregion.
          type: string
      type: object
    Tag:
      additionalProperties: false
      description: Information about the tag.
      properties:
        Key:
          description: The key of the tag, with a minimum of 1 character.
          type: string
        ResourceId:
          description: The ID of the resource.
          type: string
        ResourceType:
          description: The type of the resource.
          type: string
        Value:
          description: The value of the tag, between 0 and 255 characters.
          type: string
      type: object
    UnitPriceEntry:
      additionalProperties: false
      description: Information about the unit price entry.
      properties:
        Currency:
          description: The currency of your account for the `UnitPrice` parameter, in the ISO-4217 format (for example, `EUR`).
          type: string
        Operation:
          description: The operation associated with the catalog entry (for example, `RunInstances-OD` or `CreateVolume`).
          type: string
        Service:
          description: The service associated with the catalog entry (for example, `TinaOS-FCU` or `TinaOS-OOS`).
          type: string
        Type:
          description: The type associated with the catalog entry (for example, `BSU:VolumeIOPS:io1` or `BoxUsage:tinav6.c6r16p3`).
          type: string
        Unit:
          description: The unit associated with the catalog entry (for example, `PER_MONTH` or `PER_COUNT`).
          type: string
        UnitPrice:
          description: The unit price of the catalog entry in the currency of your account, in the ISO-4217 format (for example, `EUR`).
          format: double
          type: number
      type: object
    UnlinkFlexibleGpuRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        FlexibleGpuId:
          description: The ID of the fGPU you want to detach from your VM.
          type: string
      required:
      - FlexibleGpuId
      type: object
    UnlinkFlexibleGpuResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    UnlinkInternetServiceRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        InternetServiceId:
          description: The ID of the internet service you want to detach.
          type: string
        NetId:
          description: The ID of the Net from which you want to detach the internet service.
          type: string
      required:
      - InternetServiceId
      - NetId
      type: object
    UnlinkInternetServiceResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    UnlinkLoadBalancerBackendMachinesRequest:
      additionalProperties: false
      properties:
        BackendIps:
          description: One or more public IPs of backend VMs.
          items:
            type: string
          type: array
        BackendVmIds:
          description: One or more IDs of backend VMs.
          items:
            type: string
          type: array
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        LoadBalancerName:
          description: The name of the load balancer.
          type: string
      required:
      - LoadBalancerName
      type: object
    UnlinkLoadBalancerBackendMachinesResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    UnlinkManagedPolicyFromUserGroupRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        PolicyOrn:
          description: The OUTSCALE Resource Name (ORN) of the policy. For more information, see [Resource Identifiers](https://docs.outscale.com/en/userguide/Resource-Identifiers.html).
          type: string
        UserGroupName:
          description: The name of the group you want to unlink the policy from.
          type: string
      required:
      - PolicyOrn
      - UserGroupName
      type: object
    UnlinkManagedPolicyFromUserGroupResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    UnlinkNicRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        LinkNicId:
          description: The ID of the attachment operation.
          type: string
      required:
      - LinkNicId
      type: object
    UnlinkNicResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    UnlinkPolicyRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        PolicyOrn:
          description: The OUTSCALE Resource Name (ORN) of the policy. For more information, see [Resource Identifiers](https://docs.outscale.com/en/userguide/Resource-Identifiers.html).
          pattern: ^orn:ows:(iam|idauth):\S*:\d{12}:policy/\S+$
          type: string
        UserName:
          description: The name of the user you want to detach the policy from.
          type: string
      required:
      - PolicyOrn
      - UserName
      type: object
    UnlinkPolicyResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    UnlinkPrivateIpsRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        NicId:
          description: The ID of the NIC.
          type: string
        PrivateIps:
          description: One or more secondary private IPs you want to unassign from the NIC.
          items:
            type: string
          type: array
      required:
      - NicId
      - PrivateIps
      type: object
    UnlinkPrivateIpsResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    UnlinkPublicIpRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        LinkPublicIpId:
          description: The ID representing the association of the public IP with the VM or the NIC. This parameter is required unless you use the `PublicIp` parameter.
          type: string
        PublicIp:
          description: The public IP. This parameter is required unless you use the `LinkPublicIpId` parameter.
          type: string
      type: object
    UnlinkPublicIpResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    UnlinkRouteTableRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        LinkRouteTableId:
          description: The ID of the association between the route table and the Subnet.
          type: string
      required:
      - LinkRouteTableId
      type: object
    UnlinkRouteTableResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    UnlinkVirtualGatewayRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        NetId:
          description: The ID of the Net from which you want to detach the virtual gateway.
          type: string
        VirtualGatewayId:
          description: The ID of the virtual gateway.
          type: string
      required:
      - NetId
      - VirtualGatewayId
      type: object
    UnlinkVirtualGatewayResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    UnlinkVolumeRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        ForceUnlink:
          description: 'Forces the detachment of the volume in case of previous failure. Important: This action may damage your data or file systems.'
          type: boolean
        VolumeId:
          description: The ID of the volume you want to detach.
          type: string
      required:
      - VolumeId
      type: object
    UnlinkVolumeResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    UpdateAccessKeyRequest:
      additionalProperties: false
      properties:
        AccessKeyId:
          description: The ID of the access key.
          type: string
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        ExpirationDate:
          description: The date and time, or the date, at which you want the access key to expire, in ISO 8601 format (for example, `2020-06-14T00:00:00.000Z` or `2020-06-14`). If not specified, the access key is set to not expire.
          oneOf:
          - format: date-time
            type: string
          - format: date
            type: string
        State:
          description: The new state for the access key (`ACTIVE` \| `INACTIVE`). When set to `ACTIVE`, the access key is enabled and can be used to send requests. When set to `INACTIVE`, the access key is disabled.
          type: string
        UserName:
          description: The name of the EIM user that the access key you want to modify is associated with. If you do not specify a user name, this action modifies the access key of the user who sends the request (which can be the root account).
          type: string
      required:
      - AccessKeyId
      - State
      type: object
    UpdateAccessKeyResponse:
      additionalProperties: false
      properties:
        AccessKey:
          $ref: '#/components/schemas/AccessKey'
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    UpdateAccountRequest:
      additionalProperties: false
      properties:
        AdditionalEmails:
          description: One or more additional email addresses for the account. These addresses are used for notifications only. If you already have a list of additional emails registered, you cannot add to it, only replace it. To remove all registered additional emails, specify an empty list.
          items:
            pattern: ^.+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)+$
            type: string
          type: array
        City:
          description: The new city of the account owner.
          type: string
        CompanyName:
          description: The new name of the company for the account.
          type: string
        Country:
          description: The new country of the account owner.
          type: string
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        Email:
          description: The main email address for the account. This address is used for your credentials and notifications.
          type: string
        FirstName:
          description: The new first name of the account owner.
          type: string
        JobTitle:
          description: The new job title of the account owner.
          type: string
        LastName:
          description: The new last name of the account owner.
          type: string
        MobileNumber:
          description: The new mobile phone number of the account owner.
          type: string
        PhoneNumber:
          description: The new landline phone number of the account owner.
          type: string
        StateProvince:
          description: The new state/province of the account owner.
          type: string
        VatNumber:
          description: The new value added tax (VAT) number for the account.
          type: string
        ZipCode:
          description: The new ZIP code of the city.
          type: string
      type: object
    UpdateAccountResponse:
      additionalProperties: false
      properties:
        Account:
          $ref: '#/components/schemas/Account'
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    UpdateApiAccessPolicyRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        MaxAccessKeyExpirationSeconds:
          description: The maximum possible lifetime for your access keys, in seconds (between `0` and `3153600000`, both included). If set to `O`, your access keys can have unlimited lifetimes, but a trusted session cannot be activated. Otherwise, all your access keys must have an expiration date. This value must be greater than the remaining lifetime of each access key of your account.
          format: int64
          type: integer
        RequireTrustedEnv:
          description: |-
            If true, a trusted session is activated, provided that you specify the `MaxAccessKeyExpirationSeconds` parameter with a value greater than `0`.<br />
            Enabling this will require you and all your users to log in to Cockpit v2 using the WebAuthn method for multi-factor authentication. For more information, see [About Authentication > Multi-Factor Authentication](https://docs.outscale.com/en/userguide/About-Authentication.html#_multi_factor_authentication).
          type: boolean
      required:
      - MaxAccessKeyExpirationSeconds
      - RequireTrustedEnv
      type: object
    UpdateApiAccessPolicyResponse:
      additionalProperties: false
      properties:
        ApiAccessPolicy:
          $ref: '#/components/schemas/ApiAccessPolicy'
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    UpdateApiAccessRuleRequest:
      additionalProperties: false
      properties:
        ApiAccessRuleId:
          description: The ID of the API access rule you want to update.
          type: string
        CaIds:
          description: One or more IDs of Client Certificate Authorities (CAs).
          items:
            type: string
          type: array
        Cns:
          description: One or more Client Certificate Common Names (CNs).
          items:
            type: string
          type: array
        Description:
          description: A new description for the API access rule.
          type: string
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        IpRanges:
          description: One or more IPs or CIDR blocks (for example, `192.0.2.0/16`).
          items:
            type: string
          type: array
      required:
      - ApiAccessRuleId
      type: object
    UpdateApiAccessRuleResponse:
      additionalProperties: false
      properties:
        ApiAccessRule:
          $ref: '#/components/schemas/ApiAccessRule'
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    UpdateCaRequest:
      additionalProperties: false
      properties:
        CaId:
          description: The ID of the CA.
          type: string
        Description:
          description: The description of the CA.
          type: string
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
      required:
      - CaId
      type: object
    UpdateCaResponse:
      additionalProperties: false
      properties:
        Ca:
          $ref: '#/components/schemas/Ca'
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    UpdateDedicatedGroupRequest:
      additionalProperties: false
      properties:
        DedicatedGroupId:
          description: The ID of the dedicated group you want to update.
          type: string
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        Name:
          description: The new name of the dedicated group.
          type: string
      required:
      - DedicatedGroupId
      - Name
      type: object
    UpdateDedicatedGroupResponse:
      additionalProperties: false
      properties:
        DedicatedGroup:
          $ref: '#/components/schemas/DedicatedGroup'
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    UpdateDirectLinkInterfaceRequest:
      additionalProperties: false
      properties:
        DirectLinkInterfaceId:
          description: The ID of the DirectLink interface you want to update.
          type: string
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        Mtu:
          description: The maximum transmission unit (MTU) of the DirectLink interface, in bytes.
          enum:
          - 1500
          type: integer
      required:
      - DirectLinkInterfaceId
      - Mtu
      type: object
    UpdateDirectLinkInterfaceResponse:
      additionalProperties: false
      properties:
        DirectLinkInterface:
          $ref: '#/components/schemas/DirectLinkInterfaces'
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    UpdateFlexibleGpuRequest:
      additionalProperties: false
      properties:
        DeleteOnVmDeletion:
          description: If true, the fGPU is deleted when the VM is terminated.
          type: boolean
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        FlexibleGpuId:
          description: The ID of the fGPU you want to modify.
          type: string
      required:
      - FlexibleGpuId
      type: object
    UpdateFlexibleGpuResponse:
      additionalProperties: false
      properties:
        FlexibleGpu:
          $ref: '#/components/schemas/FlexibleGpu'
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    UpdateImageRequest:
      additionalProperties: false
      properties:
        Description:
          description: A new description for the image.
          type: string
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        ImageId:
          description: The ID of the OMI you want to modify.
          type: string
        PermissionsToLaunch:
          $ref: '#/components/schemas/PermissionsOnResourceCreation'
        ProductCodes:
          description: The product codes associated with the OMI. Any previously set value is deleted. Make sure to specify all product codes you want to associate with the OMI.
          items:
            type: string
          type: array
      required:
      - ImageId
      type: object
    UpdateImageResponse:
      additionalProperties: false
      properties:
        Image:
          $ref: '#/components/schemas/Image'
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    UpdateListenerRuleRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        HostPattern:
          description: A host-name pattern for the rule, with a maximum length of 128 characters. This host-name pattern supports maximum three wildcards, and must not contain any special characters except `-.?`.
          nullable: true
          type: string
        ListenerRuleName:
          description: The name of the listener rule.
          type: string
        PathPattern:
          description: A path pattern for the rule, with a maximum length of 128 characters. This path pattern supports maximum three wildcards, and must not contain any special characters except `_-.$/~&quot;'@:+?`.
          nullable: true
          type: string
      required:
      - ListenerRuleName
      type: object
    UpdateListenerRuleResponse:
      additionalProperties: false
      properties:
        ListenerRule:
          $ref: '#/components/schemas/ListenerRule'
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    UpdateLoadBalancerRequest:
      additionalProperties: false
      properties:
        AccessLog:
          $ref: '#/components/schemas/AccessLog'
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        HealthCheck:
          $ref: '#/components/schemas/HealthCheck'
        LoadBalancerName:
          description: The name of the load balancer.
          type: string
        LoadBalancerPort:
          description: The port on which the load balancer is listening (between `1` and `65535`, both included). This parameter is required if you want to update the server certificate.
          type: integer
        PolicyNames:
          description: The name of the policy you want to enable for the listener.
          items:
            type: string
          type: array
        PublicIp:
          description: (internet-facing only) The public IP you want to associate with the load balancer. The former public IP of the load balancer is then disassociated. If you specify an empty string and the former public IP belonged to you, it is disassociated and replaced by a public IP owned by 3DS OUTSCALE.
          type: string
        SecuredCookies:
          description: If true, secure cookies are enabled for the load balancer.
          type: boolean
        SecurityGroups:
          description: (Net only) One or more IDs of security groups you want to assign to the load balancer. You need to specify the already assigned security groups that you want to keep along with the new ones you are assigning. If the list is empty, the default security group of the Net is assigned to the load balancer.
          items:
            type: string
          type: array
        ServerCertificateId:
          description: The OUTSCALE Resource Name (ORN) of the server certificate. For more information, see [Resource Identifiers > OUTSCALE Resource Names (ORNs)](https://docs.outscale.com/en/userguide/Resource-Identifiers.html#_outscale_resource_names_orns). If this parameter is specified, you must also specify the `LoadBalancerPort` parameter.
          type: string
      required:
      - LoadBalancerName
      type: object
    UpdateLoadBalancerResponse:
      additionalProperties: false
      properties:
        LoadBalancer:
          $ref: '#/components/schemas/LoadBalancer'
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    UpdateNetAccessPointRequest:
      additionalProperties: false
      properties:
        AddRouteTableIds:
          description: One or more IDs of route tables to associate with the specified Net access point.
          items:
            type: string
          type: array
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        NetAccessPointId:
          description: The ID of the Net access point.
          type: string
        RemoveRouteTableIds:
          description: One or more IDs of route tables to disassociate from the specified Net access point.
          items:
            type: string
          type: array
      required:
      - NetAccessPointId
      type: object
    UpdateNetAccessPointResponse:
      additionalProperties: false
      properties:
        NetAccessPoint:
          $ref: '#/components/schemas/NetAccessPoint'
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    UpdateNetRequest:
      additionalProperties: false
      properties:
        DhcpOptionsSetId:
          description: The ID of the DHCP options set (or `default` if you want to associate the default one).
          type: string
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        NetId:
          description: The ID of the Net.
          type: string
      required:
      - DhcpOptionsSetId
      - NetId
      type: object
    UpdateNetResponse:
      additionalProperties: false
      properties:
        Net:
          $ref: '#/components/schemas/Net'
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    UpdateNicRequest:
      additionalProperties: false
      properties:
        Description:
          description: A new description for the NIC.
          type: string
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        LinkNic:
          $ref: '#/components/schemas/LinkNicToUpdate'
        NicId:
          description: The ID of the NIC you want to modify.
          type: string
        SecurityGroupIds:
          description: |-
            One or more IDs of security groups for the NIC.<br />
            You must specify at least one group, even if you use the default security group in the Net.
          items:
            type: string
          type: array
      required:
      - NicId
      type: object
    UpdateNicResponse:
      additionalProperties: false
      properties:
        Nic:
          $ref: '#/components/schemas/Nic'
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    UpdateRoutePropagationRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        Enable:
          description: If true, a virtual gateway can propagate routes to a specified route table of a Net. If false, the propagation is disabled.
          type: boolean
        RouteTableId:
          description: The ID of the route table.
          type: string
        VirtualGatewayId:
          description: The ID of the virtual gateway.
          type: string
      required:
      - Enable
      - RouteTableId
      - VirtualGatewayId
      type: object
    UpdateRoutePropagationResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        RouteTable:
          $ref: '#/components/schemas/RouteTable'
      type: object
    UpdateRouteRequest:
      additionalProperties: false
      properties:
        DestinationIpRange:
          description: The IP range used for the destination match, in CIDR notation (for example, `10.0.0.0/24`).
          type: string
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        GatewayId:
          description: The ID of an internet service or virtual gateway attached to your Net.
          type: string
        NatServiceId:
          description: The ID of a NAT service.
          type: string
        NetPeeringId:
          description: The ID of a Net peering.
          type: string
        NicId:
          description: The ID of a network interface card (NIC).
          type: string
        RouteTableId:
          description: The ID of the route table.
          type: string
        VmId:
          description: The ID of a NAT VM in your Net.
          type: string
      required:
      - RouteTableId
      - DestinationIpRange
      type: object
    UpdateRouteResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        RouteTable:
          $ref: '#/components/schemas/RouteTable'
      type: object
    UpdateRouteTableLinkRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        LinkRouteTableId:
          description: The ID of the current route table link.
          type: string
        RouteTableId:
          description: The ID of the new route table to associate with the Subnet.
          type: string
      required:
      - RouteTableId
      - LinkRouteTableId
      type: object
    UpdateRouteTableLinkResponse:
      additionalProperties: false
      properties:
        LinkRouteTableId:
          description: The ID of the association between the route table and the Subnet.
          type: string
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    UpdateServerCertificateRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        Name:
          description: The name of the server certificate you want to modify.
          type: string
        NewName:
          description: A new name for the server certificate.
          type: string
        NewPath:
          description: A new path for the server certificate.
          type: string
      required:
      - Name
      type: object
    UpdateServerCertificateResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        ServerCertificate:
          $ref: '#/components/schemas/ServerCertificate'
      type: object
    UpdateSnapshotRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        PermissionsToCreateVolume:
          $ref: '#/components/schemas/PermissionsOnResourceCreation'
        SnapshotId:
          description: The ID of the snapshot.
          type: string
      required:
      - SnapshotId
      - PermissionsToCreateVolume
      type: object
    UpdateSnapshotResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        Snapshot:
          $ref: '#/components/schemas/Snapshot'
      type: object
    UpdateSubnetRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        MapPublicIpOnLaunch:
          description: If true, a public IP is assigned to the network interface cards (NICs) created in the specified Subnet.
          type: boolean
        SubnetId:
          description: The ID of the Subnet.
          type: string
      required:
      - SubnetId
      - MapPublicIpOnLaunch
      type: object
    UpdateSubnetResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        Subnet:
          $ref: '#/components/schemas/Subnet'
      type: object
    UpdateUserGroupRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        NewPath:
          description: A new path for the group. If not specified, it is set to a slash (`/`).
          type: string
        NewUserGroupName:
          description: A new name for the user group.
          type: string
        Path:
          description: The path to the group. If not specified, it is set to a slash (`/`).
          type: string
        UserGroupName:
          description: The name of the group you want to update.
          type: string
      required:
      - UserGroupName
      type: object
    UpdateUserGroupResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        UserGroup:
          $ref: '#/components/schemas/UserGroup'
        Users:
          description: A list of EIM users.
          items:
            $ref: '#/components/schemas/User'
          type: array
      type: object
    UpdateUserRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        NewPath:
          description: A new path for the EIM user.
          type: string
        NewUserEmail:
          description: A new email address for the EIM user.
          type: string
        NewUserName:
          description: A new name for the EIM user.
          type: string
        UserName:
          description: The name of the EIM user you want to modify.
          type: string
      required:
      - UserName
      type: object
    UpdateUserResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        User:
          $ref: '#/components/schemas/User'
      type: object
    UpdateVmGroupRequest:
      additionalProperties: false
      properties:
        Description:
          description: A new description for the VM group.
          type: string
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        Tags:
          description: New tags for your VM group.
          items:
            $ref: '#/components/schemas/ResourceTag'
          type: array
        VmGroupId:
          description: The ID of the VM group you want to update.
          type: string
        VmGroupName:
          description: A new name for your VM group.
          type: string
        VmTemplateId:
          description: A new VM template ID for your VM group.
          type: string
      required:
      - VmGroupId
      type: object
    UpdateVmGroupResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        VmGroup:
          $ref: '#/components/schemas/VmGroup'
      type: object
    UpdateVmRequest:
      additionalProperties: false
      properties:
        ActionsOnNextBoot:
          $ref: '#/components/schemas/ActionsOnNextBoot'
        BlockDeviceMappings:
          description: One or more block device mappings of the VM.
          items:
            $ref: '#/components/schemas/BlockDeviceMappingVmUpdate'
          type: array
        BsuOptimized:
          description: This parameter is not available. It is present in our API for the sake of historical compatibility with AWS.
          type: boolean
        DeletionProtection:
          description: If true, you cannot delete the VM unless you change this parameter back to false.
          type: boolean
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        IsSourceDestChecked:
          description: (Net only) If true, the source/destination check is enabled. If false, it is disabled.
          type: boolean
        KeypairName:
          description: |-
            The name of a keypair you want to associate with the VM.<br />
            When you replace the keypair of a VM with another one, the metadata of the VM is modified to reflect the new public key, but the replacement is still not effective in the operating system of the VM. To complete the replacement and effectively apply the new keypair, you need to perform other actions inside the VM. For more information, see [Modifying the Keypair of a VM](https://docs.outscale.com/en/userguide/Modifying-the-Keypair-of-a-VM.html).
          type: string
        NestedVirtualization:
          description: (dedicated tenancy only) If true, nested virtualization is enabled. If false, it is disabled.
          type: boolean
        Performance:
          description: The performance of the VM.
          enum:
          - medium
          - high
          - highest
          type: string
        SecurityGroupIds:
          description: One or more IDs of security groups for the VM.
          items:
            type: string
          type: array
        UserData:
          description: The Base64-encoded MIME user data, limited to 500 kibibytes (KiB).
          type: string
        VmId:
          description: The ID of the VM.
          type: string
        VmInitiatedShutdownBehavior:
          description: The VM behavior when you stop it. If set to `stop`, the VM stops. If set to `restart`, the VM stops then automatically restarts. If set to `terminate`, the VM stops and is terminated.
          type: string
        VmType:
          description: The type of VM. For more information, see [VM Types](https://docs.outscale.com/en/userguide/VM-Types.html).
          type: string
      required:
      - VmId
      type: object
    UpdateVmResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        Vm:
          $ref: '#/components/schemas/Vm'
      type: object
    UpdateVmTemplateRequest:
      additionalProperties: false
      properties:
        Description:
          description: A new description for the VM template.
          type: string
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        Tags:
          description: New tags for your VM template.
          items:
            $ref: '#/components/schemas/ResourceTag'
          type: array
        VmTemplateId:
          description: The ID of the VM template you want to update.
          type: string
        VmTemplateName:
          description: A new name for your VM template.
          type: string
      required:
      - VmTemplateId
      type: object
    UpdateVmTemplateResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        VmTemplate:
          $ref: '#/components/schemas/VmTemplate'
      type: object
    UpdateVolumeRequest:
      additionalProperties: false
      properties:
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        Iops:
          description: |-
            **Cold volume**: the new number of I/O operations per second (IOPS). This parameter can be specified only if you update an `io1` volume or if you change the type of the volume for an `io1`. This modification is instantaneous. <br />
            **Hot volume**: the new number of I/O operations per second (IOPS). This parameter can be specified only if you update an `io1` volume. This modification is not instantaneous. <br /><br />
            The maximum number of IOPS allowed for `io1` volumes is `13000` with a maximum performance ratio of 300 IOPS per gibibyte.
          type: integer
        Size:
          description: |-
            **Cold volume**: the new size of the volume, in gibibytes (GiB). This value must be equal to or greater than the current size of the volume. This modification is not instantaneous. <br />
            **Hot volume**: you cannot change the size of a hot volume.
          type: integer
        VolumeId:
          description: The ID of the volume you want to update.
          type: string
        VolumeType:
          description: |-
            **Cold volume**: the new type of the volume (`standard` \| `io1` \| `gp2`). This modification is instantaneous. If you update to an `io1` volume, you must also specify the `Iops` parameter.<br />
            **Hot volume**: you cannot change the type of a hot volume.
          type: string
      required:
      - VolumeId
      type: object
    UpdateVolumeResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        Volume:
          $ref: '#/components/schemas/Volume'
      type: object
    UpdateVpnConnectionRequest:
      additionalProperties: false
      properties:
        ClientGatewayId:
          description: The ID of the client gateway.
          type: string
        DryRun:
          description: If true, checks whether you have the required permissions to perform the action.
          type: boolean
        VirtualGatewayId:
          description: The ID of the virtual gateway.
          type: string
        VpnConnectionId:
          description: The ID of the VPN connection you want to modify.
          type: string
        VpnOptions:
          $ref: '#/components/schemas/VpnOptions'
      required:
      - VpnConnectionId
      type: object
    UpdateVpnConnectionResponse:
      additionalProperties: false
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        VpnConnection:
          $ref: '#/components/schemas/VpnConnection'
      type: object
    User:
      additionalProperties: false
      description: Information about the EIM user.
      properties:
        CreationDate:
          description: The date and time (UTC) of creation of the EIM user.
          format: date-time
          type: string
        LastModificationDate:
          description: The date and time (UTC) of the last modification of the EIM user.
          format: date-time
          type: string
        OutscaleLoginAllowed:
          description: Whether the user is allowed to log in to Cockpit v2 using its Outscale credentials when identity federation is activated.
          type: boolean
        Path:
          description: The path to the EIM user.
          type: string
        UserEmail:
          description: The email address of the EIM user.
          type: string
        UserId:
          description: The ID of the EIM user.
          type: string
        UserName:
          description: The name of the EIM user.
          type: string
      type: object
    UserGroup:
      additionalProperties: false
      description: Information about the user group.
      properties:
        CreationDate:
          description: The date and time (UTC) of creation of the user group.
          format: date-time
          type: string
        LastModificationDate:
          description: The date and time (UTC) of the last modification of the user group.
          format: date-time
          type: string
        Name:
          description: The name of the user group.
          type: string
        Orn:
          description: The Outscale Resource Name (ORN) of the user group. For more information, see [Resource Identifiers](https://docs.outscale.com/en/userguide/Resource-Identifiers.html).
          type: string
        Path:
          description: The path to the user group.
          type: string
        UserGroupId:
          description: The ID of the user group.
          type: string
      type: object
    VgwTelemetry:
      additionalProperties: false
      description: Information about the current state of a VPN tunnel.
      properties:
        AcceptedRouteCount:
          description: The number of routes accepted through BGP (Border Gateway Protocol) route exchanges.
          type: integer
        LastStateChangeDate:
          description: The date and time (UTC) of the latest state update.
          format: date-time
          type: string
        OutsideIpAddress:
          description: The IP on the OUTSCALE side of the tunnel.
          type: string
        State:
          description: The state of the IPSEC tunnel (`UP` \| `DOWN`).
          type: string
        StateDescription:
          description: A description of the current state of the tunnel.
          type: string
      type: object
    VirtualGateway:
      additionalProperties: false
      description: Information about the virtual gateway.
      properties:
        ConnectionType:
          description: The type of VPN connection supported by the virtual gateway (always `ipsec.1`).
          type: string
        NetToVirtualGatewayLinks:
          description: The Net to which the virtual gateway is attached.
          items:
            $ref: '#/components/schemas/NetToVirtualGatewayLink'
          type: array
        State:
          description: The state of the virtual gateway (`pending` \| `available` \| `deleting` \| `deleted`).
          type: string
        Tags:
          description: One or more tags associated with the virtual gateway.
          items:
            $ref: '#/components/schemas/ResourceTag'
          type: array
        VirtualGatewayId:
          description: The ID of the virtual gateway.
          type: string
      type: object
    Vm:
      additionalProperties: false
      description: Information about the VM.
      properties:
        ActionsOnNextBoot:
          $ref: '#/components/schemas/ActionsOnNextBoot'
        Architecture:
          description: The architecture of the VM (`i386` \| `x86_64`).
          type: string
        BlockDeviceMappings:
          description: The block device mapping of the VM.
          items:
            $ref: '#/components/schemas/BlockDeviceMappingCreated'
          type: array
        BootMode:
          $ref: '#/components/schemas/BootMode'
        BsuOptimized:
          description: This parameter is not available. It is present in our API for the sake of historical compatibility with AWS.
          type: boolean
        ClientToken:
          description: The idempotency token provided when launching the VM.
          type: string
        CreationDate:
          description: The date and time (UTC) at which the VM was created.
          format: date-time
          type: string
        DeletionProtection:
          description: If true, you cannot delete the VM unless you change this parameter back to false.
          type: boolean
        Hypervisor:
          description: The hypervisor type of the VMs (`ovm` \| `xen`).
          type: string
        ImageId:
          description: The ID of the OMI used to create the VM.
          type: string
        IsSourceDestChecked:
          description: (Net only) If true, the source/destination check is enabled. If false, it is disabled.
          type: boolean
        KeypairName:
          description: The name of the keypair used when launching the VM.
          type: string
        LaunchNumber:
          description: The number for the VM when launching a group of several VMs (for example, `0`, `1`, `2`, and so on).
          type: integer
        NestedVirtualization:
          description: If true, nested virtualization is enabled. If false, it is disabled.
          type: boolean
        NetId:
          description: The ID of the Net in which the VM is running.
          type: string
        Nics:
          description: (Net only) The network interface cards (NICs) the VMs are attached to.
          items:
            $ref: '#/components/schemas/NicLight'
          type: array
        OsFamily:
          description: Indicates the operating system (OS) of the VM.
          type: string
        Performance:
          description: The performance of the VM.
          type: string
        Placement:
          $ref: '#/components/schemas/Placement'
        PrivateDnsName:
          description: The name of the private DNS.
          type: string
        PrivateIp:
          description: The primary private IP of the VM.
          type: string
        ProductCodes:
          description: The product codes associated with the OMI used to create the VM.
          items:
            type: string
          type: array
        PublicDnsName:
          description: The name of the public DNS.
          type: string
        PublicIp:
          description: The public IP of the VM.
          type: string
        ReservationId:
          description: The reservation ID of the VM.
          type: string
        RootDeviceName:
          description: The name of the root device for the VM (for example, `/dev/sda1`).
          type: string
        RootDeviceType:
          description: The type of root device used by the VM (always `bsu`).
          type: string
        SecurityGroups:
          description: One or more security groups associated with the VM.
          items:
            $ref: '#/components/schemas/SecurityGroupLight'
          type: array
        State:
          description: The state of the VM (`pending` \| `running` \| `stopping` \| `stopped` \| `shutting-down` \| `terminated` \| `quarantine`).
          type: string
        StateReason:
          description: The reason explaining the current state of the VM.
          type: string
        SubnetId:
          description: The ID of the Subnet for the VM.
          type: string
        Tags:
          description: One or more tags associated with the VM.
          items:
            $ref: '#/components/schemas/ResourceTag'
          type: array
        UserData:
          description: The Base64-encoded MIME user data.
          type: string
        VmId:
          description: The ID of the VM.
          type: string
        VmInitiatedShutdownBehavior:
          description: The VM behavior when you stop it. If set to `stop`, the VM stops. If set to `restart`, the VM stops then automatically restarts. If set to `terminate`, the VM stops and is deleted.
          type: string
        VmType:
          description: The type of VM. For more information, see [VM Types](https://docs.outscale.com/en/userguide/VM-Types.html).
          type: string
      type: object
    VmGroup:
      additionalProperties: false
      description: Information about the VM group.
      properties:
        CreationDate:
          description: The date and time (UTC) at which the VM group was created.
          format: date-time
          type: string
        Description:
          description: The description of the VM group.
          type: string
        PositioningStrategy:
          description: The positioning strategy of the VMs on hypervisors. If set to `no-strategy`, TINA determines the most adequate position for the VMs. If set to `attract`, the VMs are deployed on the same hypervisor, which improves network performance. If set to `repulse`, the VMs are deployed on a different hypervisor, which improves fault tolerance.
          enum:
          - attract
          - no-strategy
          - repulse
          type: string
        SecurityGroupIds:
          description: One or more IDs of security groups for the VM group.
          items:
            type: string
          type: array
        State:
          description: The state of the VM group.
          enum:
          - available
          - deleted
          - deleting
          - pending
          - scaling down
          - scaling up
          type: string
        SubnetId:
          description: The ID of the Subnet for the VM group.
          type: string
        Tags:
          description: One or more tags associated with the VM group.
          items:
            $ref: '#/components/schemas/ResourceTag'
          type: array
        VmCount:
          description: The number of VMs in the VM group.
          type: integer
        VmGroupId:
          description: The ID of the VM group.
          type: string
        VmGroupName:
          description: The name of the VM group.
          type: string
        VmIds:
          description: The IDs of the VMs in the VM group.
          items:
            type: string
          type: array
        VmTemplateId:
          description: The ID of the VM template used by the VM group.
          type: string
      type: object
    VmState:
      additionalProperties: false
      description: Information about the state of the VM.
      properties:
        CurrentState:
          description: The current state of the VM (`InService` \| `OutOfService` \| `Unknown`).
          type: string
        PreviousState:
          description: The previous state of the VM (`InService` \| `OutOfService` \| `Unknown`).
          type: string
        VmId:
          description: The ID of the VM.
          type: string
      type: object
    VmStates:
      additionalProperties: false
      description: Information about the states of the VMs.
      properties:
        MaintenanceEvents:
          description: One or more scheduled events associated with the VM.
          items:
            $ref: '#/components/schemas/MaintenanceEvent'
          type: array
        SubregionName:
          description: The name of the Subregion of the VM.
          type: string
        VmId:
          description: The ID of the VM.
          type: string
        VmState:
          description: The state of the VM (`pending` \| `running` \| `stopping` \| `stopped` \| `shutting-down` \| `terminated` \| `quarantine`).
          type: string
      type: object
    VmTemplate:
      additionalProperties: false
      description: Information about the VM template.
      properties:
        CpuCores:
          description: The number of vCores.
          type: integer
        CpuGeneration:
          description: The processor generation.
          type: string
        CpuPerformance:
          description: The performance of the VMs.
          enum:
          - medium
          - high
          - highest
          type: string
        CreationDate:
          description: The date and time (UTC) at which the VM was created.
          format: date-time
          type: string
        Description:
          description: The description of the VM template.
          type: string
        ImageId:
          description: The ID of the OMI.
          type: string
        KeypairName:
          description: The name of the keypair.
          type: string
        Ram:
          description: The amount of RAM.
          type: integer
        Tags:
          description: One or more tags associated with the VM template.
          items:
            $ref: '#/components/schemas/ResourceTag'
          type: array
        VmTemplateId:
          description: The ID of the VM template.
          type: string
        VmTemplateName:
          description: The name of the VM template.
          type: string
      required:
      - CpuCores
      - CpuGeneration
      - ImageId
      - Ram
      - VmTemplateId
      - VmTemplateName
      type: object
    VmType:
      additionalProperties: false
      description: Information about the VM type.
      properties:
        BsuOptimized:
          description: This parameter is not available. It is present in our API for the sake of historical compatibility with AWS.
          type: boolean
        EphemeralsType:
          description: The type of ephemeral storage disk.
          type: string
        Eth:
          description: The number of Ethernet interface available.
          type: integer
        Gpu:
          description: The number of GPU available.
          type: integer
        MaxPrivateIps:
          description: The maximum number of private IPs per network interface card (NIC).
          type: integer
        MemorySize:
          description: The amount of memory, in gibibytes.
          format: float
          type: number
        VcoreCount:
          description: The number of vCores.
          type: integer
        VmTypeName:
          description: The name of the VM type.
          type: string
        VolumeCount:
          description: The maximum number of ephemeral storage disks.
          type: integer
        VolumeSize:
          description: The size of one ephemeral storage disk, in gibibytes (GiB).
          type: integer
      type: object
    Volume:
      additionalProperties: false
      description: Information about the volume.
      properties:
        ClientToken:
          description: The idempotency token provided when creating the volume.
          type: string
        CreationDate:
          description: The date and time (UTC) at which the volume was created.
          format: date-time
          type: string
        Iops:
          description: |-
            The number of I/O operations per second (IOPS):<br />
            - For `io1` volumes, the number of provisioned IOPS<br />
            - For `gp2` volumes, the baseline performance of the volume
          type: integer
        LinkedVolumes:
          description: Information about your volume attachment.
          items:
            $ref: '#/components/schemas/LinkedVolume'
          type: array
        Size:
          description: The size of the volume, in gibibytes (GiB).
          type: integer
        SnapshotId:
          description: The snapshot from which the volume was created.
          type: string
        State:
          description: The state of the volume (`creating` \| `available` \| `in-use` \| `deleting` \| `error`).
          type: string
        SubregionName:
          description: The Subregion in which the volume was created.
          type: string
        Tags:
          description: One or more tags associated with the volume.
          items:
            $ref: '#/components/schemas/ResourceTag'
          type: array
        VolumeId:
          description: The ID of the volume.
          type: string
        VolumeType:
          description: The type of the volume (`standard` \| `gp2` \| `io1`).
          type: string
      type: object
    VpnConnection:
      additionalProperties: false
      description: Information about a VPN connection.
      properties:
        ClientGatewayConfiguration:
          description: Example configuration for the client gateway.
          type: string
        ClientGatewayId:
          description: The ID of the client gateway used on the client end of the connection.
          type: string
        ConnectionType:
          description: The type of VPN connection (always `ipsec.1`).
          type: string
        Routes:
          description: Information about one or more static routes associated with the VPN connection, if any.
          items:
            $ref: '#/components/schemas/RouteLight'
          type: array
        State:
          description: The state of the VPN connection (`pending` \| `available` \| `deleting` \| `deleted`).
          type: string
        StaticRoutesOnly:
          description: If false, the VPN connection uses dynamic routing with Border Gateway Protocol (BGP). If true, routing is controlled using static routes. For more information about how to create and delete static routes, see [CreateVpnConnectionRoute](#createvpnconnectionroute) and [DeleteVpnConnectionRoute](#deletevpnconnectionroute).
          type: boolean
        Tags:
          description: One or more tags associated with the VPN connection.
          items:
            $ref: '#/components/schemas/ResourceTag'
          type: array
        VgwTelemetries:
          description: Information about the current state of one or more of the VPN tunnels.
          items:
            $ref: '#/components/schemas/VgwTelemetry'
          type: array
        VirtualGatewayId:
          description: The ID of the virtual gateway used on the OUTSCALE end of the connection.
          type: string
        VpnConnectionId:
          description: The ID of the VPN connection.
          type: string
        VpnOptions:
          $ref: '#/components/schemas/VpnOptions'
      type: object
    VpnOptions:
      additionalProperties: false
      description: Information about the VPN options.
      properties:
        Phase1Options:
          $ref: '#/components/schemas/Phase1Options'
        Phase2Options:
          $ref: '#/components/schemas/Phase2Options'
        TunnelInsideIpRange:
          description: The range of inside IPs for the tunnel. This must be a /30 CIDR block from the 169.254.254.0/24 range.
          type: string
      type: object
    With:
      additionalProperties: false
      description: The information to display in each returned log.
      properties:
        AccountId:
          default: true
          description: If true, the account ID is displayed.
          type: boolean
        CallDuration:
          default: true
          description: If true, the duration of the call is displayed.
          type: boolean
        QueryAccessKey:
          default: true
          description: If true, the access key is displayed.
          type: boolean
        QueryApiName:
          default: true
          description: If true, the name of the API is displayed.
          type: boolean
        QueryApiVersion:
          default: true
          description: If true, the version of the API is displayed.
          type: boolean
        QueryCallName:
          default: true
          description: If true, the name of the call is displayed.
          type: boolean
        QueryDate:
          default: true
          description: If true, the date of the call is displayed.
          type: boolean
        QueryHeaderRaw:
          default: true
          description: If true, the raw header of the HTTP request is displayed.
          type: boolean
        QueryHeaderSize:
          default: true
          description: If true, the size of the raw header of the HTTP request is displayed.
          type: boolean
        QueryIpAddress:
          default: true
          description: If true, the IP is displayed.
          type: boolean
        QueryPayloadRaw:
          default: true
          description: If true, the raw payload of the HTTP request is displayed.
          type: boolean
        QueryPayloadSize:
          default: true
          description: If true, the size of the raw payload of the HTTP request is displayed.
          type: boolean
        QueryUserAgent:
          default: true
          description: If true, the user agent of the HTTP request is displayed.
          type: boolean
        RequestId:
          default: true
          description: If true, the request ID is displayed.
          type: boolean
        ResponseSize:
          default: true
          description: If true, the size of the response is displayed.
          type: boolean
        ResponseStatusCode:
          default: true
          description: If true, the HTTP status code of the response is displayed.
          type: boolean
      type: object
  securitySchemes:
    ApiKeyAuth:
      description: |-
        With this authentication scheme, you must use an access key to sign your API requests. For more information, see [About Signatures of API Requests](https://docs.outscale.com/en/userguide/About-Signatures-of-API-Requests.html).<br />
          * In addition to your access key, you can configure API access rules with Certificate Authorities (CAs), requiring you to provide a certificate to perform actions. In that case, you can bypass systematically providing a certificate by activating a trusted session. For more information, see the [UpdateApiAccessPolicy](#updateapiaccesspolicy) method and [About Your API Access Policy](https://docs.outscale.com/en/userguide/About-Your-API-Access-Policy.html).
      in: header
      name: Authorization
      type: apiKey
    ApiKeyAuthSec:
      description: |-
        With this authentication scheme, you must use an access key to sign your API requests. For more information, see [About Signatures of API Requests](https://docs.outscale.com/en/userguide/About-Signatures-of-API-Requests.html).<br />
          * In addition to your access key, if you have configured API access rules with a Certificate Authority (CA), you cannot bypass systematically providing a certificate even if you activate a trusted session. For more information, see [About Your API Access Policy](https://docs.outscale.com/en/userguide/About-Your-API-Access-Policy.html).
      in: header
      name: Authorization
      type: apiKey
    BasicAuth:
      description: |-
        With this authentication scheme, you must specify the following headers in your API request:<br />
          * `Authorization: Basic XXXX`, where `XXXX` is your `email:password` encoded in Base64
          * `X-Osc-Date` in the `YYYYMMDDTHHMMSSZ` format
          * Example with Curl: ``$ curl -X POST https://api.eu-west-2.outscale.com/api/v1/ReadAccessKeys -H &quot;Authorization: Basic `echo -n &quot;MYEMAIL:MYPASSWORD&quot; | base64`&quot; -H &quot;X-Osc-Date: `TZ=GMT date &quot;+%Y%m%dT%H%M%SZ&quot;`&quot;``
          * In addition to your email and password combination, if you have configured API access rules with a Certificate Authority (CA), you cannot bypass systematically providing a certificate even if you activate a trusted session. For more information, see [About Your API Access Policy](https://docs.outscale.com/en/userguide/About-Your-API-Access-Policy.html).
      scheme: basic
      type: http
info:
  contact:
    email: support@outscale.com
  description: |-
    Welcome to the OUTSCALE API documentation.<br />
    The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br />
    Throttling: To protect against overloads, the number of identical requests allowed in a given time period is limited.<br />
    Brute force: To protect against brute force attacks, the number of failed authentication attempts in a given time period is limited.<br /><br />
    Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but there are [differences in resource names](https://docs.outscale.com/en/userguide/About-the-APIs.html) between AWS and the OUTSCALE API.<br />
    You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.<br /><br />
    An OpenAPI description of the OUTSCALE API is also available in this [GitHub repository](https://github.com/outscale/osc-api).<br />
    # Authentication Schemes
    ### Access Key/Secret Key
    The main way to authenticate your requests to the OUTSCALE API is to use an access key and a secret key.<br />
    The mechanism behind this is based on AWS Signature Version 4, whose technical implementation details are described in [Signature of API Requests](https://docs.outscale.com/en/userguide/Signature-of-API-Requests.html).<br /><br />
    In practice, the way to specify your access key and secret key depends on the tool or SDK you want to use to interact with the API.<br />

    > For example, if you use OSC CLI:
    > 1. You need to create an **~/.osc/config.json** file to specify your access key, secret key, and the Region of your account.
    > 2. You then specify the `--profile` option when executing OSC CLI commands.
    >
    > For more information, see [Installing and Configuring OSC CLI](https://docs.outscale.com/en/userguide/Installing-and-Configuring-OSC-CLI.html).

    See the code samples in each section of this documentation for specific examples in different programming languages.<br />
    For more information about access keys, see [About Access Keys](https://docs.outscale.com/en/userguide/About-Access-Keys.html).

    > If you try to sign requests with an invalid access key four times in a row, further authentication attempts will be prevented for 1 minute. This lockout time increases 1 minute every four failed attempts, for up to 10 minutes.

    ### Login/Password
    For certain API actions, you can also use basic authentication with the login (email address) and password of your TINA account.<br />
    This is useful only in special circumstances, for example if you do not know your access key/secret key and want to retrieve them programmatically.<br />
    In most cases, however, you can use the Cockpit web interface to retrieve them.<br />

    > For example, if you use OSC CLI:
    > 1. You need to create an **~/.osc/config.json** file to specify the Region of your account, but you leave the access key value and secret key value empty (`&quot;&quot;`).
    > 2. You then specify the `--profile`, `--authentication-method`, `--login`, and `--password` options when executing OSC CLI commands.

    See the code samples in each section of this documentation for specific examples in different programming languages.

    > If you try to sign requests with an invalid password four times in a row, further authentication attempts will be prevented for 1 minute. This lockout time increases 1 minute every four failed attempts, for up to 10 minutes.

    ### No Authentication
    A few API actions do not require any authentication. They are indicated as such in this documentation.<br />
    ### Other Security Mechanisms
    In parallel with the authentication schemes, you can add other security mechanisms to your OUTSCALE account, for example to restrict API requests by IP or other criteria.<br />
    For more information, see [Managing Your API Accesses](https://docs.outscale.com/en/userguide/Managing-Your-API-Accesses.html).
    # Pagination Tutorial
    You can learn more about the pagination methods for read calls in the dedicated [pagination tutorial](https://docs.outscale.com/en/userguide/Tutorial-Paginating-an-API-Request.html).
    # Error Codes Reference
    You can learn more about errors returned by the API in the dedicated [errors page](api-errors.html).
  license:
    name: BSD 3 Clause
    url: https://opensource.org/licenses/BSD-3-Clause
  termsOfService: https://en.outscale.com/terms-of-service/
  title: 3DS OUTSCALE API
  version: 1.35.4
  x-osc-api-osc-billing: 1.35.0
  x-osc-api-osc-cloud-vision: 1.35.0
  x-osc-api-osc-core-iaas: 1.35.4
  x-osc-api-type: external
openapi: 3.0.0
paths:
  /AcceptNetPeering:
    post:
      description: |-
        Accepts a Net peering request.<br />
        To accept this request, you must be the owner of the peer Net. If you do not accept the request within 7 days, the state of the Net peering becomes `expired`.<br /><br />

        **[NOTE]**<br />
        A peering connection between two Nets works both ways. Therefore, when an A-to-B peering connection is accepted, any pending B-to-A peering connection is automatically rejected as redundant.
      operationId: AcceptNetPeering
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AcceptNetPeeringRequest'
            examples:
              ex1:
                value:
                  NetPeeringId: pcx-12345678
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AcceptNetPeeringResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    NetPeering:
                      Tags: []
                      State:
                        Name: active
                        Message: Active
                      AccepterNet:
                        NetId: vpc-12345678
                        IpRange: 172.16.0.0/16
                        AccountId: '123456789012'
                      ExpirationDate: '2063-04-05T00:00:00.000Z'
                      SourceNet:
                        NetId: vpc-12345678
                        IpRange: 10.0.0.0/16
                        AccountId: '123456789012'
                      NetPeeringId: pcx-12345678
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 409 response (Conflict).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - NetPeering
  /AddUserToUserGroup:
    post:
      description: Adds a user to a specified group.
      operationId: AddUserToUserGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddUserToUserGroupRequest'
            examples:
              ex1:
                value:
                  UserGroupName: example-usergroup
                  UserGroupPath: /example/
                  UserName: example-user
                  UserPath: /example/
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddUserToUserGroupResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
      tags:
      - UserGroup
  /CheckAuthentication:
    post:
      description: Validates the authenticity of the account.
      operationId: CheckAuthentication
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CheckAuthenticationRequest'
            examples:
              ex1:
                value:
                  Login: example@example.com
                  Password: $OSC_PASSWORD
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckAuthenticationResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
      tags:
      - Account
  /CreateAccessKey:
    post:
      description: |-
        Creates an access key for either your root account or an EIM user. The new key is automatically set to `ACTIVE`.<br /><br />
        For more information, see [About Access Keys](https://docs.outscale.com/en/userguide/About-Access-Keys.html).
      operationId: CreateAccessKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAccessKeyRequest'
            examples:
              ex1:
                value:
                  ExpirationDate: '2063-04-05'
                  Tag: Group1
                  UserName: example-user
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateAccessKeyResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    AccessKey:
                      State: ACTIVE
                      AccessKeyId: ABCDEFGHIJ0123456789
                      CreationDate: 2010-10-01T12:34:56.789+0000
                      ExpirationDate: 2063-04-05T00:00:00.000+0000
                      SecretKey: XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
                      LastModificationDate: 2010-10-01T12:34:56.789+0000
                      Tag: Group1
          description: The HTTP 200 response (OK).
      security:
      - ApiKeyAuthSec: []
      - BasicAuth: []
      tags:
      - AccessKey
  /CreateAccount:
    post:
      description: |-
        Creates an OUTSCALE account.<br /><br />

        **[IMPORTANT]**<br />
        * You need OUTSCALE credentials and the appropriate quotas to create an account via API. To get quotas, you can send an email to sales@outscale.com.<br />
        * If you want to pass a numeral value as a string instead of an integer, you must wrap your string in additional quotes (for example, `'&quot;92000&quot;'`).

        For more information, see [About Your Account](https://docs.outscale.com/en/userguide/About-Your-Account.html).
      operationId: CreateAccount
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAccountRequest'
            examples:
              ex1:
                value:
                  City: SAINT-CLOUD
                  CompanyName: EXAMPLE SAS
                  Country: FRANCE
                  CustomerId: '87654321'
                  Email: example@example.com
                  FirstName: JEAN
                  LastName: DUPONT
                  ZipCode: '92210'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateAccountResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    Account:
                      ZipCode: '92210'
                      CompanyName: EXAMPLE SAS
                      FirstName: JEAN
                      City: SAINT-CLOUD
                      Country: FRANCE
                      LastName: DUPONT
                      AccountId: '123456789012'
                      Email: example@example.com
          description: The HTTP 200 response (OK).
      tags:
      - Account
  /CreateApiAccessRule:
    post:
      description: |-
        Creates a rule to allow access to the API from your account.<br />
        You need to specify at least the `CaIds` or the `IpRanges` parameter.<br /><br />

        **[NOTE]**<br />
        By default, your account has a set of rules allowing global access, that you can delete.<br /><br />
        For more information, see [About API Access Rules](https://docs.outscale.com/en/userguide/About-API-Access-Rules.html).
      operationId: CreateApiAccessRule
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateApiAccessRuleRequest'
            examples:
              ex1:
                summary: Creating an API access rule based on IPs
                value:
                  IpRanges:
                  - 192.0.2.0
                  - 198.51.100.0/24
                  Description: Basic API Access Rule with IPs
              ex2:
                summary: Creating an API access rule based on IPs and Certificate Authority (CA)
                value:
                  IpRanges:
                  - 192.0.2.0
                  - 198.51.100.0/24
                  CaIds:
                  - ca-fedcba0987654321fedcba0987654321
                  Description: API Access Rule with IPs and CA
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateApiAccessRuleResponse'
              examples:
                ex1:
                  summary: Creating an API access rule based on IPs
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    ApiAccessRule:
                      IpRanges:
                      - 192.0.2.0
                      - 198.51.100.0/24
                      ApiAccessRuleId: aar-fedcba0987654321fedcba0987654321
                      CaIds: []
                      Cns: []
                      Description: Basic API Access Rule with IPs
                ex2:
                  summary: Creating an API access rule based on IPs and Certificate Authority (CA)
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    ApiAccessRule:
                      IpRanges:
                      - 192.0.2.0
                      - 198.51.100.0/24
                      ApiAccessRuleId: aar-fedcba0987654321fedcba0987654321
                      CaIds:
                      - ca-fedcba0987654321fedcba0987654321
                      Cns: []
                      Description: API Access Rule with IPs and CA
          description: The HTTP 200 response (OK).
      security:
      - ApiKeyAuthSec: []
      - BasicAuth: []
      tags:
      - ApiAccessRule
  /CreateCa:
    post:
      description: |-
        Creates a Client Certificate Authority (CA).<br /><br />
        For more information, see [About API Access Rules](https://docs.outscale.com/en/userguide/About-API-Access-Rules.html).
      operationId: CreateCa
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCaRequest'
            examples:
              ex1:
                value:
                  CaPem: XXXX
                  Description: CA example
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateCaResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    Ca:
                      Description: CA example
                      CaId: ca-fedcba0987654321fedcba0987654321
                      CaFingerprint: 1234567890abcdef1234567890abcdef12345678
          description: The HTTP 200 response (OK).
      security:
      - ApiKeyAuthSec: []
      - BasicAuth: []
      tags:
      - Ca
  /CreateClientGateway:
    post:
      description: |-
        Provides information about your client gateway.<br />
        This action registers information to identify the client gateway that you deployed in your network.<br />
        To open a tunnel to the client gateway, you must provide the communication protocol type, the fixed public IP of the gateway, and an Autonomous System Number (ASN).<br /><br />
        For more information, see [About Client Gateways](https://docs.outscale.com/en/userguide/About-Client-Gateways.html).
      operationId: CreateClientGateway
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateClientGatewayRequest'
            examples:
              ex1:
                value:
                  ConnectionType: ipsec.1
                  PublicIp: 192.0.2.0
                  BgpAsn: 65000
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateClientGatewayResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    ClientGateway:
                      State: available
                      BgpAsn: 65000
                      Tags: []
                      ClientGatewayId: cgw-12345678
                      ConnectionType: ipsec.1
                      PublicIp: 192.0.2.0
          description: The HTTP 200 response (OK).
      tags:
      - ClientGateway
  /CreateDedicatedGroup:
    post:
      description: |-
        > [WARNING]<br />
        > This feature is currently in beta.<br />

        Creates a dedicated group for virtual machines (VMs).<br /><br />
        For more information, see [About Dedicated Groups](https://docs.outscale.com/en/userguide/About-Dedicated-Groups.html).
      operationId: CreateDedicatedGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDedicatedGroupRequest'
            examples:
              ex1:
                value:
                  CpuGeneration: 4
                  Name: dedicated-group-example
                  SubregionName: eu-west-2a
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateDedicatedGroupResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    DedicatedGroup:
                      VmIds: []
                      NetIds: []
                      AccountId: '123456789012'
                      CpuGeneration: 4
                      Name: dedicated-group-example
                      SubregionName: eu-west-2a
                      DedicatedGroupId: ded-12345678
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - DedicatedGroup
  /CreateDhcpOptions:
    post:
      description: |-
        Creates a set of DHCP options, that you can then associate with a Net using the [UpdateNet](#updatenet) method.<br /><br />
        For more information, see [About DHCP Options](https://docs.outscale.com/en/userguide/About-DHCP-Options.html).
      operationId: CreateDhcpOptions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDhcpOptionsRequest'
            examples:
              ex1:
                value:
                  DomainName: example.com
                  DomainNameServers:
                  - 192.0.2.0
                  - 198.51.100.0
                  NtpServers:
                  - 203.0.113.0
                  - 203.0.113.1
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateDhcpOptionsResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    DhcpOptionsSet:
                      Tags: []
                      NtpServers:
                      - 203.0.113.0
                      - 203.0.113.1
                      Default: false
                      DhcpOptionsSetId: dopt-12345678
                      DomainName: example.com
                      DomainNameServers:
                      - 192.0.2.0
                      - 198.51.100.0
          description: The HTTP 200 response (OK).
      tags:
      - DhcpOption
  /CreateDirectLink:
    post:
      description: |-
        Creates a DirectLink between a customer network and a specified DirectLink location.<br /><br />
        For more information, see [About DirectLink](https://docs.outscale.com/en/userguide/About-DirectLink.html).
      operationId: CreateDirectLink
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDirectLinkRequest'
            examples:
              ex1:
                value:
                  Location: PAR1
                  Bandwidth: 1Gbps
                  DirectLinkName: Connection to Outscale
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateDirectLinkResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    DirectLink:
                      AccountId: '123456789012'
                      Bandwidth: 1Gbps
                      DirectLinkId: dxcon-12345678
                      DirectLinkName: Connection to Outscale
                      Location: PAR1
                      RegionName: eu-west-2
                      State: requested
          description: The HTTP 200 response (OK).
      tags:
      - DirectLink
  /CreateDirectLinkInterface:
    post:
      description: |-
        Creates a DirectLink interface.<br />
        DirectLink interfaces enable you to reach one of your Nets through a virtual gateway.<br /><br />
        For more information, see [About DirectLink](https://docs.outscale.com/en/userguide/About-DirectLink.html).
      operationId: CreateDirectLinkInterface
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDirectLinkInterfaceRequest'
            examples:
              ex1:
                value:
                  DirectLinkId: dxcon-12345678
                  DirectLinkInterface:
                    DirectLinkInterfaceName: MyDirectLinkInterface
                    Vlan: 101
                    BgpAsn: 65000
                    BgpKey: tgyn26example
                    OutscalePrivateIp: 172.16.0.4/30
                    ClientPrivateIp: 172.16.0.5/30
                    VirtualGatewayId: vgw-12345678
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateDirectLinkInterfaceResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    DirectLinkInterface:
                      Vlan: 101
                      OutscalePrivateIp: 172.16.0.4/30
                      DirectLinkInterfaceId: dxvif-12345678
                      BgpAsn: 65000
                      AccountId: '123456789012'
                      ClientPrivateIp: 172.16.0.5/30
                      VirtualGatewayId: vgw-12345678
                      DirectLinkInterfaceName: MyDirectLinkInterface
                      DirectLinkId: dxcon-12345678
                      Mtu: 1500
                      State: pending
                      InterfaceType: private
                      Location: PAR1
          description: The HTTP 200 response (OK).
      tags:
      - DirectLinkInterface
  /CreateFlexibleGpu:
    post:
      description: |-
        Allocates a flexible GPU (fGPU) to your account.<br />
        You can then attach this fGPU to a virtual machine (VM).<br /><br />
        For more information, see [About Flexible GPUs](https://docs.outscale.com/en/userguide/About-Flexible-GPUs.html).
      operationId: CreateFlexibleGpu
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFlexibleGpuRequest'
            examples:
              ex1:
                value:
                  ModelName: nvidia-p100
                  Generation: v5
                  SubregionName: eu-west-2a
                  DeleteOnVmDeletion: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateFlexibleGpuResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    FlexibleGpu:
                      SubregionName: eu-west-2a
                      DeleteOnVmDeletion: true
                      Generation: v5
                      ModelName: nvidia-p100
                      State: allocated
                      FlexibleGpuId: fgpu-12345678
          description: The HTTP 200 response (OK).
      tags:
      - FlexibleGpu
  /CreateImage:
    post:
      description: |-
        Creates an OUTSCALE machine image (OMI).<br />
        You can use this method for different use cases:
        * **Creating from a VM**: You create an OMI from one of your virtual machines (VMs).<br>
        * **Copying an OMI**: You copy an existing OMI. The source OMI can be one of your own OMIs, or an OMI owned by another account that has granted you permission via the [UpdateImage](#updateimage) method.<br>
        * **Registering from a snapshot**: You register an OMI from an existing snapshot. The source snapshot can be one of your own snapshots, or a snapshot owned by another account that has granted you permission via the [UpdateSnapshot](#updatesnapshot) method.<br>
        * **Registering from a bucket by using a manifest file**: You register an OMI from the manifest file of an OMI that was exported to an OUTSCALE Object Storage (OOS) bucket. First, the owner of the source OMI must export it to the bucket by using the [CreateImageExportTask](#createimageexporttask) method. Then, they must grant you permission to read the manifest file via a pre-signed URL. For more information, see [Creating a Pre-Signed URL](https://docs.outscale.com/en/userguide/Creating-a-Pre-Signed-URL.html).

        **[TIP]**<br />
        Registering from a bucket enables you to copy an OMI across Regions.

        For more information, see [About OMIs](https://docs.outscale.com/en/userguide/About-OMIs.html).
      operationId: CreateImage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateImageRequest'
            examples:
              ex1:
                summary: Creating from a VM
                value:
                  ImageName: create-image-example
                  VmId: i-12345678
                  NoReboot: true
              ex2:
                summary: Copying an OMI
                value:
                  ImageName: copy-image-example
                  SourceImageId: ami-12345678
                  SourceRegionName: eu-west-2
              ex3:
                summary: Registering from a snapshot
                value:
                  ImageName: register-image-from-snapshot-example
                  BlockDeviceMappings:
                  - DeviceName: /dev/sda1
                    Bsu:
                      SnapshotId: snap-12345678
                      VolumeSize: 120
                      VolumeType: io1
                      Iops: 150
                      DeleteOnVmDeletion: true
                  RootDeviceName: /dev/sda1
              ex4:
                summary: Registering from a bucket by using a manifest file
                value:
                  ImageName: register-image-from-bucket-example
                  FileLocation: https://oos.eu-west-2.outscale.com/BUCKET/KEY?AWSAccessKeyId=ABCDEFGHIJ0123456789&Expires=1493372309&Signature=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateImageResponse'
              examples:
                ex1:
                  summary: Creating from a VM
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    Image:
                      StateComment: {}
                      State: pending
                      RootDeviceType: bsu
                      RootDeviceName: /dev/sda1
                      ProductCodes:
                      - '0001'
                      PermissionsToLaunch:
                        GlobalPermission: false
                        AccountIds: []
                      AccountId: '123456789012'
                      Tags: []
                      Description: ''
                      ImageId: ami-12345678
                      BlockDeviceMappings:
                      - DeviceName: /dev/sda1
                        Bsu:
                          VolumeType: standard
                          DeleteOnVmDeletion: true
                          VolumeSize: 50
                          SnapshotId: snap-12345678
                      BootModes:
                      - legacy
                      ImageType: machine
                      CreationDate: '2010-10-01T12:34:56.789Z'
                      FileLocation: 123456789012/create-image-example
                      Architecture: x86_64
                      ImageName: create-image-example
                ex2:
                  summary: Copying an OMI
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    Image:
                      StateComment: {}
                      State: available
                      RootDeviceType: bsu
                      RootDeviceName: /dev/sda1
                      ProductCodes:
                      - '0001'
                      PermissionsToLaunch:
                        GlobalPermission: false
                        AccountIds: []
                      AccountId: '123456789012'
                      Tags: []
                      Description: ''
                      ImageId: ami-12345678
                      BlockDeviceMappings:
                      - DeviceName: /dev/sda1
                        Bsu:
                          VolumeType: standard
                          DeleteOnVmDeletion: true
                          VolumeSize: 50
                          SnapshotId: snap-12345678
                      BootModes:
                      - legacy
                      ImageType: machine
                      CreationDate: '2010-10-01T12:34:56.789Z'
                      FileLocation: 123456789012/copy-image-example
                      Architecture: x86_64
                      ImageName: copy-image-example
                ex3:
                  summary: Registering from a snapshot
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    Image:
                      StateComment: {}
                      State: available
                      RootDeviceType: bsu
                      RootDeviceName: /dev/sda1
                      ProductCodes:
                      - '0001'
                      PermissionsToLaunch:
                        GlobalPermission: false
                        AccountIds: []
                      AccountId: '123456789012'
                      Tags: []
                      Description: ''
                      ImageId: ami-12345678
                      BlockDeviceMappings:
                      - DeviceName: /dev/sda1
                        Bsu:
                          VolumeType: io1
                          DeleteOnVmDeletion: true
                          VolumeSize: 120
                          Iops: 150
                          SnapshotId: snap-12345678
                      BootModes:
                      - legacy
                      ImageType: machine
                      CreationDate: '2010-10-01T12:34:56.789Z'
                      FileLocation: 123456789012/register-image-from-snapshot-example
                      Architecture: x86_64
                      ImageName: register-image-from-snapshot-example
                ex4:
                  summary: Registering from a bucket by using a manifest file
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    Image:
                      StateComment: {}
                      State: pending
                      RootDeviceType: bsu
                      RootDeviceName: /dev/sda1
                      ProductCodes:
                      - '0001'
                      PermissionsToLaunch:
                        GlobalPermission: false
                        AccountIds: []
                      AccountId: '123456789012'
                      Tags: []
                      Description: ''
                      ImageId: ami-12345678
                      BlockDeviceMappings:
                      - DeviceName: /dev/sda1
                        Bsu:
                          VolumeType: standard
                          DeleteOnVmDeletion: true
                          VolumeSize: 50
                          SnapshotId: snap-12345678
                      BootModes:
                      - legacy
                      ImageType: machine
                      CreationDate: '2010-10-01T12:34:56.789Z'
                      FileLocation: https://oos.eu-west-2.outscale.com/BUCKET/KEY?AWSAccessKeyId=ABCDEFGHIJ0123456789&Expires=1493372309&Signature=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
                      Architecture: x86_64
                      ImageName: register-image-from-bucket-example
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Image
  /CreateImageExportTask:
    post:
      description: |-
        Exports an OUTSCALE machine image (OMI) to an OUTSCALE Object Storage (OOS) bucket.<br />
        This enables you to copy an OMI between accounts in different Regions.<br /><br />
        This action creates the necessary snapshots and manifest file in the bucket. The OMI can then be imported to another account using a pre-signed URL of its manifest file. For more information, see [Creating a Pre-Signed URL](https://docs.outscale.com/en/userguide/Creating-a-Pre-Signed-URL.html).<br /><br />
        To copy an OMI in the same Region, you can also use the [CreateImage](#createimage) method.<br />

        **[IMPORTANT]**<br />
        You cannot export a shared or public OMI, as they do not belong to you. To do so, you must first copy it to your account. The copy then belongs to you and you can export it.<br /><br />
        For more information, see [About OMIs](https://docs.outscale.com/en/userguide/About-OMIs.html).
      operationId: CreateImageExportTask
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateImageExportTaskRequest'
            examples:
              ex1:
                value:
                  ImageId: ami-12345678
                  OsuExport:
                    DiskImageFormat: qcow2
                    OsuBucket: BUCKET
                    OsuPrefix: PREFIX
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateImageExportTaskResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    ImageExportTask:
                      Tags: []
                      ImageId: ami-12345678
                      TaskId: image-export-12345678
                      Comment: Export of image ami-12345678
                      OsuExport:
                        OsuPrefix: PREFIX/ami-12345678/
                        OsuBucket: BUCKET
                        DiskImageFormat: qcow2
                      State: pending/queued
                      Progress: 0
          description: The HTTP 200 response (OK).
      tags:
      - Image
  /CreateInternetService:
    post:
      description: |-
        Creates an internet service you can use with a Net.<br />
        An internet service enables virtual machines (VMs) launched in a Net to connect to the Internet. It allows routing of incoming and outgoing Internet traffic and management of public IP addresses.<br /><br />
        For more information, see [About Internet Services](https://docs.outscale.com/en/userguide/About-Internet-Services.html).
      operationId: CreateInternetService
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateInternetServiceRequest'
            examples:
              ex1:
                value: {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateInternetServiceResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    InternetService:
                      Tags: []
                      InternetServiceId: igw-12345678
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - InternetService
  /CreateKeypair:
    post:
      description: |-
        Creates a keypair to use with your virtual machines (VMs).<br />
        You can use this method in two different ways:
        * **Creating a keypair**: In that case, 3DS OUTSCALE creates a 2048-bit RSA keypair, stores its public key in your account, and returns its private key in the response of the call so that you can save it in a file.<br />
        When you save the returned private key, make sure you replace the `\n` escape sequences with real line breaks.
        * **Importing a keypair created locally**: If you already have a keypair that you have created locally with a third-party tool, you can import its public key in your account. The following types of key can be imported: RSA (2048 bits or preferably 4096 bits), Ed25519, and ECDSA (256 bits, 384 bits, or 521 bits). The following formats can be used: PEM, PKCS8, RFC4716, and OpenSSH.

        For more information, see [About Keypairs](https://docs.outscale.com/en/userguide/About-Keypairs.html).
      operationId: CreateKeypair
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateKeypairRequest'
            examples:
              ex1:
                summary: Creating a keypair
                value:
                  KeypairName: create-keypair-example
              ex2:
                summary: Importing a keypair created locally
                value:
                  KeypairName: import-keypair-example
                  PublicKey: ...
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateKeypairResponse'
              examples:
                ex1:
                  summary: Creating a keypair
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    Keypair:
                      PrivateKey: |-
                        -----BEGIN RSA PRIVATE KEY-----
                        ...
                        -----END RSA PRIVATE KEY-----
                      KeypairType: ssh-rsa
                      KeypairName: create-keypair-example
                      KeypairId: key-abcdef1234567890abcdef1234567890
                      KeypairFingerprint: 11:22:33:44:55:66:77:88:99:00:aa:bb:cc:dd:ee:ff
                ex2:
                  summary: Importing a keypair created locally
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    Keypair:
                      KeypairType: ssh-rsa
                      KeypairName: create-keypair-example
                      KeypairId: key-abcdef1234567890abcdef1234567890
                      KeypairFingerprint: 11:22:33:44:55:66:77:88:99:00:aa:bb:cc:dd:ee:ff
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 409 response (Conflict).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Keypair
  /CreateListenerRule:
    post:
      description: |-
        Creates a rule for traffic redirection for the specified listener. Each rule must have either the `HostNamePattern` or `PathPattern` parameter specified. Rules are treated in priority order, from the highest value to the lowest value.<br />
        Once the rule is created, you need to register backend VMs with it. For more information, see the [RegisterVmsInLoadBalancer](#registervmsinloadbalancer) method.<br /><br />
        For more information, see [About Load Balancers](https://docs.outscale.com/en/userguide/About-Load-Balancers.html).
      operationId: CreateListenerRule
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateListenerRuleRequest'
            examples:
              ex1:
                summary: Creating a listener rule based on a host pattern
                value:
                  Listener:
                    LoadBalancerName: example-lbu
                    LoadBalancerPort: 80
                  ListenerRule:
                    Action: forward
                    HostNamePattern: '*.example.com'
                    ListenerRuleName: example-listener-rule
                    Priority: 10
                  VmIds:
                  - i-12345678
              ex2:
                summary: Creating a listener rule based on a path pattern
                value:
                  Listener:
                    LoadBalancerName: example-lbu
                    LoadBalancerPort: 80
                  ListenerRule:
                    Action: forward
                    PathPattern: /docs/*
                    ListenerRuleName: example-listener-rule
                    Priority: 100
                  VmIds:
                  - i-12345678
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateListenerRuleResponse'
              examples:
                ex1:
                  summary: Creating a listener rule based on a host pattern
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    ListenerRule:
                      Priority: 10
                      VmIds:
                      - i-12345678
                      ListenerRuleName: example-listener-rule
                      Action: forward
                      ListenerId: 123456
                      HostNamePattern: '*.example.com'
                      ListenerRuleId: 1234
                ex2:
                  summary: Creating a listener rule based on a path pattern
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    ListenerRule:
                      Priority: 100
                      VmIds:
                      - i-12345678
                      ListenerRuleName: example-listener-rule
                      Action: forward
                      ListenerId: 123456
                      PathPattern: /docs/*
                      ListenerRuleId: 1234
          description: The HTTP 200 response (OK).
      tags:
      - Listener
  /CreateLoadBalancer:
    post:
      description: |-
        Creates a load balancer.<br />
        The load balancer is created with a unique Domain Name Service (DNS) name. It receives the incoming traffic and routes it to its registered virtual machines (VMs).<br />
        By default, this action creates an Internet-facing load balancer, resolving to public IPs. To create an internal load balancer in a Net, resolving to private IPs, use the `LoadBalancerType` parameter.<br />
        You must specify either the `Subnets` or the `SubregionNames` parameters.<br /><br />
        For more information, see [About Load Balancers](https://docs.outscale.com/en/userguide/About-Load-Balancers.html).
      operationId: CreateLoadBalancer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLoadBalancerRequest'
            examples:
              ex1:
                summary: Creating an internal load balancer in a Net
                value:
                  LoadBalancerName: private-lb-example
                  Listeners:
                  - BackendPort: 80
                    BackendProtocol: TCP
                    LoadBalancerPort: 80
                    LoadBalancerProtocol: TCP
                  Subnets:
                  - subnet-12345678
                  SecurityGroups:
                  - sg-12345678
                  LoadBalancerType: internal
              ex2:
                summary: Creating an internet-facing load balancer in a Net
                value:
                  LoadBalancerName: private-lb-example
                  Listeners:
                  - BackendPort: 80
                    BackendProtocol: HTTP
                    LoadBalancerPort: 443
                    LoadBalancerProtocol: HTTPS
                    ServerCertificateId: orn:ows:idauth::012345678910:server-certificate/Certificate
                  Subnets:
                  - subnet-12345678
                  SecurityGroups:
                  - sg-12345678
                  LoadBalancerType: internet-facing
                  PublicIp: 192.0.2.0
              ex3:
                summary: Creating an internet-facing load balancer in the public Cloud
                value:
                  LoadBalancerName: public-lb-example
                  SubregionNames:
                  - eu-west-2a
                  Listeners:
                  - BackendPort: 8080
                    BackendProtocol: HTTP
                    LoadBalancerPort: 8080
                    LoadBalancerProtocol: HTTP
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateLoadBalancerResponse'
              examples:
                ex1:
                  summary: Creating an internal load balancer in a Net
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    LoadBalancer:
                      Tags: []
                      SourceSecurityGroup:
                        SecurityGroupName: security-group-example
                        SecurityGroupAccountId: '123456789012'
                      SecuredCookies: false
                      Subnets:
                      - subnet-12345678
                      NetId: vpc-12345678
                      BackendVmIds: []
                      ApplicationStickyCookiePolicies: []
                      SecurityGroups:
                      - sg-12345678
                      LoadBalancerType: internal
                      AccessLog:
                        PublicationInterval: 60
                        IsEnabled: false
                      DnsName: internal-private-lb-example.123456789.eu-west-2.lbu.outscale.com
                      HealthCheck:
                        UnhealthyThreshold: 2
                        Timeout: 5
                        CheckInterval: 30
                        Protocol: TCP
                        HealthyThreshold: 10
                        Port: 80
                      LoadBalancerStickyCookiePolicies: []
                      SubregionNames:
                      - eu-west-2a
                      Listeners:
                      - BackendPort: 80
                        BackendProtocol: TCP
                        LoadBalancerPort: 80
                        LoadBalancerProtocol: TCP
                      LoadBalancerName: private-lb-example
                ex2:
                  summary: Creating an internet-facing load balancer in a Net
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    LoadBalancer:
                      Tags: []
                      SourceSecurityGroup:
                        SecurityGroupName: security-group-example
                        SecurityGroupAccountId: '123456789012'
                      SecuredCookies: false
                      PublicIp: 192.0.2.0
                      Subnets:
                      - subnet-12345678
                      NetId: vpc-12345678
                      BackendVmIds: []
                      ApplicationStickyCookiePolicies: []
                      SecurityGroups:
                      - sg-12345678
                      LoadBalancerType: internet-facing
                      AccessLog:
                        PublicationInterval: 60
                        IsEnabled: false
                      DnsName: private-lb-example.123456789.eu-west-2.lbu.outscale.com
                      HealthCheck:
                        UnhealthyThreshold: 2
                        Timeout: 5
                        CheckInterval: 30
                        Protocol: TCP
                        HealthyThreshold: 10
                        Port: 80
                      LoadBalancerStickyCookiePolicies: []
                      SubregionNames:
                      - eu-west-2a
                      Listeners:
                      - ServerCertificateId: orn:ows:idauth::012345678910:server-certificate/Certificate
                        BackendPort: 80
                        BackendProtocol: HTTP
                        LoadBalancerPort: 443
                        LoadBalancerProtocol: HTTPS
                      LoadBalancerName: private-lb-example
                ex3:
                  summary: Creating an internet-facing load balancer in the public Cloud
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    LoadBalancer:
                      Tags: []
                      SourceSecurityGroup:
                        SecurityGroupName: outscale-elb-sg
                        SecurityGroupAccountId: outscale-elb
                      SecuredCookies: false
                      Subnets: []
                      BackendVmIds: []
                      ApplicationStickyCookiePolicies: []
                      LoadBalancerType: internet-facing
                      AccessLog:
                        PublicationInterval: 60
                        IsEnabled: false
                      DnsName: public-lb-example.123456789.eu-west-2.lbu.outscale.com
                      HealthCheck:
                        UnhealthyThreshold: 2
                        Timeout: 5
                        CheckInterval: 30
                        Protocol: TCP
                        HealthyThreshold: 10
                        Port: 8080
                      LoadBalancerStickyCookiePolicies: []
                      SubregionNames:
                      - eu-west-2a
                      Listeners:
                      - BackendPort: 8080
                        BackendProtocol: HTTP
                        LoadBalancerPort: 8080
                        LoadBalancerProtocol: HTTP
                      LoadBalancerName: public-lb-example
          description: The HTTP 200 response (OK).
      tags:
      - LoadBalancer
  /CreateLoadBalancerListeners:
    post:
      description: |-
        Creates one or more listeners for a specified load balancer.<br /><br />
        For more information, see [About Load Balancers](https://docs.outscale.com/en/userguide/About-Load-Balancers.html).
      operationId: CreateLoadBalancerListeners
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLoadBalancerListenersRequest'
            examples:
              ex1:
                value:
                  LoadBalancerName: example-lbu
                  Listeners:
                  - BackendPort: 58
                    BackendProtocol: TCP
                    LoadBalancerPort: 62
                    LoadBalancerProtocol: TCP
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateLoadBalancerListenersResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    LoadBalancer:
                      Tags: []
                      SourceSecurityGroup:
                        SecurityGroupName: security-group-example
                        SecurityGroupAccountId: '123456789012'
                      SecuredCookies: false
                      Subnets:
                      - subnet-12345678
                      NetId: vpc-12345678
                      BackendVmIds: []
                      ApplicationStickyCookiePolicies: []
                      SecurityGroups:
                      - sg-12345678
                      LoadBalancerType: internal
                      AccessLog:
                        PublicationInterval: 60
                        IsEnabled: false
                      DnsName: internal-example-lbu.123456789.eu-west-2.lbu.outscale.com
                      HealthCheck:
                        UnhealthyThreshold: 2
                        Timeout: 5
                        CheckInterval: 30
                        Protocol: TCP
                        HealthyThreshold: 10
                        Port: 80
                      LoadBalancerStickyCookiePolicies: []
                      SubregionNames:
                      - eu-west-2a
                      Listeners:
                      - BackendPort: 58
                        BackendProtocol: TCP
                        LoadBalancerPort: 62
                        LoadBalancerProtocol: TCP
                      - BackendPort: 80
                        BackendProtocol: TCP
                        LoadBalancerPort: 80
                        LoadBalancerProtocol: TCP
                      LoadBalancerName: example-lbu
          description: The HTTP 200 response (OK).
      tags:
      - Listener
  /CreateLoadBalancerPolicy:
    post:
      description: |-
        Creates a stickiness policy with sticky session lifetimes defined by the browser lifetime.<br />
        The created policy can be used with HTTP or HTTPS listeners only.<br />
        If this policy is implemented by a load balancer, this load balancer uses this cookie in all incoming requests to direct them to the specified backend server virtual machine (VM). If this cookie is not present, the load balancer sends the request to any other server according to its load-balancing algorithm.<br /><br />

        You can also create a stickiness policy with sticky session lifetimes following the lifetime of an application-generated cookie.<br />
        Unlike the other type of stickiness policy, the lifetime of the special Load Balancer Unit (LBU) cookie follows the lifetime of the application-generated cookie specified in the policy configuration. The load balancer inserts a new stickiness cookie only when the application response includes a new application cookie.<br />
        The session stops being sticky if the application cookie is removed or expires, until a new application cookie is issued.<br /><br />
        For more information, see [About Load Balancers](https://docs.outscale.com/en/userguide/About-Load-Balancers.html).
      operationId: CreateLoadBalancerPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLoadBalancerPolicyRequest'
            examples:
              ex1:
                summary: Creating a load balancer policy based on browser
                value:
                  LoadBalancerName: example-lbu
                  PolicyName: example-browser-policy
                  PolicyType: load_balancer
              ex2:
                summary: Creating a load balancer policy based on application cookie
                value:
                  LoadBalancerName: example-lbu
                  PolicyName: example-app-policy
                  PolicyType: app
                  CookieName: example-cookie
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateLoadBalancerPolicyResponse'
              examples:
                ex1:
                  summary: Creating a load balancer policy based on browser
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    LoadBalancer:
                      Tags: []
                      SourceSecurityGroup:
                        SecurityGroupName: default
                        SecurityGroupAccountId: '123456789012'
                      Subnets:
                      - subnet-12345678
                      NetId: vpc-12345678
                      BackendVmIds: []
                      ApplicationStickyCookiePolicies: []
                      SecurityGroups:
                      - sg-12345678
                      LoadBalancerType: internet-facing
                      AccessLog:
                        PublicationInterval: 60
                        IsEnabled: false
                      DnsName: example-lbu-123456789.eu-west-2.lbu.outscale.com
                      HealthCheck:
                        UnhealthyThreshold: 2
                        Timeout: 5
                        CheckInterval: 30
                        Protocol: TCP
                        HealthyThreshold: 10
                        Port: 80
                      LoadBalancerStickyCookiePolicies:
                      - PolicyName: example-browser-policy
                        CookieExpirationPeriod: 1
                      SubregionNames:
                      - eu-west-2a
                      Listeners:
                      - BackendPort: 80
                        BackendProtocol: HTTP
                        LoadBalancerPort: 80
                        LoadBalancerProtocol: HTTP
                      LoadBalancerName: example-lbu
                ex2:
                  summary: Creating a load balancer policy based on application cookie
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    LoadBalancer:
                      Tags: []
                      SourceSecurityGroup:
                        SecurityGroupName: default
                        SecurityGroupAccountId: '123456789012'
                      Subnets:
                      - subnet-12345678
                      NetId: vpc-12345678
                      BackendVmIds: []
                      ApplicationStickyCookiePolicies:
                      - PolicyName: example-app-policy
                        CookieName: example-cookie
                      SecurityGroups:
                      - sg-12345678
                      LoadBalancerType: internet-facing
                      AccessLog:
                        PublicationInterval: 60
                        IsEnabled: false
                      DnsName: example-lbu-123456789.eu-west-2.lbu.outscale.com
                      HealthCheck:
                        UnhealthyThreshold: 2
                        Timeout: 5
                        CheckInterval: 30
                        Protocol: TCP
                        HealthyThreshold: 10
                        Port: 80
                      LoadBalancerStickyCookiePolicies: []
                      SubregionNames:
                      - eu-west-2a
                      Listeners:
                      - BackendPort: 80
                        BackendProtocol: HTTP
                        LoadBalancerPort: 80
                        LoadBalancerProtocol: HTTP
                      LoadBalancerName: example-lbu
          description: The HTTP 200 response (OK).
      tags:
      - LoadBalancerPolicy
  /CreateLoadBalancerTags:
    post:
      description: |-
        Adds one or more tags to the specified load balancers.<br />
        If a tag with the same key already exists for the load balancer, the tag value is replaced.<br /><br />
        For more information, see [About Tags](https://docs.outscale.com/en/userguide/About-Tags.html).
      operationId: CreateLoadBalancerTags
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLoadBalancerTagsRequest'
            examples:
              ex1:
                value:
                  LoadBalancerNames:
                  - private-lb-example
                  Tags:
                  - Key: key1
                    Value: value1
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateLoadBalancerTagsResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
      tags:
      - LoadBalancer
  /CreateNatService:
    post:
      description: |-
        Creates a network address translation (NAT) service in the specified public Subnet of a Net.<br />
        A NAT service enables virtual machines (VMs) placed in the private Subnet of this Net to connect to the Internet, without being accessible from the Internet.<br />
        When creating a NAT service, you specify the allocation ID of the public IP you want to use as public IP for the NAT service. Once the NAT service is created, you need to create a route in the route table of the private Subnet, with 0.0.0.0/0 as destination and the ID of the NAT service as target. For more information, see [LinkPublicIP](#linkpublicip) and [CreateRoute](#createroute).<br />
        This action also enables you to create multiple NAT services in the same Net (one per public Subnet).<br /><br />

        **[IMPORTANT]**<br />
        You cannot modify the public IP associated with a NAT service after its creation. To do so, you need to delete the NAT service and create a new one with another public IP.<br /><br />
        For more information, see [About NAT Services](https://docs.outscale.com/en/userguide/About-NAT-Services.html).
      operationId: CreateNatService
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNatServiceRequest'
            examples:
              ex1:
                value:
                  SubnetId: subnet-12345678
                  PublicIpId: eipalloc-12345678
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateNatServiceResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    NatService:
                      Tags: []
                      SubnetId: subnet-12345678
                      NatServiceId: nat-12345678
                      PublicIps:
                      - PublicIpId: eipalloc-12345678
                        PublicIp: 192.0.2.0
                      NetId: vpc-12345678
                      State: available
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - NatService
  /CreateNet:
    post:
      description: |-
        Creates a Net with a specified IP range.<br />
        The IP range (network range) of your Net must be between a /28 netmask (16 IPs) and a /16 netmask (65536 IPs).<br /><br />
        For more information, see [About Nets](https://docs.outscale.com/en/userguide/About-Nets.html).
      operationId: CreateNet
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNetRequest'
            examples:
              ex1:
                value:
                  IpRange: 10.0.0.0/16
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateNetResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    Net:
                      Tags: []
                      DhcpOptionsSetId: dopt-12345678
                      IpRange: 10.0.0.0/16
                      Tenancy: default
                      NetId: vpc-12345678
                      State: available
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 409 response (Conflict).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Net
  /CreateNetAccessPoint:
    post:
      description: |-
        Creates a Net access point to access an OUTSCALE service from this Net without using the Internet and public IPs.<br />
        You specify the service using its name. For more information about the available services, see [ReadNetAccessPointServices](#readnetaccesspointservices).<br /> <br />
        To control the routing of traffic between the Net and the specified service, you can specify one or more route tables. Virtual machines placed in Subnets associated with the specified route table thus use the Net access point to access the service. When you specify a route table, a route is automatically added to it with the destination set to the prefix list ID of the service, and the target set to the ID of the access point.<br /><br />
        When a Net access point is created, a public IP is automatically allocated to your account and used for the Net access point. This public IP is not connected to the Internet. It is counted in your quota, but it is not billed.<br /> <br />
        For more information, see [About Net Access Points](https://docs.outscale.com/en/userguide/About-Net-Access-Points.html).
      operationId: CreateNetAccessPoint
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNetAccessPointRequest'
            examples:
              ex1:
                value:
                  NetId: vpc-12345678
                  RouteTableIds:
                  - rtb-12345678
                  ServiceName: com.outscale.eu-west-2.oos
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateNetAccessPointResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    NetAccessPoint:
                      Tags: []
                      NetAccessPointId: vpce-12345678
                      RouteTableIds:
                      - rtb-12345678
                      State: pending
                      NetId: vpc-12345678
                      ServiceName: com.outscale.eu-west-2.oos
          description: The HTTP 200 response (OK).
      tags:
      - NetAccessPoint
  /CreateNetPeering:
    post:
      description: |-
        Requests a Net peering between a Net you own and a peer Net that belongs to you or another account.<br />
        This action creates a Net peering that remains in the `pending-acceptance` state until it is accepted by the owner of the peer Net. If the owner of the peer Net does not accept the request within 7 days, the state of the Net peering becomes `expired`. For more information, see [AcceptNetPeering](#acceptnetpeering).<br /><br />

        **[IMPORTANT]**<br />
        * Peered Nets must contain at least one virtual machine (VM) each before the creation of the Net peering.<br />
        * The two Nets must not have overlapping IP ranges. Otherwise, the Net peering is in the `failed` state.<br />
        * A peering connection between two Nets works both ways. If an A-to-B connection is already created and accepted, creating a B-to-A connection is not necessary and would be automatically rejected.

        For more information, see [About Net Peerings](https://docs.outscale.com/en/userguide/About-Net-Peerings.html).
      operationId: CreateNetPeering
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNetPeeringRequest'
            examples:
              ex1:
                summary: Creating a Net peering between two Nets belonging to you
                value:
                  SourceNetId: vpc-12345678
                  AccepterNetId: vpc-87654321
              ex2:
                summary: Creating a Net peering with a Net that belongs to another account
                value:
                  SourceNetId: vpc-12345678
                  AccepterNetId: vpc-87654321
                  AccepterOwnerId: '987654321098'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateNetPeeringResponse'
              examples:
                ex1:
                  summary: Creating a Net peering between two Nets belonging to you
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    NetPeering:
                      Tags: []
                      State:
                        Name: pending-acceptance
                        Message: Pending acceptance by 123456789012
                      AccepterNet:
                        NetId: vpc-12345678
                        IpRange: 172.16.0.0/16
                        AccountId: '123456789012'
                      SourceNet:
                        NetId: vpc-87654321
                        IpRange: 10.0.0.0/16
                        AccountId: '123456789012'
                      NetPeeringId: pcx-12345678
                ex2:
                  summary: Creating a Net peering with a Net that belongs to another account
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    NetPeering:
                      Tags: []
                      State:
                        Name: pending-acceptance
                        Message: Pending acceptance by 123456789012
                      AccepterNet:
                        NetId: vpc-87654321
                        IpRange: 172.16.0.0/16
                        AccountId: '987654321098'
                      SourceNet:
                        NetId: vpc-12345678
                        IpRange: 10.0.0.0/16
                        AccountId: '123456789012'
                      NetPeeringId: pcx-12345678
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - NetPeering
  /CreateNic:
    post:
      description: |-
        Creates a network interface card (NIC) in the specified Subnet.<br /><br />
        For more information, see [About NICs](https://docs.outscale.com/en/userguide/About-NICs.html).
      operationId: CreateNic
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNicRequest'
            examples:
              ex1:
                summary: Creating a NIC
                value:
                  SubnetId: subnet-12345678
                  SecurityGroupIds:
                  - sg-12345678
              ex2:
                summary: Creating a NIC with specific private IPs
                value:
                  Description: Terraform nic with private IPs
                  SubnetId: subnet-12345678
                  SecurityGroupIds:
                  - sg-12345678
                  PrivateIps:
                  - IsPrimary: true
                    PrivateIp: 10.0.0.4
                  - IsPrimary: false
                    PrivateIp: 10.0.0.5
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateNicResponse'
              examples:
                ex1:
                  summary: Creating a NIC
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    Nic:
                      SubregionName: eu-west-2a
                      SubnetId: subnet-12345678
                      State: available
                      IsSourceDestChecked: true
                      PrivateDnsName: ip-10-0-0-4.eu-west-2.compute.internal
                      Tags: []
                      Description: ''
                      AccountId: '123456789012'
                      SecurityGroups:
                      - SecurityGroupName: security-group-example
                        SecurityGroupId: sg-12345678
                      MacAddress: A1:B2:C3:D4:E5:F6
                      NetId: vpc-12345678
                      NicId: eni-12345678
                      PrivateIps:
                      - PrivateDnsName: ip-10-0-0-4.eu-west-2.compute.internal
                        PrivateIp: 10.0.0.4
                        IsPrimary: true
                ex2:
                  summary: Creating a NIC with specific private IPs
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    Nic:
                      SubregionName: eu-west-2a
                      SubnetId: subnet-12345678
                      State: available
                      IsSourceDestChecked: true
                      PrivateDnsName: ip-10-0-0-4.eu-west-2.compute.internal
                      Tags: []
                      Description: ''
                      AccountId: '123456789012'
                      SecurityGroups:
                      - SecurityGroupName: security-group-example
                        SecurityGroupId: sg-12345678
                      MacAddress: A1:B2:C3:D4:E5:F6
                      NetId: vpc-12345678
                      NicId: eni-12345678
                      PrivateIps:
                      - PrivateDnsName: ip-10-0-0-4.eu-west-2.compute.internal
                        PrivateIp: 10.0.0.4
                        IsPrimary: true
                      - PrivateDnsName: ip-10-0-0-5.eu-west-2.compute.internal
                        PrivateIp: 10.0.0.5
                        IsPrimary: false
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Nic
  /CreatePolicy:
    post:
      description: |-
        Creates a managed policy to apply to a user.<br />
        This action creates a policy version and sets v1 as the default one.
      operationId: CreatePolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePolicyRequest'
            examples:
              ex1:
                value:
                  Description: Example of description
                  Document: '{"Statement": [ {"Effect": "Allow", "Action": ["*"], "Resource": ["*"]} ]}'
                  Path: /example/
                  PolicyName: example-user-policy
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatePolicyResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    Policy:
                      ResourcesCount: 0
                      PolicyName: example-user-policy
                      PolicyDefaultVersionId: v1
                      Path: /example/
                      CreationDate: 2010-10-01T12:34:56.789+0000
                      Description: Example of description
                      PolicyId: ABCDEFGHIJKLMNOPQRSTUVWXYZ01234
                      Orn: orn:ows:idauth::012345678910:policy/example/example-user-policy
                      IsLinkable: true
                      LastModificationDate: 2010-10-01T12:34:56.789+0000
          description: The HTTP 200 response (OK).
      tags:
      - Policy
  /CreatePolicyVersion:
    post:
      description: |-
        Creates a version of a specified managed policy.<br />
        A managed policy can have up to five versions.
      operationId: CreatePolicyVersion
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePolicyVersionRequest'
            examples:
              ex1:
                value:
                  Document: '{"Statement": [ {"Effect": "Allow", "Action": ["*"], "Resource": ["*"]} ]}'
                  PolicyOrn: orn:ows:idauth::012345678910:policy/example/example-user-policy
                  SetAsDefault: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatePolicyVersionResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    PolicyVersion:
                      VersionId: v2
                      DefaultVersion: true
                      CreationDate: 2017-05-10T12:34:56.789+0000
                      Body: '{"Statement": [ {"Effect": "Allow", "Action": ["*"], "Resource": ["*"]} ]}'
          description: The HTTP 200 response (OK).
      tags:
      - Policy
  /CreateProductType:
    post:
      description: Creates a product type you can associate with an OMI for consumption monitoring and billing purposes.
      operationId: CreateProductType
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductTypeRequest'
            examples:
              ex1:
                value:
                  Vendor: vendor-name
                  Description: Example of description
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateProductTypeResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    ProductType:
                      Vendor: vendor-name
                      ProductTypeId: pty-12345678
                      Description: Example of description
          description: The HTTP 200 response (OK).
      tags:
      - ProductType
  /CreatePublicIp:
    post:
      description: |-
        Acquires a public IP for your account.<br />
        A public IP is a static IP designed for dynamic Cloud computing. It can be associated with a virtual machine (VM) in the public Cloud or in a Net, a network interface card (NIC), a NAT service.<br /><br />
        For more information, see [About Public IPs](https://docs.outscale.com/en/userguide/About-Public-IPs.html).
      operationId: CreatePublicIp
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePublicIpRequest'
            examples:
              ex1:
                value: {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatePublicIpResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    PublicIp:
                      Tags: []
                      PublicIpId: eipalloc-12345678
                      PublicIp: 192.0.2.0
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - PublicIp
  /CreateRoute:
    post:
      description: |-
        Creates a route in a specified route table within a specified Net.<br />
        You must specify one of the following elements as the target:<br /><br />

        * Net peering<br />
        * NAT VM<br />
        * Internet service<br />
        * Virtual gateway<br />
        * NAT service<br />
        * Network interface card (NIC)<br /><br />

        The routing algorithm is based on the most specific match.<br /><br />
        For more information, see [About Route Tables](https://docs.outscale.com/en/userguide/About-Route-Tables.html).
      operationId: CreateRoute
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRouteRequest'
            examples:
              ex1:
                summary: Creating a route to an Internet service
                value:
                  RouteTableId: rtb-12345678
                  DestinationIpRange: 0.0.0.0/0
                  GatewayId: igw-12345678
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateRouteResponse'
              examples:
                ex1:
                  summary: Creating a route to an Internet service
                  value:
                    RouteTable:
                      Routes:
                      - DestinationIpRange: 10.0.0.0/16
                        CreationMethod: CreateRouteTable
                        State: active
                      - GatewayId: igw-12345678
                        DestinationIpRange: 0.0.0.0/0
                        CreationMethod: CreateRoute
                        State: active
                      LinkRouteTables: []
                      NetId: vpc-12345678
                      Tags: []
                      RoutePropagatingVirtualGateways: []
                      RouteTableId: rtb-12345678
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Route
  /CreateRouteTable:
    post:
      description: |-
        Creates a route table for a specified Net.<br />
        You can then add routes and associate this route table with a Subnet.<br /><br />
        For more information, see [About Route Tables](https://docs.outscale.com/en/userguide/About-Route-Tables.html).
      operationId: CreateRouteTable
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRouteTableRequest'
            examples:
              ex1:
                value:
                  NetId: vpc-12345678
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateRouteTableResponse'
              examples:
                ex1:
                  value:
                    RouteTable:
                      Routes:
                      - DestinationIpRange: 10.0.0.0/16
                        CreationMethod: CreateRouteTable
                        State: active
                      LinkRouteTables: []
                      NetId: vpc-12345678
                      Tags: []
                      RoutePropagatingVirtualGateways: []
                      RouteTableId: rtb-12345678
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - RouteTable
  /CreateSecurityGroup:
    post:
      description: |-
        Creates a security group.<br />
        This action creates a security group either in the public Cloud or in a specified Net. By default, a default security group for use in the public Cloud and a default security group for use in a Net are created.<br />
        When launching a virtual machine (VM), if no security group is explicitly specified, the appropriate default security group is assigned to the VM. Default security groups include a default rule granting VMs network access to each other.<br />
        When creating a security group, you specify a name. Two security groups for use in the public Cloud or for use in a Net cannot have the same name.<br />
        You can have up to 500 security groups in the public Cloud. You can create up to 500 security groups per Net.<br />
        To add or remove rules, use the [CreateSecurityGroupRule](#createsecuritygrouprule) method.<br /><br />
        For more information, see [About Security Groups](https://docs.outscale.com/en/userguide/About-Security-Groups.html).
      operationId: CreateSecurityGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSecurityGroupRequest'
            examples:
              ex1:
                value:
                  NetId: vpc-12345678
                  SecurityGroupName: security-group-example
                  Description: Security group example
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateSecurityGroupResponse'
              examples:
                ex1:
                  value:
                    SecurityGroup:
                      Tags: []
                      SecurityGroupName: security-group-example
                      OutboundRules:
                      - FromPortRange: -1
                        IpProtocol: '-1'
                        ToPortRange: -1
                        IpRanges:
                        - 0.0.0.0/0
                      SecurityGroupId: sg-12345678
                      AccountId: '123456789012'
                      Description: Example of security group
                      InboundRules: []
                      NetId: vpc-12345678
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - SecurityGroup
  /CreateSecurityGroupRule:
    post:
      description: |-
        Adds one or more rules to a security group.<br />
        Use the `SecurityGroupId` parameter to specify the security group for which you want to create a rule.<br />
        Use the `Flow` parameter to specify if you want an inbound rule or an outbound rule.<br /><br />
        An inbound rule allows the security group to receive traffic:
        * Either from a specific IP range (`IpRange` parameter) on a specific port range (`FromPortRange` and `ToPortRange` parameters) and specific protocol (`IpProtocol` parameter).
        * Or from another specific security group (`SecurityGroupAccountIdToLink` and `SecurityGroupNameToLink` parameters).<br />

        (Net only) An outbound rule works similarly but allows the security group to send traffic rather than receive traffic.<br />

        Alternatively, you can use the `Rules` parameter to add several rules at the same time.

        **[NOTE]**<br />
        * The modifications are effective as quickly as possible, but a small delay may occur.<br />
        * By default, traffic between two security groups is allowed through both public and private IPs. To restrict traffic to private IPs only, contact our Support team at support@outscale.com.

        For more information, see [About Security Group Rules](https://docs.outscale.com/en/userguide/About-Security-Group-Rules.html).
      operationId: CreateSecurityGroupRule
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSecurityGroupRuleRequest'
            examples:
              ex1:
                summary: Creating an inbound rule from an IP range
                value:
                  Flow: Inbound
                  SecurityGroupId: sg-12345678
                  FromPortRange: 80
                  ToPortRange: 80
                  IpProtocol: tcp
                  IpRange: 10.0.0.0/16
              ex2:
                summary: Creating an inbound rule from another security group
                value:
                  Flow: Inbound
                  SecurityGroupId: sg-12345678
                  Rules:
                  - FromPortRange: 22
                    ToPortRange: 22
                    IpProtocol: tcp
                    SecurityGroupsMembers:
                    - AccountId: '123456789012'
                      SecurityGroupName: another-security-group
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateSecurityGroupRuleResponse'
              examples:
                ex1:
                  summary: Creating an inbound rule from an IP range
                  value:
                    SecurityGroup:
                      Tags: []
                      SecurityGroupName: security-group-example
                      OutboundRules:
                      - FromPortRange: -1
                        IpProtocol: '-1'
                        ToPortRange: -1
                        IpRanges:
                        - 0.0.0.0/0
                      SecurityGroupId: sg-12345678
                      AccountId: '123456789012'
                      Description: Example of security group
                      InboundRules:
                      - FromPortRange: 80
                        IpProtocol: tcp
                        ToPortRange: 80
                        IpRanges:
                        - 10.0.0.0/16
                      NetId: vpc-12345678
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                ex2:
                  summary: Creating an inbound rule from another security group
                  value:
                    SecurityGroup:
                      Tags: []
                      SecurityGroupName: security-group-example
                      OutboundRules:
                      - FromPortRange: -1
                        IpProtocol: '-1'
                        ToPortRange: -1
                        IpRanges:
                        - 0.0.0.0/0
                      SecurityGroupId: sg-12345678
                      AccountId: '123456789012'
                      Description: Example of security group
                      InboundRules:
                      - FromPortRange: 22
                        IpProtocol: tcp
                        ToPortRange: 22
                        SecurityGroupsMembers:
                        - SecurityGroupName: another-security-group
                          SecurityGroupId: sg-87654321
                          AccountId: '987654321098'
                      NetId: vpc-12345678
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - SecurityGroupRule
  /CreateServerCertificate:
    post:
      description: |-
        Creates a server certificate and its matching private key.<br /><br />
        These elements can be used with other services (for example, to configure SSL termination on load balancers).<br /><br />
        You can also specify the chain of intermediate certification authorities if your certificate is not directly signed by a root one. You can specify multiple intermediate certification authorities in the `CertificateChain` parameter. To do so, concatenate all certificates in the correct order (the first certificate must be the authority of your certificate, the second must be the authority of the first one, and so on).<br /><br />
        The private key must be a RSA key in PKCS1 form. To check this, open the PEM file and ensure its header reads as follows: BEGIN RSA PRIVATE KEY.<br /><br />
        [IMPORTANT]<br /><br />
        This private key must not be protected by a password or a passphrase.<br /><br />
        For more information, see [About Server Certificates in EIM](https://docs.outscale.com/en/userguide/About-Server-Certificates-in-EIM.html).
      operationId: CreateServerCertificate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateServerCertificateRequest'
            examples:
              ex1:
                value:
                  Name: server-cert-example
                  Body: ...
                  Chain: ...
                  PrivateKey: ...
                  Path: /example/
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateServerCertificateResponse'
              examples:
                ex1:
                  value:
                    ServerCertificate:
                      Path: /example/
                      Id: ABCDEFGHIJKLMNOPQRSTUVWXYZ1234
                      Orn: orn:ows:idauth::012345678910:server-certificate/example/server-cert-example
                      Name: server-cert-example
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
      tags:
      - ServerCertificate
  /CreateSnapshot:
    post:
      description: |-
        Creates a snapshot. Snapshots are point-in-time images of a volume that you can use to back up your data or to create replicas of this volume.<br />
        You can use this method in three different ways:
        * **Creating from a volume**: You create a snapshot from one of your volumes.<br />
        * **Copying a snapshot**: You copy an existing snapshot. The source snapshot can be one of your own snapshots, or a snapshot owned by another account that has granted you permission via the [UpdateSnapshot](#updatesnapshot) method.<br />
        * **Importing from a bucket**: You import a snapshot located in an OUTSCALE Object Storage (OOS) bucket. First, the owner of the source snapshot must export it to a bucket by using the [CreateSnapshotExportTask](#createsnapshotexporttask) method. Then, they must grant you permission to read the snapshot via a pre-signed URL. For more information, see [Creating a Pre-Signed URL](https://docs.outscale.com/en/userguide/Creating-a-Pre-Signed-URL.html).

        **[NOTE]**<br />
        In case of excessive use of the snapshot creation feature on the same volume over a short period of time, 3DS OUTSCALE reserves the right to temporarily block the feature.

        For more information, see [About Snapshots](https://docs.outscale.com/en/userguide/About-Snapshots.html).
      operationId: CreateSnapshot
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSnapshotRequest'
            examples:
              ex1:
                summary: Creating from a volume
                value:
                  VolumeId: vol-12345678
                  Description: Snapshot created from a volume
              ex2:
                summary: Copying a snapshot
                value:
                  SourceSnapshotId: snap-12345678
                  SourceRegionName: eu-west-2
                  Description: Snapshot created from another snapshot
              ex3:
                summary: Importing from a bucket
                value:
                  FileLocation: https://oos.eu-west-2.outscale.com/BUCKET/KEY?AWSAccessKeyId=ABCDEFGHIJ0123456789&Expires=1493372309&Signature=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
                  SnapshotSize: 10737418240
                  Description: Snapshot imported from a bucket
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateSnapshotResponse'
              examples:
                ex1:
                  summary: Creating from a volume
                  value:
                    Snapshot:
                      VolumeSize: 10
                      AccountId: '123456789012'
                      VolumeId: vol-12345678
                      CreationDate: '2010-10-01T12:34:56.789Z'
                      PermissionsToCreateVolume:
                        GlobalPermission: false
                        AccountIds: []
                      Progress: 0
                      SnapshotId: snap-12345678
                      State: pending/queued
                      Description: Snapshot created from a volume
                      Tags: []
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                ex2:
                  summary: Copying a snapshot
                  value:
                    Snapshot:
                      VolumeSize: 10
                      AccountId: '123456789012'
                      VolumeId: vol-12345678
                      CreationDate: '2010-10-01T12:34:56.789Z'
                      PermissionsToCreateVolume:
                        GlobalPermission: false
                        AccountIds: []
                      Progress: 100
                      SnapshotId: snap-12345678
                      State: completed
                      Description: Snapshot copied from another snapshot
                      Tags: []
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                ex3:
                  summary: Importing from a bucket
                  value:
                    Snapshot:
                      VolumeSize: 10
                      AccountId: '123456789012'
                      VolumeId: vol-12345678
                      CreationDate: '2010-10-01T12:34:56.789Z'
                      PermissionsToCreateVolume:
                        GlobalPermission: false
                        AccountIds: []
                      Progress: 0
                      SnapshotId: snap-12345678
                      State: importing
                      Description: Snapshot imported from a bucket
                      Tags: []
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Snapshot
  /CreateSnapshotExportTask:
    post:
      description: |-
        Exports a snapshot to an OUTSCALE Object Storage (OOS) bucket that belongs to you. This action enables you to create a backup of your snapshot.<br /><br />
        You can share this snapshot with others accounts by granting permission to read it via pre-signed URLs. For more information, see [Creating a Pre-Signed URL](https://docs.outscale.com/en/userguide/Creating-a-Pre-Signed-URL.html).<br /><br />
        For more information, see [About Snapshots](https://docs.outscale.com/en/userguide/About-Snapshots.html).
      operationId: CreateSnapshotExportTask
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSnapshotExportTaskRequest'
            examples:
              ex1:
                value:
                  SnapshotId: snap-12345678
                  OsuExport:
                    DiskImageFormat: qcow2
                    OsuBucket: BUCKET
                    OsuPrefix: PREFIX
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateSnapshotExportTaskResponse'
              examples:
                ex1:
                  value:
                    SnapshotExportTask:
                      Tags: []
                      TaskId: snap-export-12345678
                      Comment: Export of snapshot snap-12345678
                      OsuExport:
                        OsuPrefix: PREFIX
                        OsuBucket: BUCKET
                        DiskImageFormat: qcow2
                      State: pending
                      SnapshotId: snap-12345678
                      Progress: 0
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
      tags:
      - Snapshot
  /CreateSubnet:
    post:
      description: |-
        Creates a Subnet in an existing Net.<br />
        To create a Subnet in a Net, you have to provide the ID of the Net and the IP range for the Subnet (its network range). Once the Subnet is created, you cannot modify its IP range.<br /><br />
        For more information, see [About Nets](https://docs.outscale.com/en/userguide/About-Nets.html).
      operationId: CreateSubnet
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSubnetRequest'
            examples:
              ex1:
                value:
                  NetId: vpc-12345678
                  IpRange: 10.0.0.0/18
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateSubnetResponse'
              examples:
                ex1:
                  value:
                    Subnet:
                      Tags: []
                      SubregionName: eu-west-2a
                      SubnetId: subnet-12345678
                      AvailableIpsCount: 16379
                      IpRange: 10.0.0.0/18
                      MapPublicIpOnLaunch: false
                      State: available
                      NetId: vpc-12345678
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 409 response (Conflict).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Subnet
  /CreateTags:
    post:
      description: |-
        Adds one or more tags to the specified resources.<br />
        If a tag with the same key already exists for the resource, the tag value is replaced.<br />
        You can tag the following resources using their IDs:<br /><br />

        * Client gateways (cgw-xxxxxxxx)<br />
        * DHCP options (dopt-xxxxxxxx)<br />
        * Images (ami-xxxxxxxx)<br />
        * Internet services (igw-xxxxxxxx)<br />
        * Keypairs (key-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx)<br />
        * NAT services (nat-xxxxxxxx)<br />
        * Net endpoints (vpce-xxxxxxxx)<br />
        * Net peerings (vpcx-xxxxxxxx)<br />
        * Nets (vpc-xxxxxxxx)<br />
        * Network interface cards (NIC) (eni-xxxxxxxx)<br />
        * OMI export tasks (image-export-xxxxxxxx)<br />
        * OMIs (ami-xxxxxxxx)<br />
        * Public IPs (eipalloc-xxxxxxxx)<br />
        * Route tables (rtb-xxxxxxxx)<br />
        * Security groups (sg-xxxxxxxx)<br />
        * Snapshot export tasks (snap-export-xxxxxxxx)
        * Snapshots (snap-xxxxxxxx)<br />
        * Subnets (subnet-xxxxxxxx)<br />
        * Virtual gateways (vgw-xxxxxxxx)<br />
        * Virtual machines (VMs) (i-xxxxxxxx)<br />
        * Volumes (vol-xxxxxxxx)<br />
        * VPN connections (vpn-xxxxxxxx)<br />

        For more information, see [About Tags](https://docs.outscale.com/en/userguide/About-Tags.html).
      operationId: CreateTags
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTagsRequest'
            examples:
              ex1:
                value:
                  ResourceIds:
                  - i-12345678
                  Tags:
                  - Key: key1
                    Value: value1
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateTagsResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Tag
  /CreateUser:
    post:
      description: |-
        Creates an EIM user for your account.<br /><br />
        For more information, see [About EIM Users](https://docs.outscale.com/en/userguide/About-EIM-Users.html).
      operationId: CreateUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
            examples:
              ex1:
                value:
                  UserEmail: user@example.com
                  UserName: example-user
                  Path: /documentation/
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserResponse'
              examples:
                ex1:
                  value:
                    User:
                      CreationDate: 2010-10-01T12:34:56.789+0000
                      LastModificationDate: 2017-05-10T12:34:56.789+0000
                      UserEmail: user@example.com
                      UserName: example-user
                      UserId: ABCDEFGHIJKLMNOPQRSTUVWXYZ12345
                      Path: /documentation/
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
      tags:
      - User
  /CreateUserGroup:
    post:
      description: |-
        Creates a group to which you can add users.<br />
        You can also add an inline policy or link a managed policy to the group, which is applied to all its users.
      operationId: CreateUserGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserGroupRequest'
            examples:
              ex1:
                value:
                  Path: /example/
                  UserGroupName: example-usergroup
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserGroupResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    UserGroup:
                      CreationDate: '2010-10-01T12:34:56.789Z'
                      LastModificationDate: 2010-10-01T12:34:56.789+0000
                      Name: example-usergroup
                      Orn: orn:ows:idauth::012345678910:usergroup/example/usergroup-example
                      Path: /example/
                      UserGroupId: ug-12345678
          description: The HTTP 200 response (OK).
      tags:
      - UserGroup
  /CreateVirtualGateway:
    post:
      description: |-
        Creates a virtual gateway.<br />
        A virtual gateway is the access point on the Net side of a VPN connection.<br /><br />
        For more information, see [About Virtual Gateways](https://docs.outscale.com/en/userguide/About-Virtual-Gateways.html).
      operationId: CreateVirtualGateway
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVirtualGatewayRequest'
            examples:
              ex1:
                value:
                  ConnectionType: ipsec.1
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateVirtualGatewayResponse'
              examples:
                ex1:
                  value:
                    VirtualGateway:
                      VirtualGatewayId: vgw-12345678
                      ConnectionType: ipsec.1
                      NetToVirtualGatewayLinks: []
                      State: available
                      Tags: []
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
      tags:
      - VirtualGateway
  /CreateVmGroup:
    post:
      description: |-
        > [WARNING]<br />
        > This feature is currently under development and may not function properly.<br />

        Creates a group of virtual machines (VMs) containing the same characteristics as a specified VM template, and then launches them.<br />
        You can create up to 100 VM groups in your account.
      operationId: CreateVmGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVmGroupRequest'
            examples:
              ex1:
                value:
                  Description: Production log collector
                  PositioningStrategy: attract
                  SecurityGroupIds:
                  - sg-12345678
                  SubnetId: subnet-12345678
                  Tags:
                  - Key: key1
                    Value: value1
                  VmCount: 2
                  VmGroupName: ClusterLog-PPD01
                  VmTemplateId: vmtemplate-98765432109876543210987654321012
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateVmGroupResponse'
              examples:
                ex1:
                  value:
                    VmGroup:
                      CreationDate: '2010-10-01T12:34:56.789Z'
                      Description: Production log collector
                      PositioningStrategy: attract
                      SecurityGroupIds:
                      - sg-12345678
                      State: available
                      SubnetId: subnet-12345678
                      Tags:
                      - Key: key1
                        Value: value1
                      VmCount: 2
                      VmGroupId: vmgroup-12345678901234567890123456789012
                      VmGroupName: ClusterLog-PPD01
                      VmIds: []
                      VmTemplateId: vmtemplate-98765432109876543210987654321012
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - VmGroup
  /CreateVmTemplate:
    post:
      description: |-
        > [WARNING]<br />
        > This feature is currently under development and may not function properly.<br />

        Creates a virtual machine (VM) template. You can then use the VM template to create VM groups.<br />
        You can create up to 50 VM templates in your account.
      operationId: CreateVmTemplate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVmTemplateRequest'
            examples:
              ex1:
                value:
                  CpuCores: 2
                  CpuGeneration: v4
                  CpuPerformance: high
                  Description: Log collector template
                  ImageId: ami-12345678
                  KeypairName: keypair-example
                  Ram: 2
                  Tags:
                  - Key: key1
                    Value: value1
                  VmTemplateName: vmtemplate-example
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateVmTemplateResponse'
              examples:
                ex1:
                  value:
                    VmTemplate:
                      VmTemplateName: vmtemplate-example
                      CpuPerformance: high
                      CreationDate: 2010-10-01T12:34:56.789+0000
                      CpuCores: 2
                      Tags:
                      - Key: key1
                        Value: value1
                      Description: Log collector template
                      ImageId: ami-12345678
                      CpuGeneration: v4
                      VmTemplateId: vmtemplate-98765432109876543210987654321012
                      Ram: 2
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
      tags:
      - VmTemplate
  /CreateVms:
    post:
      description: |-
        Creates virtual machines (VMs), and then launches them.<br />
        This action enables you to create a specified number of VMs using an OUTSCALE machine image (OMI) that you are allowed to use, and then to automatically launch them.<br />
        The VMs remain in the `pending` state until they are created and ready to be used. Once automatically launched, they are in the `running` state.<br />
        To check the state of your VMs, call the [ReadVms](#readvms) method.<br />
        If not specified, the security group used by the service is the default one.<br />
        The metadata server enables you to get the public key provided when the VM is launched. Official OMIs contain a script to get this public key and put it inside the VM to provide secure access without password.<br /><br />
        For more information, see [About VMs](https://docs.outscale.com/en/userguide/About-VMs.html).
      operationId: CreateVms
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVmsRequest'
            examples:
              ex1:
                summary: Creating a VM (minimal syntax)
                value:
                  ImageId: ami-12345678
              ex2:
                summary: Creating a VM in a Net
                value:
                  ImageId: ami-12345678
                  VmType: tinav5.c1r1p2
                  KeypairName: keypair-example
                  SecurityGroupIds:
                  - sg-12345678
                  SubnetId: subnet-12345678
                  UserData: ...
              ex3:
                summary: Creating a VM with block device mappings
                value:
                  ImageId: ami-12345678
                  VmType: tinav5.c1r1p2
                  KeypairName: keypair-example
                  SecurityGroupIds:
                  - sg-12345678
                  SubnetId: subnet-12345678
                  UserData: ...
                  BlockDeviceMappings:
                  - DeviceName: /dev/sda1
                    Bsu:
                      VolumeSize: 15
                      VolumeType: gp2
                  - DeviceName: /dev/sdb
                    Bsu:
                      SnapshotId: snap-12345678
                      VolumeSize: 22
                      VolumeType: io1
                      Iops: 150
              ex4:
                summary: Creating a VM with a NIC
                value:
                  ImageId: ami-12345678
                  VmType: tinav5.c1r1p2
                  KeypairName: keypair-example
                  UserData: ...
                  Nics:
                  - DeviceNumber: 0
                    NicId: eni-12345678
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateVmsResponse'
              examples:
                ex1:
                  summary: Creating a VM (minimal syntax)
                  value:
                    Vms:
                    - VmType: t2.small
                      VmInitiatedShutdownBehavior: stop
                      State: pending
                      StateReason: ''
                      RootDeviceType: ebs
                      RootDeviceName: /dev/sda1
                      IsSourceDestChecked: true
                      ImageId: ami-12345678
                      DeletionProtection: false
                      BootMode: legacy
                      Architecture: x86_64
                      NestedVirtualization: false
                      BlockDeviceMappings:
                      - DeviceName: /dev/sda1
                        Bsu:
                          VolumeId: vol-12345678
                          State: attaching
                          LinkDate: '2010-10-01T12:34:56.789Z'
                          DeleteOnVmDeletion: true
                      VmId: i-12345678
                      ReservationId: r-12345678
                      Hypervisor: xen
                      Placement:
                        Tenancy: default
                        SubregionName: eu-west-2a
                      ProductCodes:
                      - '0001'
                      CreationDate: '2010-10-01T12:34:56.789Z'
                      UserData: ...
                      PrivateIp: 10.0.0.4
                      SecurityGroups:
                      - SecurityGroupName: default
                        SecurityGroupId: sg-12345678
                      BsuOptimized: false
                      LaunchNumber: 0
                      Performance: medium
                      Tags: []
                      ActionsOnNextBoot:
                        SecureBoot: none
                      PrivateDnsName: ip-10-0-0-4.eu-west-2.compute.internal
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                ex2:
                  summary: Creating a VM in a Net
                  value:
                    Vms:
                    - VmType: tinav5.c1r1p2
                      VmInitiatedShutdownBehavior: stop
                      State: pending
                      StateReason: ''
                      RootDeviceType: ebs
                      RootDeviceName: /dev/sda1
                      IsSourceDestChecked: true
                      KeypairName: keypair-example
                      ImageId: ami-12345678
                      DeletionProtection: false
                      BootMode: legacy
                      Architecture: x86_64
                      NestedVirtualization: false
                      BlockDeviceMappings:
                      - DeviceName: /dev/sda1
                        Bsu:
                          VolumeId: vol-12345678
                          State: attaching
                          LinkDate: '2010-10-01T12:34:56.789Z'
                          DeleteOnVmDeletion: true
                      VmId: i-12345678
                      ReservationId: r-12345678
                      Hypervisor: xen
                      Placement:
                        Tenancy: default
                        SubregionName: eu-west-2a
                      ProductCodes:
                      - '0001'
                      CreationDate: '2010-10-01T12:34:56.789Z'
                      UserData: ...
                      SubnetId: subnet-12345678
                      PrivateIp: 10.0.0.4
                      SecurityGroups:
                      - SecurityGroupName: security-group-example
                        SecurityGroupId: sg-12345678
                      BsuOptimized: false
                      LaunchNumber: 0
                      NetId: vpc-12345678
                      Nics:
                      - SubnetId: subnet-12345678
                        State: in-use
                        LinkNic:
                          State: attached
                          DeviceNumber: 0
                          LinkNicId: eni-attach-12345678
                          DeleteOnVmDeletion: true
                        IsSourceDestChecked: true
                        PrivateDnsName: ip-10-0-0-4.eu-west-2.compute.internal
                        Description: Primary network interface
                        AccountId: '123456789012'
                        SecurityGroups:
                        - SecurityGroupName: security-group-example
                          SecurityGroupId: sg-12345678
                        MacAddress: A1:B2:C3:D4:E5:F6
                        NetId: vpc-12345678
                        NicId: eni-12345678
                        PrivateIps:
                        - PrivateDnsName: ip-10-0-0-4.eu-west-2.compute.internal
                          PrivateIp: 10.0.0.4
                          IsPrimary: true
                      Performance: high
                      Tags: []
                      ActionsOnNextBoot:
                        SecureBoot: none
                      PrivateDnsName: ip-10-0-0-4.eu-west-2.compute.internal
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                ex3:
                  summary: Creating a VM with block device mappings
                  value:
                    Vms:
                    - VmType: tinav5.c1r1p2
                      VmInitiatedShutdownBehavior: stop
                      State: pending
                      StateReason: ''
                      RootDeviceType: ebs
                      RootDeviceName: /dev/sda1
                      IsSourceDestChecked: true
                      KeypairName: keypair-example
                      ImageId: ami-12345678
                      DeletionProtection: false
                      BootMode: legacy
                      Architecture: x86_64
                      NestedVirtualization: false
                      BlockDeviceMappings:
                      - DeviceName: /dev/sda1
                        Bsu:
                          VolumeId: vol-12345678
                          State: attaching
                          LinkDate: '2010-10-01T12:34:56.789Z'
                          DeleteOnVmDeletion: true
                      - DeviceName: /dev/sda1
                        Bsu:
                          VolumeId: vol-87654321
                          State: attaching
                          LinkDate: '2010-10-01T12:34:56.789Z'
                          DeleteOnVmDeletion: true
                      VmId: i-12345678
                      ReservationId: r-12345678
                      Hypervisor: xen
                      Placement:
                        Tenancy: default
                        SubregionName: eu-west-2a
                      ProductCodes:
                      - '0001'
                      CreationDate: '2010-10-01T12:34:56.789Z'
                      UserData: ...
                      SubnetId: subnet-12345678
                      PrivateIp: 10.0.0.4
                      SecurityGroups:
                      - SecurityGroupName: security-group-example
                        SecurityGroupId: sg-12345678
                      BsuOptimized: false
                      LaunchNumber: 0
                      NetId: vpc-12345678
                      Nics:
                      - SubnetId: subnet-12345678
                        State: in-use
                        LinkNic:
                          State: attached
                          DeviceNumber: 0
                          LinkNicId: eni-attach-12345678
                          DeleteOnVmDeletion: true
                        IsSourceDestChecked: true
                        PrivateDnsName: ip-10-0-0-4.eu-west-2.compute.internal
                        Description: Primary network interface
                        AccountId: '123456789012'
                        SecurityGroups:
                        - SecurityGroupName: security-group-example
                          SecurityGroupId: sg-12345678
                        MacAddress: A1:B2:C3:D4:E5:F6
                        NetId: vpc-12345678
                        NicId: eni-12345678
                        PrivateIps:
                        - PrivateDnsName: ip-10-0-0-4.eu-west-2.compute.internal
                          PrivateIp: 10.0.0.4
                          IsPrimary: true
                      Performance: high
                      Tags: []
                      ActionsOnNextBoot:
                        SecureBoot: none
                      PrivateDnsName: ip-10-0-0-4.eu-west-2.compute.internal
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                ex4:
                  summary: Creating a VM with a NIC
                  value:
                    Vms:
                    - VmType: tinav5.c1r1p2
                      VmInitiatedShutdownBehavior: stop
                      State: pending
                      StateReason: ''
                      RootDeviceType: ebs
                      RootDeviceName: /dev/sda1
                      IsSourceDestChecked: true
                      KeypairName: keypair-example
                      ImageId: ami-12345678
                      DeletionProtection: false
                      BootMode: legacy
                      Architecture: x86_64
                      NestedVirtualization: false
                      BlockDeviceMappings:
                      - DeviceName: /dev/sda1
                        Bsu:
                          VolumeId: vol-12345678
                          State: attaching
                          LinkDate: '2010-10-01T12:34:56.789Z'
                          DeleteOnVmDeletion: true
                      VmId: i-12345678
                      ReservationId: r-12345678
                      Hypervisor: xen
                      Placement:
                        Tenancy: default
                        SubregionName: eu-west-2a
                      ProductCodes:
                      - '0001'
                      CreationDate: '2010-10-01T12:34:56.789Z'
                      UserData: ...
                      SubnetId: subnet-12345678
                      PrivateIp: 10.0.0.4
                      SecurityGroups:
                      - SecurityGroupName: security-group-example
                        SecurityGroupId: sg-12345678
                      BsuOptimized: false
                      LaunchNumber: 0
                      NetId: vpc-12345678
                      Nics:
                      - SubnetId: subnet-12345678
                        State: in-use
                        LinkNic:
                          State: attached
                          DeviceNumber: 0
                          LinkNicId: eni-attach-12345678
                          DeleteOnVmDeletion: true
                        IsSourceDestChecked: true
                        PrivateDnsName: ip-10-0-0-4.eu-west-2.compute.internal
                        Description: Example NIC
                        AccountId: '123456789012'
                        SecurityGroups:
                        - SecurityGroupName: security-group-example
                          SecurityGroupId: sg-12345678
                        MacAddress: A1:B2:C3:D4:E5:F6
                        NetId: vpc-12345678
                        NicId: eni-12345678
                        PrivateIps:
                        - PrivateDnsName: ip-10-0-0-4.eu-west-2.compute.internal
                          PrivateIp: 10.0.0.4
                          IsPrimary: true
                      Performance: high
                      Tags: []
                      ActionsOnNextBoot:
                        SecureBoot: none
                      PrivateDnsName: ip-10-0-0-4.eu-west-2.compute.internal
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Vm
  /CreateVolume:
    post:
      description: |-
        Creates a Block Storage Unit (BSU) volume in a specified Region.<br />
        BSU volumes can be attached to a virtual machine (VM) in the same Subregion. You can create an empty volume or restore a volume from an existing snapshot.<br />
        You can create the following volume types: Enterprise (`io1`) for provisioned IOPS SSD volumes, Performance (`gp2`) for general purpose SSD volumes, or Magnetic (`standard`) volumes.<br /><br />
        For more information, see [About Volumes](https://docs.outscale.com/en/userguide/About-Volumes.html).
      operationId: CreateVolume
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVolumeRequest'
            examples:
              ex1:
                summary: Creating an io1 volume
                value:
                  VolumeType: io1
                  SubregionName: eu-west-2a
                  Size: 10
                  Iops: 100
              ex2:
                summary: Creating a volume from a snapshot
                value:
                  SnapshotId: snap-12345678
                  VolumeType: gp2
                  SubregionName: eu-west-2a
                  Size: 10
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateVolumeResponse'
              examples:
                ex1:
                  summary: Creating an io1 volume
                  value:
                    Volume:
                      VolumeId: vol-12345678
                      Tags: []
                      VolumeType: io1
                      SubregionName: eu-west-2a
                      State: creating
                      CreationDate: '2010-10-01T12:34:56.789Z'
                      Iops: 100
                      LinkedVolumes: []
                      Size: 10
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                ex2:
                  summary: Creating a volume from a snapshot
                  value:
                    Volume:
                      VolumeId: vol-12345678
                      Tags: []
                      VolumeType: gp2
                      SubregionName: eu-west-2a
                      State: creating
                      SnapshotId: snap-12345678
                      CreationDate: '2010-10-01T12:34:56.789Z'
                      Iops: 100
                      LinkedVolumes: []
                      Size: 10
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Volume
  /CreateVpnConnection:
    post:
      description: |-
        Creates a VPN connection between a specified virtual gateway and a specified client gateway.<br />
        You can create only one VPN connection between a virtual gateway and a client gateway.<br /><br />

        **[IMPORTANT]**<br />
        This action can be done only if the virtual gateway is in the `available` state.<br /><br />
        For more information, see [About VPN Connections](https://docs.outscale.com/en/userguide/About-VPN-Connections.html).
      operationId: CreateVpnConnection
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVpnConnectionRequest'
            examples:
              ex1:
                value:
                  ClientGatewayId: cgw-12345678
                  VirtualGatewayId: vgw-12345678
                  ConnectionType: ipsec.1
                  StaticRoutesOnly: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateVpnConnectionResponse'
              examples:
                ex1:
                  value:
                    VpnConnection:
                      Routes: []
                      Tags: []
                      ClientGatewayConfiguration: ...
                      StaticRoutesOnly: true
                      VirtualGatewayId: vgw-12345678
                      ConnectionType: ipsec.1
                      ClientGatewayId: cgw-12345678
                      State: pending
                      VgwTelemetries:
                      - StateDescription: IPSEC IS DOWN
                        AcceptedRouteCount: 0
                        LastStateChangeDate: '2017-05-10T12:34:56.789Z'
                        OutsideIpAddress: 192.0.2.0
                      VpnConnectionId: vpn-12345678
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
      tags:
      - VpnConnection
  /CreateVpnConnectionRoute:
    post:
      description: |-
        Creates a static route to a VPN connection.<br />
        This enables you to select the network flows sent by the virtual gateway to the target VPN connection.<br /><br />
        For more information, see [About Routing Configuration for VPN Connections](https://docs.outscale.com/en/userguide/About-Routing-Configuration-for-VPN-Connections.html).
      operationId: CreateVpnConnectionRoute
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVpnConnectionRouteRequest'
            examples:
              ex1:
                value:
                  VpnConnectionId: vpn-12345678
                  DestinationIpRange: 10.0.0.0/16
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateVpnConnectionRouteResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
      tags:
      - VpnConnection
  /DeleteAccessKey:
    post:
      description: |-
        Deletes the specified access key of either your root account or an EIM user.<br /><br />
        The access key of an EIM user must be in the `INACTIVE` state to be deleted.
      operationId: DeleteAccessKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteAccessKeyRequest'
            examples:
              ex1:
                summary: Deleting one of your own access keys (if you are the root account or an EIM user)
                value:
                  AccessKeyId: ABCDEFGHIJ0123456789
              ex2:
                summary: Deleting the access key of a specific EIM user
                value:
                  AccessKeyId: ABCDEFGHIJ0123456789
                  UserName: example-user
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteAccessKeyResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
      security:
      - ApiKeyAuthSec: []
      - BasicAuth: []
      tags:
      - AccessKey
  /DeleteApiAccessRule:
    post:
      description: |-
        Deletes a specified API access rule.<br /><br />

        **[IMPORTANT]**<br />
        You cannot delete the last remaining API access rule. However, if you delete all the API access rules that allow you to access the APIs, you need to contact the Support team to regain access. For more information, see [Technical Support](https://docs.outscale.com/en/userguide/Technical-Support.html).
      operationId: DeleteApiAccessRule
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteApiAccessRuleRequest'
            examples:
              ex1:
                value:
                  ApiAccessRuleId: aar-1234567890abcdef1234567890abcdef
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteApiAccessRuleResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
      security:
      - ApiKeyAuthSec: []
      - BasicAuth: []
      tags:
      - ApiAccessRule
  /DeleteCa:
    post:
      description: Deletes a specified Client Certificate Authority (CA).
      operationId: DeleteCa
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteCaRequest'
            examples:
              ex1:
                value:
                  CaId: ca-fedcba0987654321fedcba0987654321
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteCaResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
      security:
      - ApiKeyAuthSec: []
      - BasicAuth: []
      tags:
      - Ca
  /DeleteClientGateway:
    post:
      description: |-
        Deletes a client gateway.<br />
        You must delete the VPN connection before deleting the client gateway.
      operationId: DeleteClientGateway
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteClientGatewayRequest'
            examples:
              ex1:
                value:
                  ClientGatewayId: cgw-12345678
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteClientGatewayResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
      tags:
      - ClientGateway
  /DeleteDedicatedGroup:
    post:
      description: |-
        > [WARNING]<br />
        > This feature is currently in beta.<br />

        Deletes a specified dedicated group of virtual machines (VMs).<br />

        **[WARNING]**<br />
        A dedicated group can be deleted only if no VM or Net is in the dedicated group. Otherwise, you need to force the deletion.<br />
        If you force the deletion:<br />
        - all VMs are terminated.<br />
        - all Nets are deleted, and all resources associated with Nets are detached.
      operationId: DeleteDedicatedGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteDedicatedGroupRequest'
            examples:
              ex1:
                summary: Deleting a dedicated group without any resource in it.
                value:
                  DedicatedGroupId: ded-12345678
              ex2:
                summary: Forcing the deletion of a dedicated group and all resources in it.
                value:
                  DedicatedGroupId: ded-12345678
                  Force: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteDedicatedGroupResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - DedicatedGroup
  /DeleteDhcpOptions:
    post:
      description: |-
        Deletes a specified DHCP options set.<br />
        Before deleting a DHCP options set, you must disassociate it from the Nets you associated it with. To do so, you need to associate with each Net a new set of DHCP options, or the `default` one if you do not want to associate any DHCP options with the Net.<br /><br />

        **[IMPORTANT]**<br />
        You cannot delete the `default` set.
      operationId: DeleteDhcpOptions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteDhcpOptionsRequest'
            examples:
              ex1:
                value:
                  DhcpOptionsSetId: dopt-12345678
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteDhcpOptionsResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
      tags:
      - DhcpOption
  /DeleteDirectLink:
    post:
      description: |-
        Deletes a specified DirectLink.<br />
        Before deleting a DirectLink, ensure that all your DirectLink interfaces related to this DirectLink are deleted.
      operationId: DeleteDirectLink
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteDirectLinkRequest'
            examples:
              ex1:
                value:
                  DirectLinkId: dxcon-12345678
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteDirectLinkResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
      tags:
      - DirectLink
  /DeleteDirectLinkInterface:
    post:
      description: Deletes a specified DirectLink interface.
      operationId: DeleteDirectLinkInterface
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteDirectLinkInterfaceRequest'
            examples:
              ex1:
                value:
                  DirectLinkInterfaceId: dxvif-12345678
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteDirectLinkInterfaceResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
      tags:
      - DirectLinkInterface
  /DeleteExportTask:
    post:
      description: |-
        Deletes an export task.<br />
        If the export task is not in the `active` or `pending` state, the command fails and an error is returned.
      operationId: DeleteExportTask
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteExportTaskRequest'
            examples:
              ex1:
                summary: Deleting an image export task
                value:
                  ExportTaskId: image-export-12345678
              ex2:
                summary: Deleting a snapshot export task
                value:
                  ExportTaskId: snap-export-12345678
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteExportTaskResponse'
              examples:
                ex1:
                  summary: Deleting an image export task
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                ex2:
                  summary: Deleting a snapshot export task
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
      tags:
      - Task
  /DeleteFlexibleGpu:
    post:
      description: |-
        Releases a flexible GPU (fGPU) from your account.<br />
        The fGPU becomes free to be used by someone else.
      operationId: DeleteFlexibleGpu
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteFlexibleGpuRequest'
            examples:
              ex1:
                value:
                  FlexibleGpuId: fgpu-12345678
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteFlexibleGpuResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
      tags:
      - FlexibleGpu
  /DeleteImage:
    post:
      description: Deletes an OUTSCALE machine image (OMI) so that you cannot use it anymore to launch virtual machines (VMs). However, you can still use VMs already launched from this OMI.
      operationId: DeleteImage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteImageRequest'
            examples:
              ex1:
                value:
                  ImageId: ami-12345678
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteImageResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Image
  /DeleteInternetService:
    post:
      description: |-
        Deletes an internet service.<br />
        Before deleting an internet service, you must detach it from any Net it is attached to.
      operationId: DeleteInternetService
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteInternetServiceRequest'
            examples:
              ex1:
                value:
                  InternetServiceId: igw-12345678
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteInternetServiceResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - InternetService
  /DeleteKeypair:
    post:
      description: |-
        Deletes the specified keypair.<br />
        This action deletes the public key stored by 3DS OUTSCALE, thus deleting the keypair.
      operationId: DeleteKeypair
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteKeypairRequest'
            examples:
              ex1:
                summary: Deleting a keypair with its name
                value:
                  KeypairName: keypair-example
              ex2:
                summary: Deleting a keypair with its ID
                value:
                  KeypairId: key-abcdef1234567890abcdef1234567890
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteKeypairResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Keypair
  /DeleteListenerRule:
    post:
      description: |-
        Deletes a listener rule.<br />
        The previously active rule is disabled after deletion.
      operationId: DeleteListenerRule
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteListenerRuleRequest'
            examples:
              ex1:
                value:
                  ListenerRuleName: example-listener-rule
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteListenerRuleResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
      tags:
      - Listener
  /DeleteLoadBalancer:
    post:
      description: Deletes a specified load balancer.
      operationId: DeleteLoadBalancer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteLoadBalancerRequest'
            examples:
              ex1:
                value:
                  LoadBalancerName: example-lbu
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteLoadBalancerResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
      tags:
      - LoadBalancer
  /DeleteLoadBalancerListeners:
    post:
      description: Deletes listeners of a specified load balancer.
      operationId: DeleteLoadBalancerListeners
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteLoadBalancerListenersRequest'
            examples:
              ex1:
                value:
                  LoadBalancerName: example-lbu
                  LoadBalancerPorts:
                  - 80
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteLoadBalancerListenersResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    LoadBalancer:
                      Tags: []
                      SourceSecurityGroup:
                        SecurityGroupName: security-group-example
                        SecurityGroupAccountId: '123456789012'
                      SecuredCookies: false
                      Subnets:
                      - subnet-12345678
                      NetId: vpc-12345678
                      BackendVmIds: []
                      ApplicationStickyCookiePolicies: []
                      SecurityGroups:
                      - sg-12345678
                      LoadBalancerType: internal
                      AccessLog:
                        PublicationInterval: 60
                        IsEnabled: false
                      DnsName: internal-example-lbu.123456789.eu-west-2.lbu.outscale.com
                      HealthCheck:
                        UnhealthyThreshold: 2
                        Timeout: 5
                        CheckInterval: 30
                        Protocol: TCP
                        HealthyThreshold: 10
                        Port: 80
                      LoadBalancerStickyCookiePolicies: []
                      SubregionNames:
                      - eu-west-2a
                      Listeners: []
                      LoadBalancerName: example-lbu
          description: The HTTP 200 response (OK).
      tags:
      - Listener
  /DeleteLoadBalancerPolicy:
    post:
      description: |-
        Deletes a specified policy from a load balancer.<br />
        In order to be deleted, the policy must not be enabled for any listener.
      operationId: DeleteLoadBalancerPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteLoadBalancerPolicyRequest'
            examples:
              ex1:
                value:
                  LoadBalancerName: example-lbu
                  PolicyName: example-browser-policy
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteLoadBalancerPolicyResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    LoadBalancer:
                      Tags: []
                      SourceSecurityGroup:
                        SecurityGroupName: default
                        SecurityGroupAccountId: '123456789012'
                      SecuredCookies: false
                      PublicIp: 192.0.2.0
                      Subnets:
                      - subnet-12345678
                      NetId: vpc-12345678
                      BackendVmIds: []
                      ApplicationStickyCookiePolicies: []
                      SecurityGroups:
                      - sg-12345678
                      LoadBalancerType: internet-facing
                      AccessLog:
                        PublicationInterval: 60
                        IsEnabled: false
                      DnsName: example-lbu-123456789.eu-west-2.lbu.outscale.com
                      HealthCheck:
                        UnhealthyThreshold: 2
                        Timeout: 5
                        CheckInterval: 30
                        Protocol: TCP
                        HealthyThreshold: 10
                        Port: 80
                      LoadBalancerStickyCookiePolicies: []
                      SubregionNames:
                      - eu-west-2a
                      Listeners:
                      - BackendPort: 80
                        BackendProtocol: HTTP
                        LoadBalancerPort: 80
                        LoadBalancerProtocol: HTTP
                      LoadBalancerName: example-lbu
          description: The HTTP 200 response (OK).
      tags:
      - LoadBalancerPolicy
  /DeleteLoadBalancerTags:
    post:
      description: Deletes one or more tags from the specified load balancers.
      operationId: DeleteLoadBalancerTags
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteLoadBalancerTagsRequest'
            examples:
              ex1:
                value:
                  LoadBalancerNames:
                  - example-lbu
                  Tags:
                  - Key: key1
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteLoadBalancerTagsResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
      tags:
      - LoadBalancer
  /DeleteNatService:
    post:
      description: |-
        Deletes a specified network address translation (NAT) service.<br />
        This action disassociates the public IP from the NAT service, but does not release this public IP from your account. However, it does not delete any NAT service routes in your route tables.
      operationId: DeleteNatService
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteNatServiceRequest'
            examples:
              ex1:
                value:
                  NatServiceId: nat-12345678
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteNatServiceResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - NatService
  /DeleteNet:
    post:
      description: |-
        Deletes a specified Net.<br />
        Before deleting the Net, you need to delete or detach all the resources associated with the Net:<br /><br />

        * Virtual machines (VMs)<br />
        * Net peerings<br />
        * Custom route tables<br />
        * Public IPs allocated to resources in the Net<br />
        * Network Interface Cards (NICs) created in the Subnets<br />
        * Virtual gateways, internet services and NAT services<br />
        * Load balancers<br />
        * Security groups<br />
        * Subnets
      operationId: DeleteNet
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteNetRequest'
            examples:
              ex1:
                value:
                  NetId: vpc-12345678
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteNetResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Net
  /DeleteNetAccessPoint:
    post:
      description: |-
        Deletes a specified Net access point.<br />
        This action also deletes the corresponding routes added to the route tables you specified for the Net access point.
      operationId: DeleteNetAccessPoint
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteNetAccessPointRequest'
            examples:
              ex1:
                value:
                  NetAccessPointId: vpce-12345678
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteNetAccessPointResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
      tags:
      - NetAccessPoint
  /DeleteNetPeering:
    post:
      description: |-
        Deletes a Net peering.<br />
        If the Net peering is in the `active` state, it can be deleted either by the owner of the requester Net or the owner of the peer Net.<br />
        If it is in the `pending-acceptance` state, it can be deleted only by the owner of the requester Net.<br />
        If it is in the `rejected`, `failed`, or `expired` states, it cannot be deleted.
      operationId: DeleteNetPeering
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteNetPeeringRequest'
            examples:
              ex1:
                value:
                  NetPeeringId: pcx-12345678
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteNetPeeringResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 409 response (Conflict).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - NetPeering
  /DeleteNic:
    post:
      description: |-
        Deletes the specified network interface card (NIC).<br />
        The network interface must not be attached to any virtual machine (VM).
      operationId: DeleteNic
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteNicRequest'
            examples:
              ex1:
                value:
                  NicId: eni-12345678
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteNicResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Nic
  /DeletePolicy:
    post:
      description: |-
        Deletes a managed policy.<br />
        Before deleting a managed policy, you must unlink all users linked to it and delete all the versions of the policy, except the default one, using the `DeletePolicyVersion` method.
      operationId: DeletePolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeletePolicyRequest'
            examples:
              ex1:
                value:
                  PolicyOrn: orn:ows:idauth::012345678910:policy/example/example-user-policy
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeletePolicyResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
      tags:
      - Policy
  /DeletePolicyVersion:
    post:
      description: Deletes a specified version of a managed policy, if it is not set as the default one.
      operationId: DeletePolicyVersion
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeletePolicyVersionRequest'
            examples:
              ex1:
                value:
                  PolicyOrn: orn:ows:idauth::012345678910:policy/example/example-user-policy
                  VersionId: v1
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeletePolicyVersionResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
      tags:
      - Policy
  /DeleteProductType:
    post:
      description: |-
        Deletes a specified product type that belongs to you.<br />

        **[WARNING]**<br />
        The product type must not be associated with one or more OMIs to be deleted. Otherwise, you need to force the deletion.<br />
        If you force the deletion, the product type is deleted and remains associated with the OMIs.<br />
      operationId: DeleteProductType
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteProductTypeRequest'
            examples:
              ex1:
                value:
                  ProductTypeId: pty-12345678
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteProductTypeResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - ProductType
  /DeletePublicIp:
    post:
      description: |-
        Releases a public IP.<br />
        You can release a public IP associated with your account. This address is released in the public IP pool and can be used by someone else. Before releasing a public IP, ensure you updated all your resources communicating with this address.
      operationId: DeletePublicIp
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeletePublicIpRequest'
            examples:
              ex1:
                value:
                  PublicIp: 192.0.2.0
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeletePublicIpResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - PublicIp
  /DeleteRoute:
    post:
      description: Deletes a route from a specified route table.
      operationId: DeleteRoute
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteRouteRequest'
            examples:
              ex1:
                value:
                  RouteTableId: rtb-12345678
                  DestinationIpRange: 198.51.100.0/24
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteRouteResponse'
              examples:
                ex1:
                  value:
                    RouteTable:
                      Routes:
                      - DestinationIpRange: 10.0.0.0/16
                        CreationMethod: CreateRouteTable
                        State: active
                      LinkRouteTables: []
                      NetId: vpc-12345678
                      Tags: []
                      RoutePropagatingVirtualGateways: []
                      RouteTableId: rtb-12345678
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Route
  /DeleteRouteTable:
    post:
      description: |-
        Deletes a specified route table.<br />
        Before deleting a route table, you must disassociate it from any Subnet. You cannot delete the main route table.
      operationId: DeleteRouteTable
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteRouteTableRequest'
            examples:
              ex1:
                value:
                  RouteTableId: rtb-12345678
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteRouteTableResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - RouteTable
  /DeleteSecurityGroup:
    post:
      description: |-
        Deletes a specified security group.<br />
        You can specify either the name of the security group or its ID.<br />
        This action fails if the specified group is associated with a virtual machine (VM) or referenced by another security group.
      operationId: DeleteSecurityGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteSecurityGroupRequest'
            examples:
              ex1:
                value:
                  SecurityGroupId: sg-12345678
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteSecurityGroupResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - SecurityGroup
  /DeleteSecurityGroupRule:
    post:
      description: |-
        Deletes one or more inbound or outbound rules from a security group. For the rule to be deleted, the values specified in the deletion request must exactly match the value of the existing rule.<br />
        In case of TCP and UDP protocols, you have to indicate the destination port or range of ports. In case of ICMP protocol, you have to specify the ICMP type and code numbers.<br />
        Rules (IP permissions) consist of the protocol, IP range or source security group.<br />
        To remove outbound access to a destination security group, we recommend to use a set of IP permissions. We also recommend to specify the protocol in a set of IP permissions.
      operationId: DeleteSecurityGroupRule
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteSecurityGroupRuleRequest'
            examples:
              ex1:
                summary: Deleting an inbound rule from an IP range
                value:
                  Flow: Inbound
                  SecurityGroupId: sg-12345678
                  FromPortRange: 80
                  ToPortRange: 80
                  IpProtocol: tcp
                  IpRange: 10.0.0.0/16
              ex2:
                summary: Deleting an inbound rule from another security group
                value:
                  Flow: Inbound
                  SecurityGroupId: sg-12345678
                  Rules:
                  - FromPortRange: 22
                    ToPortRange: 22
                    IpProtocol: tcp
                    SecurityGroupsMembers:
                    - AccountId: '123456789012'
                      SecurityGroupName: another-security-group
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteSecurityGroupRuleResponse'
              examples:
                ex1:
                  summary: Deleting an inbound rule from an IP range
                  value:
                    SecurityGroup:
                      Tags: []
                      SecurityGroupName: security-group-example
                      OutboundRules:
                      - FromPortRange: -1
                        IpProtocol: '-1'
                        ToPortRange: -1
                        IpRanges:
                        - 0.0.0.0/0
                      SecurityGroupId: sg-12345678
                      AccountId: '123456789012'
                      Description: Example of security group
                      InboundRules: []
                      NetId: vpc-12345678
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                ex2:
                  summary: Creating an inbound rule from another security group
                  value:
                    SecurityGroup:
                      Tags: []
                      SecurityGroupName: security-group-example
                      OutboundRules:
                      - FromPortRange: -1
                        IpProtocol: '-1'
                        ToPortRange: -1
                        IpRanges:
                        - 0.0.0.0/0
                      SecurityGroupId: sg-12345678
                      AccountId: '123456789012'
                      Description: Example of security group
                      InboundRules: []
                      NetId: vpc-12345678
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - SecurityGroupRule
  /DeleteServerCertificate:
    post:
      description: Deletes a specified server certificate.
      operationId: DeleteServerCertificate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteServerCertificateRequest'
            examples:
              ex1:
                value:
                  Name: server-cert-example
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteServerCertificateResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
      tags:
      - ServerCertificate
  /DeleteSnapshot:
    post:
      description: |-
        Deletes a specified snapshot.<br />
        You cannot delete a snapshot that is currently used by an OUTSCALE machine image (OMI). To do so, you first need to delete the corresponding OMI. For more information, see the [DeleteImage](#deleteimage) method.
      operationId: DeleteSnapshot
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteSnapshotRequest'
            examples:
              ex1:
                value:
                  SnapshotId: snap-12345678
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteSnapshotResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Snapshot
  /DeleteSubnet:
    post:
      description: |-
        Deletes a specified Subnet.<br />
        Before deleting the Subnet, you need to delete all resources associated with the Subnet:<br /><br />

        * Virtual machines (VMs)<br />
        * Network Interface Cards (NICs)<br />
        * NAT services<br />
        * Load balancers
      operationId: DeleteSubnet
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteSubnetRequest'
            examples:
              ex1:
                value:
                  SubnetId: subnet-12345678
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteSubnetResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Subnet
  /DeleteTags:
    post:
      description: Deletes one or more tags from the specified resources.
      operationId: DeleteTags
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteTagsRequest'
            examples:
              ex1:
                value:
                  ResourceIds:
                  - i-12345678
                  Tags:
                  - Key: key1
                    Value: value1
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteTagsResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Tag
  /DeleteUser:
    post:
      description: Deletes a specified EIM user. The EIM user must not belong to any group, nor have any key or linked policy.
      operationId: DeleteUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteUserRequest'
            examples:
              ex1:
                value:
                  UserName: example-user
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteUserResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
      tags:
      - User
  /DeleteUserGroup:
    post:
      description: |-
        Deletes a specified user group.<br />

        **[WARNING]**<br />
        The user group must be empty of any user and must not have any linked policy. Otherwise, you need to force the deletion.<br />
        If you force the deletion, all inline policies will be deleted with the user group.<br />
      operationId: DeleteUserGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteUserGroupRequest'
            examples:
              ex1:
                value:
                  Force: false
                  Path: /example/
                  UserGroupName: example-usergroup
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteUserGroupResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
      tags:
      - UserGroup
  /DeleteUserGroupPolicy:
    post:
      description: Deletes a specified inline policy from a specific group.
      operationId: DeleteUserGroupPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteUserGroupPolicyRequest'
            examples:
              ex1:
                value:
                  PolicyName: example-usergroup-policy
                  UserGroupName: example-usergroup
                  UserGroupPath: /example/
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteUserGroupPolicyResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
      tags:
      - Policy
  /DeleteUserPolicy:
    post:
      description: Deletes a specified inline policy from a specific user.
      operationId: DeleteUserPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteUserPolicyRequest'
            examples:
              ex1:
                value:
                  PolicyName: example-user-policy
                  UserName: example-user
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteUserPolicyResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
      tags:
      - Policy
  /DeleteVirtualGateway:
    post:
      description: |-
        Deletes a specified virtual gateway.<br />
        Before deleting a virtual gateway, we recommend to detach it from the Net and delete the VPN connection.
      operationId: DeleteVirtualGateway
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteVirtualGatewayRequest'
            examples:
              ex1:
                value:
                  VirtualGatewayId: vgw-12345678
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteVirtualGatewayResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
      tags:
      - VirtualGateway
  /DeleteVmGroup:
    post:
      description: |-
        > [WARNING]<br />
        > This feature is currently under development and may not function properly.<br />

        Deletes a specified VM group.
      operationId: DeleteVmGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteVmGroupRequest'
            examples:
              ex1:
                value:
                  VmGroupId: vmgroup-12345678901234567890123456789012
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteVmGroupResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - VmGroup
  /DeleteVmTemplate:
    post:
      description: |-
        > [WARNING]<br />
        > This feature is currently under development and may not function properly.<br />

        Deletes a virtual machine (VM) template.<br />
        You cannot delete a template currently used by a VM group.
      operationId: DeleteVmTemplate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteVmTemplateRequest'
            examples:
              ex1:
                value:
                  VmTemplateId: vmtemplate-98765432109876543210987654321012
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteVmTemplateResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
      tags:
      - VmTemplate
  /DeleteVms:
    post:
      description: |-
        Terminates one or more virtual machines (VMs).<br />
        This operation is idempotent, that means that all calls succeed if you terminate a VM more than once.
      operationId: DeleteVms
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteVmsRequest'
            examples:
              ex1:
                value:
                  VmIds:
                  - i-12345678
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteVmsResponse'
              examples:
                ex1:
                  value:
                    Vms:
                    - VmId: i-12345678
                      PreviousState: running
                      CurrentState: shutting-down
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Vm
  /DeleteVolume:
    post:
      description: |-
        Deletes a specified Block Storage Unit (BSU) volume.<br />
        You can delete available volumes only, that is, volumes that are not attached to a virtual machine (VM).
      operationId: DeleteVolume
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteVolumeRequest'
            examples:
              ex1:
                value:
                  VolumeId: vol-12345678
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteVolumeResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Volume
  /DeleteVpnConnection:
    post:
      description: |-
        Deletes a specified VPN connection.<br />
        If you want to delete a Net and all its dependencies, we recommend to detach the virtual gateway from the Net and delete the Net before deleting the VPN connection. This enables you to delete the Net without waiting for the VPN connection to be deleted.
      operationId: DeleteVpnConnection
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteVpnConnectionRequest'
            examples:
              ex1:
                value:
                  VpnConnectionId: vpn-12345678
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteVpnConnectionResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
      tags:
      - VpnConnection
  /DeleteVpnConnectionRoute:
    post:
      description: Deletes a static route to a VPN connection previously created using the CreateVpnConnectionRoute method.
      operationId: DeleteVpnConnectionRoute
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteVpnConnectionRouteRequest'
            examples:
              ex1:
                value:
                  VpnConnectionId: vpn-12345678
                  DestinationIpRange: 10.0.0.0/16
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteVpnConnectionRouteResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
      tags:
      - VpnConnection
  /DeregisterVmsInLoadBalancer:
    post:
      description: |-
        > [WARNING]<br />
        > Deprecated: This call is deprecated and will be removed.<br />

        Deregisters a specified virtual machine (VM) from a load balancer.
      operationId: DeregisterVmsInLoadBalancer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeregisterVmsInLoadBalancerRequest'
            examples:
              ex1:
                value:
                  LoadBalancerName: example-lbu
                  BackendVmIds:
                  - i-12345678
                  - i-87654321
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeregisterVmsInLoadBalancerResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
      tags:
      - LoadBalancer
  /DisableOutscaleLogin:
    post:
      description: Disables the possibility of logging in using the Outscale credentials of your root account when identity federation is activated.
      operationId: DisableOutscaleLogin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DisableOutscaleLoginRequest'
            examples:
              ex1:
                value: {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DisableOutscaleLoginResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
      tags:
      - IdentityProvider
  /DisableOutscaleLoginForUsers:
    post:
      description: Disables the possibility of logging in using the Outscale credentials of your EIM users when identity federation is activated.
      operationId: DisableOutscaleLoginForUsers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DisableOutscaleLoginRequest'
            examples:
              ex1:
                value: {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DisableOutscaleLoginResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
      tags:
      - IdentityProvider
  /DisableOutscaleLoginPerUsers:
    post:
      description: Disables the possibility for one or more specific users to log in using their Outscale credentials when identity federation is activated.
      operationId: DisableOutscaleLoginPerUsers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DisableOutscaleLoginPerUsersRequest'
            examples:
              ex1:
                value:
                  UserNames:
                  - example-user
                  - test-user
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DisableOutscaleLoginPerUsersResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
      tags:
      - IdentityProvider
  /EnableOutscaleLogin:
    post:
      description: Enables the possibility of logging in using the Outscale credentials of your root account when identity federation is activated.
      operationId: EnableOutscaleLogin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnableOutscaleLoginRequest'
            examples:
              ex1:
                value: {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnableOutscaleLoginResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
      tags:
      - IdentityProvider
  /EnableOutscaleLoginForUsers:
    post:
      description: Enables the possibility for all your EIM users to log in using their Outscale credentials when identity federation is activated.
      operationId: EnableOutscaleLoginForUsers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnableOutscaleLoginForUsersRequest'
            examples:
              ex1:
                value: {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnableOutscaleLoginForUsersResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
      tags:
      - IdentityProvider
  /EnableOutscaleLoginPerUsers:
    post:
      description: Enables the possibility for one or more specific users to log in using their Outscale credentials when identity federation is activated.
      operationId: EnableOutscaleLoginPerUsers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnableOutscaleLoginPerUsersRequest'
            examples:
              ex1:
                value:
                  UserNames:
                  - example-user
                  - test-user
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnableOutscaleLoginPerUsersResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
      tags:
      - IdentityProvider
  /LinkFlexibleGpu:
    post:
      description: |-
        Attaches one of your allocated flexible GPUs (fGPUs) to one of your virtual machines (VMs).<br />
        To complete the linking of the fGPU, you need to do a stop/start of the VM. A simple restart is not sufficient, as the linking of the fGPU is done when the VM goes through the `stopped` state. For the difference between stop/start and restart, see [About VM Lifecycle](https://docs.outscale.com/en/userguide/About-VM-Lifecycle.html).<br /><br />

        **[NOTE]**<br />
        You can attach fGPUs only to VMs with the `highest` (1) performance flag. For more information see [About Flexible GPUs](https://docs.outscale.com/en/userguide/About-Flexible-GPUs.html) and [VM Types](https://docs.outscale.com/en/userguide/VM-Types.html).
      operationId: LinkFlexibleGpu
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LinkFlexibleGpuRequest'
            examples:
              ex1:
                value:
                  FlexibleGpuId: fgpu-12345678
                  VmId: i-12345678
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinkFlexibleGpuResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
      tags:
      - FlexibleGpu
  /LinkInternetService:
    post:
      description: |-
        Attaches an internet service to a Net.<br />
        To enable the connection between the Internet and a Net, you must attach an internet service to this Net.
      operationId: LinkInternetService
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LinkInternetServiceRequest'
            examples:
              ex1:
                value:
                  InternetServiceId: igw-12345678
                  NetId: vpc-12345678
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinkInternetServiceResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - InternetService
  /LinkLoadBalancerBackendMachines:
    post:
      description: |-
        Attaches one or more virtual machines (VMs) to a specified load balancer. You need to specify at least the `BackendIps` or the `BackendVmIds` parameter.<br />
        The VMs can be in different Subnets and different Subregions than the load balancer, as long as the VMs and load balancers are all in the public Cloud or all in the same Net. It may take a little time for a VM to be registered with the load balancer. Once the VM is registered with a load balancer, it receives traffic and requests from this load balancer and is called a backend VM.
      operationId: LinkLoadBalancerBackendMachines
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LinkLoadBalancerBackendMachinesRequest'
            examples:
              ex1:
                summary: Linking VMs to a load balancer
                value:
                  LoadBalancerName: example-lbu
                  BackendVmIds:
                  - i-12345678
                  - i-87654321
              ex2:
                summary: Linking public IPs to a load balancer
                value:
                  LoadBalancerName: example-lbu
                  BackendIps:
                  - 192.0.2.0
                  - 198.51.100.0
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinkLoadBalancerBackendMachinesResponse'
              examples:
                ex1:
                  summary: Linking VMs to a load balancer
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                ex2:
                  summary: Linking public IPs to a load balancer
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
      tags:
      - LoadBalancer
  /LinkManagedPolicyToUserGroup:
    post:
      description: Links a managed policy to a specific group. This policy applies to all the users contained in this group.
      operationId: LinkManagedPolicyToUserGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LinkManagedPolicyToUserGroupRequest'
            examples:
              ex1:
                value:
                  PolicyOrn: orn:ows:idauth::012345678910:policy/example/example-user-policy
                  UserGroupName: example-usergroup
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinkManagedPolicyToUserGroupResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
      tags:
      - Policy
  /LinkNic:
    post:
      description: |-
        Attaches a network interface card (NIC) to a virtual machine (VM).<br />
        The interface and the VM must be in the same Subregion. The VM can be either `running` or `stopped`. The NIC must be in the `available` state. For more information, see [Attaching a NIC to a VM](https://docs.outscale.com/en/userguide/Attaching-a-NIC-to-a-VM.html).
      operationId: LinkNic
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LinkNicRequest'
            examples:
              ex1:
                value:
                  NicId: eni-12345678
                  VmId: i-12345678
                  DeviceNumber: 1
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinkNicResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    LinkNicId: eni-attach-12345678
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Nic
  /LinkPolicy:
    post:
      description: Links a managed policy to a specific user.
      operationId: LinkPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LinkPolicyRequest'
            examples:
              ex1:
                value:
                  PolicyOrn: orn:ows:idauth::012345678910:policy/example/example-user-policy
                  UserName: example-user
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinkPolicyResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
      tags:
      - Policy
  /LinkPrivateIps:
    post:
      description: Assigns one or more secondary private IPs to a specified network interface card (NIC). This action is only available in a Net. The private IPs to be assigned can be added individually using the `PrivateIps` parameter, or you can specify the number of private IPs to be automatically chosen within the Subnet range using the `SecondaryPrivateIpCount` parameter. You can specify only one of these two parameters. If none of these parameters are specified, a private IP is chosen within the Subnet range.
      operationId: LinkPrivateIps
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LinkPrivateIpsRequest'
            examples:
              ex1:
                summary: Linking specific secondary private IPs to a NIC
                value:
                  NicId: eni-12345678
                  PrivateIps:
                  - 10.0.0.6
                  - 10.0.0.7
              ex2:
                summary: Linking a number of random secondary private IPs to a NIC
                value:
                  NicId: eni-12345678
                  SecondaryPrivateIpCount: 3
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinkPrivateIpsResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Nic
  /LinkPublicIp:
    post:
      description: |-
        Associates a public IP with a virtual machine (VM) or a network interface card (NIC), in the public Cloud or in a Net. You can associate a public IP with only one VM or network interface at a time.<br />
        To associate a public IP in a Net, ensure that the Net has an internet service attached. For more information, see the [LinkInternetService](#linkinternetservice) method.<br />
        By default, the public IP is disassociated every time you stop and start the VM. For a persistent association, you can add the `osc.fcu.eip.auto-attach` tag to the VM with the public IP as value. For more information, see the [CreateTags](#createtags) method.<br /><br />

        **[IMPORTANT]**<br />
        You can associate a public IP with a network address translation (NAT) service only when creating the NAT service. To modify its public IP, you need to delete the NAT service and re-create it with the new public IP. For more information, see the [CreateNatService](#createnatservice) method.
      operationId: LinkPublicIp
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LinkPublicIpRequest'
            examples:
              ex1:
                summary: Linking a public IP to a VM
                value:
                  PublicIp: 192.0.2.0
                  VmId: i-12345678
              ex2:
                summary: Linking a public IP to a NIC
                value:
                  PublicIp: 192.0.2.0
                  NicId: eni-12345678
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinkPublicIpResponse'
              examples:
                ex1:
                  summary: Linking a public IP to a VM
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    LinkPublicIpId: eipassoc-12345678
                ex2:
                  summary: Linking a public IP to a NIC
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    LinkPublicIpId: eipassoc-12345678
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - PublicIp
  /LinkRouteTable:
    post:
      description: |-
        Associates a Subnet with a route table.<br />
        The Subnet and the route table must be in the same Net. The traffic is routed according to the route table defined within this Net. You can associate a route table with several Subnets.
      operationId: LinkRouteTable
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LinkRouteTableRequest'
            examples:
              ex1:
                value:
                  RouteTableId: rtb-12345678
                  SubnetId: subnet-12345678
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinkRouteTableResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    LinkRouteTableId: rtbassoc-12345678
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - RouteTable
  /LinkVirtualGateway:
    post:
      description: |-
        Attaches a virtual gateway to a Net.

        **[IMPORTANT]**<br />
        This action can be done only if the virtual gateway is in the `available` state.
      operationId: LinkVirtualGateway
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LinkVirtualGatewayRequest'
            examples:
              ex1:
                value:
                  VirtualGatewayId: vgw-12345678
                  NetId: vpc-12345678
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinkVirtualGatewayResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    NetToVirtualGatewayLink:
                      State: attached
                      NetId: vpc-12345678
          description: The HTTP 200 response (OK).
      tags:
      - VirtualGateway
  /LinkVolume:
    post:
      description: |-
        Attaches a Block Storage Unit (BSU) volume to a virtual machine (VM).<br />
        The volume and the VM must be in the same Subregion. The VM can be running or stopped. The volume is attached to the specified VM device.
      operationId: LinkVolume
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LinkVolumeRequest'
            examples:
              ex1:
                value:
                  VolumeId: vol-12345678
                  VmId: i-12345678
                  DeviceName: /dev/sdb
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinkVolumeResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Volume
  /PutUserGroupPolicy:
    post:
      description: |-
        Creates or updates an inline policy included in a specified group.<br />
        The policy is automatically applied to all the users of the group after its creation.
      operationId: PutUserGroupPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutUserGroupPolicyRequest'
            examples:
              ex1:
                value:
                  PolicyDocument: '{"Statement": [ {"Effect": "Allow", "Action": ["*"], "Resource": ["*"]} ]}'
                  PolicyName: example-usergroup-policy
                  UserGroupName: example-usergroup
                  UserGroupPath: /example/
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutUserGroupPolicyResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
      tags:
      - Policy
  /PutUserPolicy:
    post:
      description: |-
        Creates or updates an inline policy included in a specified user.<br />
        The policy is automatically applied to the user after its creation.
      operationId: PutUserPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutUserPolicyRequest'
            examples:
              ex1:
                value:
                  PolicyDocument: '{"Statement": [ {"Effect": "Allow", "Action": ["*"], "Resource": ["*"]} ]}'
                  PolicyName: example-user-policy
                  UserName: example-user
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutUserPolicyResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
      tags:
      - Policy
  /ReadAccessKeys:
    post:
      description: Lists the access key IDs of either your root account or an EIM user.
      operationId: ReadAccessKeys
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadAccessKeysRequest'
            examples:
              ex1:
                value:
                  Filters:
                    States:
                    - ACTIVE
                  Tag: Group1
                  UserName: example-user
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadAccessKeysResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    AccessKeys:
                    - State: ACTIVE
                      AccessKeyId: ABCDEFGHIJ0123456789
                      CreationDate: 2010-10-01T12:34:56.789+0000
                      ExpirationDate: 2063-04-05T00:00:00.000+0000
                      LastModificationDate: 2010-10-01T12:34:56.789+0000
                      Tag: Group1
          description: The HTTP 200 response (OK).
      security:
      - ApiKeyAuthSec: []
      - BasicAuth: []
      tags:
      - AccessKey
  /ReadAccounts:
    post:
      description: Gets information about the account that sent the request.
      operationId: ReadAccounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadAccountsRequest'
            examples:
              ex1:
                value: {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadAccountsResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    Accounts:
                    - ZipCode: '92210'
                      CompanyName: EXAMPLE SAS
                      FirstName: JEAN
                      City: SAINT-CLOUD
                      Country: FRANCE
                      LastName: DUPONT
                      AccountId: '123456789012'
                      CustomerId: '87654321'
                      Email: example@example.com
          description: The HTTP 200 response (OK).
      tags:
      - Account
  /ReadAdminPassword:
    post:
      description: |-
        Gets the administrator password for a Windows running virtual machine (VM).<br />
        The administrator password is encrypted using the keypair you specified when launching the VM.<br /><br />

        **[IMPORTANT]**<br />
        * Only RSA keypairs can decrypt the password of a Windows VM.<br />
        * The administrator password is generated only on the first boot of the Windows VM. It is not returned after the first boot.
      operationId: ReadAdminPassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadAdminPasswordRequest'
            examples:
              ex1:
                value:
                  VmId: i-12345678
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadAdminPasswordResponse'
              examples:
                ex1:
                  value:
                    VmId: i-12345678
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    AdminPassword: ...
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Vm
  /ReadApiAccessPolicy:
    post:
      description: |-
        Gets information about the API access policy of your account.<br /><br />
        For more information, see [About Your API Access Policy](https://docs.outscale.com/en/userguide/About-Your-API-Access-Policy.html).
      operationId: ReadApiAccessPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadApiAccessPolicyRequest'
            examples:
              ex1:
                value: {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadApiAccessPolicyResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    ApiAccessPolicy:
                      RequireTrustedEnv: false
                      MaxAccessKeyExpirationSeconds: 0
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      security:
      - ApiKeyAuthSec: []
      - BasicAuth: []
      tags:
      - ApiAccessPolicy
  /ReadApiAccessRules:
    post:
      description: Lists one or more API access rules.
      operationId: ReadApiAccessRules
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadApiAccessRulesRequest'
            examples:
              ex1:
                value:
                  Filters:
                    ApiAccessRuleIds:
                    - aar-1234567890abcdef1234567890abcdef
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadApiAccessRulesResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    ApiAccessRules:
                    - IpRanges:
                      - 0.0.0.0/0
                      ApiAccessRuleId: aar-1234567890abcdef1234567890abcdef
                      CaIds: []
                      Cns: []
                      Description: Allows all IPv4 domain
          description: The HTTP 200 response (OK).
      security:
      - ApiKeyAuthSec: []
      - BasicAuth: []
      tags:
      - ApiAccessRule
  /ReadApiLogs:
    post:
      description: |-
        Lists the logs of the API calls you have performed with this account.

        **[IMPORTANT]**<br />
        Past logs are accessible for up to 32 days.<br />
        By default, the retrieved interval is 48 hours. If neither of the `QueryDateBefore` nor `QueryDateAfter` parameters are specified, logs from the past 48 hours are retrieved. If you only specify one of two, logs are retrieved from a 2-day interval based on the date you provided. To retrieve logs beyond a 2-day interval, specify both parameters.<br /><br />
        For more information, see [About OMS](https://docs.outscale.com/en/userguide/About-OMS.html).
      operationId: ReadApiLogs
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadApiLogsRequest'
            examples:
              ex1:
                value:
                  Filters:
                    QueryIpAddresses:
                    - 192.0.2.0
                    - 198.51.100.0
                    QueryDateAfter: '2017-05-10'
                    QueryDateBefore: '2017-05-10'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadApiLogsResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    Logs:
                    - ResponseStatusCode: 200
                      ResponseSize: 1887
                      QueryPayloadRaw: '{}'
                      QueryApiName: oapi
                      QueryIpAddress: 192.0.2.0
                      QueryUserAgent: oAPI CLI v0.1 - 2018-09-28
                      CallDuration: 47
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                      QueryApiVersion: '1.27'
                      AccountId: '123456789012'
                      QueryPayloadSize: 2
                      QueryCallName: ReadAccessKeys
                      QueryAccessKey: ABCDEFGHIJ0123456789
                      QueryHeaderSize: 287
                      QueryDate: '2017-05-10T12:34:56.789Z'
                      QueryHeaderRaw: 'Host: api.eu-west-2.outscale.com\nAccept: */*\nConnection: close\nUser-Agent: oAPI CLI v0.1 - 2018-09-28\nX-Osc-Date: 20170510T000000Z\nContent-Type: application/json; charset=utf-8\nAuthorization: *****\nContent-Length: 2\nAccept-Encoding: gzip, deflate\nX-Forwarded-For: 192.0.2.0'
          description: The HTTP 200 response (OK).
      tags:
      - ApiLog
  /ReadCas:
    post:
      description: Gets information about one or more of your Client Certificate Authorities (CAs).
      operationId: ReadCas
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadCasRequest'
            examples:
              ex1:
                value:
                  Filters:
                    CaIds:
                    - ca-fedcba0987654321fedcba0987654321
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadCasResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    Cas:
                    - Description: CA example
                      CaId: ca-fedcba0987654321fedcba0987654321
                      CaFingerprint: 1234567890abcdef1234567890abcdef12345678
          description: The HTTP 200 response (OK).
      security:
      - ApiKeyAuthSec: []
      - BasicAuth: []
      tags:
      - Ca
  /ReadCatalog:
    post:
      description: Returns the price list of OUTSCALE services for the current Region.
      operationId: ReadCatalog
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadCatalogRequest'
            examples:
              ex1:
                value: {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadCatalogResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    Catalog:
                      Entries:
                      - UnitPrice: 0.04
                        Type: CustomCore:v5-p1
                        Title: Instance - On demand - Unite de vCore pour une instance Tina v5 CxRy Performance highest - par heure
                        SubregionName: eu-west-2
                        Category: compute
                        Service: TinaOS-FCU
                        Operation: RunInstances-OD
          description: The HTTP 200 response (OK).
      tags:
      - Catalog
  /ReadCatalogs:
    post:
      description: Returns the price list of OUTSCALE services for the current Region within a specific time period.
      operationId: ReadCatalogs
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadCatalogsRequest'
            examples:
              ex1:
                value:
                  Filters:
                    CurrentCatalogOnly: true
                    FromDate: '2021-01-01'
                    ToDate: '2023-01-01'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadCatalogsResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    Catalogs:
                    - State: CURRENT
                      FromDate: 2021-01-01T00:00:00.000+0000
                      Entries:
                      - UnitPrice: 0.04
                        Type: CustomCore:v5-p1
                        Title: Instance - On demand - Unite de vCore pour une instance Tina v5 CxRy Performance highest - par heure
                        SubregionName: eu-west-2
                        Category: compute
                        Service: TinaOS-FCU
                        Operation: RunInstances-OD
          description: The HTTP 200 response (OK).
      tags:
      - Catalog
  /ReadClientGateways:
    post:
      description: Lists one or more of your client gateways.
      operationId: ReadClientGateways
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadClientGatewaysRequest'
            examples:
              ex1:
                value:
                  Filters:
                    ClientGatewayIds:
                    - cgw-12345678
              ex2:
                value:
                  Filters:
                    BgpAsns:
                    - 65000
                    PublicIps:
                    - 192.0.2.0
                    - 198.51.100.0
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadClientGatewaysResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    ClientGateways:
                    - State: available
                      BgpAsn: 65000
                      Tags: []
                      ClientGatewayId: cgw-12345678
                      ConnectionType: ipsec.1
                      PublicIp: 192.0.2.0
          description: The HTTP 200 response (OK).
      tags:
      - ClientGateway
  /ReadConsoleOutput:
    post:
      description: |-
        Gets the console output for a virtual machine (VM). This console is not in real-time. It is refreshed every two seconds and provides the most recent 64 KiB output.<br /><br />

        **[IMPORTANT]**<br />
        On Windows VMs, the console is handled only on the first boot. It returns no output after the first boot.
      operationId: ReadConsoleOutput
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadConsoleOutputRequest'
            examples:
              ex1:
                value:
                  VmId: i-12345678
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadConsoleOutputResponse'
              examples:
                ex1:
                  value:
                    VmId: i-12345678
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    ConsoleOutput: ...
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Vm
  /ReadConsumptionAccount:
    post:
      description: Gets information about the consumption of your account for each billable resource within the specified time period.
      operationId: ReadConsumptionAccount
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadConsumptionAccountRequest'
            examples:
              ex1:
                value:
                  FromDate: '2023-06-01'
                  ToDate: '2023-07-01'
                  ShowPrice: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadConsumptionAccountResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    ConsumptionEntries:
                    - UnitPrice: 0.044
                      Type: BoxUsage:tinav4.c1r1p2
                      Operation: RunInstances-OD
                      SubregionName: eu-west-2a
                      Value: 1392
                      Title: Instance - On demand - tinav4.c1r1 high performance - par heure
                      Category: compute
                      ToDate: 2023-06-30T00:00:00.000+0000
                      Service: TinaOS-FCU
                      AccountId: '123456789012'
                      PayingAccountId: '123456789012'
                      FromDate: 2023-06-01T00:00:00.000+0000
                      Price: 61.248
                    Currency: EUR
          description: The HTTP 200 response (OK).
      tags:
      - Account
  /ReadDedicatedGroups:
    post:
      description: |-
        > [WARNING]<br />
        > This feature is currently in beta.<br />

        List one or more dedicated groups of virtual machines (VMs).
      operationId: ReadDedicatedGroups
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadDedicatedGroupsRequest'
            examples:
              ex1:
                summary: Filtering on a specific dedicated group
                value:
                  Filters:
                    DedicatedGroupIds:
                    - ded-12345678
              ex2:
                summary: Filtering on a specific Subregion and CPU generation
                value:
                  Filters:
                    SubregionNames:
                    - eu-west-2a
                    CpuGenerations:
                    - 4
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadDedicatedGroupsResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    DedicatedGroups:
                    - VmIds:
                      - i-12345678
                      NetIds: []
                      AccountId: '123456789012'
                      CpuGeneration: 4
                      Name: dedicated-group-example
                      SubregionName: eu-west-2a
                      DedicatedGroupId: ded-12345678
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - DedicatedGroup
  /ReadDhcpOptions:
    post:
      description: Gets information about the content of one or more DHCP options sets.
      operationId: ReadDhcpOptions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadDhcpOptionsRequest'
            examples:
              ex1:
                value:
                  Filters:
                    DhcpOptionsSetIds:
                    - dopt-12345678
              ex2:
                value:
                  Filters:
                    DomainNameServers:
                    - 192.0.2.0
                    - 198.51.100.0
                    DomainNames:
                    - example.com
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadDhcpOptionsResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    DhcpOptionsSets:
                    - Tags: []
                      NtpServers:
                      - 203.0.113.0
                      - 203.0.113.1
                      Default: false
                      DhcpOptionsSetId: dopt-12345678
                      DomainName: example.com
                      DomainNameServers:
                      - 192.0.2.0
                      - 198.51.100.0
          description: The HTTP 200 response (OK).
      tags:
      - DhcpOption
  /ReadDirectLinkInterfaces:
    post:
      description: Lists one or more of your DirectLink interfaces.
      operationId: ReadDirectLinkInterfaces
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadDirectLinkInterfacesRequest'
            examples:
              ex1:
                value:
                  Filters:
                    DirectLinkInterfaceIds:
                    - dxvif-12345678
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadDirectLinkInterfacesResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    DirectLinkInterfaces:
                    - Vlan: 101
                      OutscalePrivateIp: 172.16.0.4/30
                      DirectLinkInterfaceId: dxvif-12345678
                      BgpAsn: 65000
                      AccountId: '123456789012'
                      ClientPrivateIp: 172.16.0.5/30
                      VirtualGatewayId: vgw-12345678
                      DirectLinkInterfaceName: MyDirectLinkInterface
                      DirectLinkId: dxcon-12345678
                      Mtu: 1500
                      State: available
                      InterfaceType: private
                      Location: PAR1
          description: The HTTP 200 response (OK).
      tags:
      - DirectLinkInterface
  /ReadDirectLinks:
    post:
      description: Lists all DirectLinks in the Region.
      operationId: ReadDirectLinks
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadDirectLinksRequest'
            examples:
              ex1:
                value:
                  Filters:
                    DirectLinkIds:
                    - dxcon-12345678
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadDirectLinksResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    DirectLinks:
                    - AccountId: '123456789012'
                      Bandwidth: 1Gbps
                      DirectLinkId: dxcon-12345678
                      DirectLinkName: Connection to Outscale
                      Location: PAR1
                      RegionName: eu-west-2
                      State: available
          description: The HTTP 200 response (OK).
      tags:
      - DirectLink
  /ReadEntitiesLinkedToPolicy:
    post:
      description: Lists all entities (account, users, or user groups) linked to a specific managed policy.
      operationId: ReadEntitiesLinkedToPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadEntitiesLinkedToPolicyRequest'
            examples:
              ex1:
                summary: Reading all entities linked to a specific policy
                value:
                  PolicyOrn: orn:ows:idauth::012345678910:policy/example/example-user-policy
                  ResultsPerPage: 2
              ex2:
                summary: Reading only users linked to a specific policy
                value:
                  EntitiesType:
                  - USER
                  PolicyOrn: orn:ows:idauth::012345678910:policy/example/example-user-policy
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadEntitiesLinkedToPolicyResponse'
              examples:
                ex1:
                  summary: Reading all entities linked to a specific policy
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    PolicyEntities:
                      Users:
                      - Id: ABCDEFGHIJKLMNOPQRSTUVWXYZ12345
                        Name: example-user
                        Orn: orn:ows:idauth::012345678910:user/example/user-example
                      Groups:
                      - Id: ug-12345678
                        Name: example-usergroup
                        Orn: orn:ows:idauth::012345678910:usergroup/example/usergroup-example
                      HasMoreItems: true
                      ItemsCount: 3
                      MaxResultsLimit: 100
                      MaxResultsTruncated: false
                ex2:
                  summary: Reading only users linked to a specific policy
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    PolicyEntities:
                      Users:
                      - Id: ABCDEFGHIJKLMNOPQRSTUVWXYZ12345
                        Name: example-user
                        Orn: orn:ows:idauth::012345678910:user/example/user-example
          description: The HTTP 200 response (OK).
      tags:
      - Policy
  /ReadFlexibleGpuCatalog:
    post:
      description: Lists all flexible GPUs available in the public catalog.
      operationId: ReadFlexibleGpuCatalog
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadFlexibleGpuCatalogRequest'
            examples:
              ex1:
                value: {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadFlexibleGpuCatalogResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    FlexibleGpuCatalog:
                    - VRam: 16000
                      Generations:
                      - v5
                      MaxCpu: 80
                      MaxRam: 512
                      ModelName: nvidia-p100
          description: The HTTP 200 response (OK).
      security: []
      tags:
      - FlexibleGpu
  /ReadFlexibleGpus:
    post:
      description: Lists one or more flexible GPUs (fGPUs) allocated to your account.
      operationId: ReadFlexibleGpus
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadFlexibleGpusRequest'
            examples:
              ex1:
                value:
                  Filters:
                    FlexibleGpuIds:
                    - fgpu-12345678
              ex2:
                value:
                  Filters:
                    ModelNames:
                    - nvidia-p6
                    - nvidia-p100
                    States:
                    - attached
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadFlexibleGpusResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    FlexibleGpus:
                    - DeleteOnVmDeletion: true
                      FlexibleGpuId: fgpu-12345678
                      Generation: v5
                      ModelName: nvidia-p100
                      State: attached
                      SubregionName: eu-west-2a
                      VmId: i-12345678
          description: The HTTP 200 response (OK).
      tags:
      - FlexibleGpu
  /ReadImageExportTasks:
    post:
      description: Lists one or more image export tasks.
      operationId: ReadImageExportTasks
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadImageExportTasksRequest'
            examples:
              ex1:
                value:
                  Filters:
                    TaskIds:
                    - image-export-12345678
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadImageExportTasksResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    ImageExportTasks:
                    - Tags: []
                      ImageId: ami-12345678
                      TaskId: image-export-12345678
                      Comment: Export of image ami-12345678
                      OsuExport:
                        OsuPrefix: PREFIX/ami-12345678/
                        OsuBucket: BUCKET
                        DiskImageFormat: qcow2
                      State: pending/queued
                      Progress: 0
          description: The HTTP 200 response (OK).
      tags:
      - Image
  /ReadImages:
    post:
      description: Lists one or more OUTSCALE machine images (OMIs) you can use.
      operationId: ReadImages
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadImagesRequest'
            examples:
              ex1:
                summary: Reading a specific image
                value:
                  Filters:
                    ImageIds:
                    - ami-12345678
              ex2:
                summary: Reading Ubuntu and RockyLinux images created by Outscale
                value:
                  Filters:
                    AccountAliases:
                    - Outscale
                    ImageNames:
                    - Ubuntu*
                    - RockyLinux*
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadImagesResponse'
              examples:
                ex1:
                  summary: Reading a specific image
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    Images:
                    - StateComment: {}
                      State: available
                      RootDeviceType: bsu
                      RootDeviceName: /dev/sda1
                      ProductCodes:
                      - '0001'
                      PermissionsToLaunch:
                        GlobalPermission: false
                        AccountIds: []
                      AccountId: '123456789012'
                      Tags: []
                      Description: ''
                      ImageId: ami-12345678
                      BlockDeviceMappings:
                      - DeviceName: /dev/sda1
                        Bsu:
                          VolumeType: standard
                          DeleteOnVmDeletion: true
                          VolumeSize: 50
                          SnapshotId: snap-12345678
                      BootModes:
                      - legacy
                      ImageType: machine
                      CreationDate: '2010-10-01T12:34:56.789Z'
                      SecureBoot: false
                      FileLocation: 123456789012/create-image-example
                      Architecture: x86_64
                      ImageName: create-image-example
                ex2:
                  summary: Reading Ubuntu and RockyLinux images created by Outscale
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    Images:
                    - StateComment: {}
                      State: available
                      RootDeviceType: bsu
                      RootDeviceName: /dev/sda1
                      ProductCodes:
                      - '0001'
                      PermissionsToLaunch:
                        GlobalPermission: true
                        AccountIds: []
                      AccountId: '123456789012'
                      Tags: []
                      Description: ''
                      ImageId: ami-12345678
                      BlockDeviceMappings:
                      - DeviceName: /dev/sda1
                        Bsu:
                          VolumeType: standard
                          DeleteOnVmDeletion: true
                          VolumeSize: 10
                          SnapshotId: snap-12345678
                      ImageType: machine
                      AccountAlias: Outscale
                      CreationDate: '2010-10-01T12:34:56.789Z'
                      FileLocation: Outscale/Ubuntu-2010.10.01-0
                      Architecture: x86_64
                      ImageName: Ubuntu-2010.10.01-0
                    - StateComment: {}
                      State: available
                      RootDeviceType: bsu
                      RootDeviceName: /dev/sda1
                      ProductCodes:
                      - '0001'
                      PermissionsToLaunch:
                        GlobalPermission: true
                        AccountIds: []
                      AccountId: '123456789012'
                      Tags: []
                      Description: ''
                      ImageId: ami-12345678
                      BlockDeviceMappings:
                      - DeviceName: /dev/sda1
                        Bsu:
                          VolumeType: standard
                          DeleteOnVmDeletion: true
                          VolumeSize: 10
                          SnapshotId: snap-12345678
                      ImageType: machine
                      AccountAlias: Outscale
                      CreationDate: '2010-10-01T12:34:56.789Z'
                      BootModes:
                      - legacy
                      SecureBoot: false
                      FileLocation: Outscale/RockyLinux-2010.10.01-0
                      Architecture: x86_64
                      ImageName: RockyLinux-2010.10.01-0
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Image
  /ReadInternetServices:
    post:
      description: |-
        Lists one or more of your internet services.<br />
        An internet service enables virtual machines (VMs) launched in a Net to connect to the Internet. It allows routing of incoming and outgoing Internet traffic and management of public IP addresses.
      operationId: ReadInternetServices
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadInternetServicesRequest'
            examples:
              ex1:
                value:
                  Filters:
                    InternetServiceIds:
                    - igw-12345678
              ex2:
                value:
                  Filters:
                    TagKeys:
                    - env
                    TagValues:
                    - prod
                    - test
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadInternetServicesResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    InternetServices:
                    - Tags:
                      - Value: prod
                        Key: env
                      State: available
                      NetId: vpc-12345678
                      InternetServiceId: igw-12345678
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - InternetService
  /ReadKeypairs:
    post:
      description: Lists one or more of your keypairs.
      operationId: ReadKeypairs
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadKeypairsRequest'
            examples:
              ex1:
                value:
                  Filters:
                    KeypairNames:
                    - keypair-example
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadKeypairsResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    Keypairs:
                    - KeypairType: ssh-rsa
                      KeypairName: keypair-example
                      KeypairId: key-abcdef1234567890abcdef1234567890
                      KeypairFingerprint: 11:22:33:44:55:66:77:88:99:00:aa:bb:cc:dd:ee:ff
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Keypair
  /ReadLinkedPolicies:
    post:
      description: Lists the managed policies linked to a specified user.
      operationId: ReadLinkedPolicies
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadLinkedPoliciesRequest'
            examples:
              ex1:
                value:
                  Filters:
                    PathPrefix: /example/
                  FirstItem: 1
                  ResultsPerPage: 30
                  UserName: example-user
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadLinkedPoliciesResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    HasMoreItems: true
                    Policies:
                    - PolicyName: example-user-policy
                      CreationDate: 2010-10-01T12:34:56.789+0000
                      LastModificationDate: 2010-10-01T12:34:56.789+0000
                      Orn: orn:ows:idauth::012345678910:policy/example/example-user-policy
                      PolicyId: ABCDEFGHIJKLMNOPQRSTUVWXYZ01234
                    MaxResultsLimit: 30
                    MaxResultsTruncated: false
          description: The HTTP 200 response (OK).
      tags:
      - Policy
  /ReadListenerRules:
    post:
      description: Lists one or more listener rules. By default, this action returns the full list of listener rules for the account.
      operationId: ReadListenerRules
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadListenerRulesRequest'
            examples:
              ex1:
                value:
                  Filters:
                    ListenerRuleNames:
                    - example-listener-rule
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadListenerRulesResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    ListenerRules:
                    - Priority: 10
                      VmIds:
                      - i-12345678
                      ListenerRuleName: example-listener-rule
                      Action: forward
                      ListenerId: 123456
                      HostNamePattern: '*.example.com'
                      ListenerRuleId: 1234
          description: The HTTP 200 response (OK).
      tags:
      - Listener
  /ReadLoadBalancerTags:
    post:
      description: Lists the tags associated with one or more specified load balancers.
      operationId: ReadLoadBalancerTags
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadLoadBalancerTagsRequest'
            examples:
              ex1:
                value:
                  LoadBalancerNames:
                  - private-lb-example
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadLoadBalancerTagsResponse'
              examples:
                ex1:
                  value:
                    Tags:
                    - Value: value1
                      LoadBalancerName: private-lb-example
                      Key: key1
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
      tags:
      - LoadBalancer
  /ReadLoadBalancers:
    post:
      description: Lists one or more load balancers and their attributes.
      operationId: ReadLoadBalancers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadLoadBalancersRequest'
            examples:
              ex1:
                value:
                  Filters:
                    LoadBalancerNames:
                    - private*
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadLoadBalancersResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    LoadBalancers:
                    - Tags: []
                      SourceSecurityGroup:
                        SecurityGroupName: security-group-example
                        SecurityGroupAccountId: '123456789012'
                      SecuredCookies: false
                      PublicIp: 192.0.2.0
                      Subnets:
                      - subnet-12345678
                      NetId: vpc-12345678
                      BackendVmIds: []
                      ApplicationStickyCookiePolicies: []
                      SecurityGroups:
                      - sg-12345678
                      LoadBalancerType: internet-facing
                      AccessLog:
                        PublicationInterval: 60
                        IsEnabled: false
                      DnsName: private-lb-example.123456789.eu-west-2.lbu.outscale.com
                      HealthCheck:
                        UnhealthyThreshold: 2
                        Timeout: 5
                        CheckInterval: 30
                        Protocol: TCP
                        HealthyThreshold: 10
                        Port: 80
                      LoadBalancerStickyCookiePolicies: []
                      SubregionNames:
                      - eu-west-2a
                      Listeners:
                      - ServerCertificateId: orn:ows:idauth::012345678910:server-certificate/Certificate
                        BackendPort: 80
                        BackendProtocol: HTTP
                        LoadBalancerPort: 443
                        LoadBalancerProtocol: HTTPS
                      LoadBalancerName: private-lb-example
          description: The HTTP 200 response (OK).
      tags:
      - LoadBalancer
  /ReadLocations:
    post:
      description: |-
        Lists the locations, corresponding to datacenters, where you can set up a DirectLink.<br /><br />
        For more information, see [About DirectLink](https://docs.outscale.com/en/userguide/About-DirectLink.html).
      operationId: ReadLocations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadLocationsRequest'
            examples:
              ex1:
                value: {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadLocationsResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    Locations:
                    - Name: Telehouse 3, France
                      Code: PAR1
                    - Name: Equinix Pantin, France
                      Code: PAR4
          description: The HTTP 200 response (OK).
      security: []
      tags:
      - Location
  /ReadManagedPoliciesLinkedToUserGroup:
    post:
      description: Lists the managed policies linked to a specified group.
      operationId: ReadManagedPoliciesLinkedToUserGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadManagedPoliciesLinkedToUserGroupRequest'
            examples:
              ex1:
                value:
                  Filters:
                    PathPrefix: /ex
                    UserGroupIds:
                    - ug-12345678
                  FirstItem: 1
                  ResultsPerPage: 30
                  UserGroupName: example-usergroup
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadManagedPoliciesLinkedToUserGroupResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    HasMoreItems: true
                    MaxResultsLimit: 30
                    MaxResultsTruncated: true
                    Policies:
                    - CreationDate: '2010-10-01T12:34:56.789Z'
                      LastModificationDate: '2010-10-01T12:34:56.789Z'
                      Orn: orn:ows:idauth::012345678910:policy/example/example-user-policy
                      PolicyId: ABCDEFGHIJKLMNOPQRSTUVWXYZ01234
                      PolicyName: example-policy
          description: The HTTP 200 response (OK).
      tags:
      - Policy
  /ReadNatServices:
    post:
      description: Lists one or more network address translation (NAT) services.
      operationId: ReadNatServices
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadNatServicesRequest'
            examples:
              ex1:
                value:
                  Filters:
                    NatServiceIds:
                    - nat-12345678
              ex2:
                value:
                  Filters:
                    NetIds:
                    - vpc-12345678
                    - vpc-87654321
                    SubnetIds:
                    - subnet-12345678
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadNatServicesResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    NatServices:
                    - Tags: []
                      SubnetId: subnet-12345678
                      NatServiceId: nat-12345678
                      PublicIps:
                      - PublicIpId: eipalloc-12345678
                        PublicIp: 192.0.2.0
                      NetId: vpc-12345678
                      State: available
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - NatService
  /ReadNetAccessPointServices:
    post:
      description: |-
        Lists OUTSCALE services available to create Net access points.<br />
        For more information, see [CreateNetAccessPoint](#createnetaccesspoint).
      operationId: ReadNetAccessPointServices
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadNetAccessPointServicesRequest'
            examples:
              ex1:
                summary: Listing one or more services according to their service IDs
                value:
                  Filters:
                    ServiceIds:
                    - pl-12345678
                    - pl-87654321
              ex2:
                summary: Listing one or more services according to their service names
                value:
                  Filters:
                    ServiceNames:
                    - com.outscale.eu-west-2.api
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadNetAccessPointServicesResponse'
              examples:
                ex1:
                  summary: Listing one or more services according to their service IDs
                  value:
                    Services:
                    - ServiceName: com.outscale.eu-west-2.api
                      ServiceId: pl-12345678
                      IpRanges:
                      - 192.0.2.0
                    - ServiceName: com.outscale.eu-west-2.oos
                      ServiceId: pl-87654321
                      IpRanges:
                      - 198.51.100.0
                      - 203.0.113.0
                      - 203.0.113.1
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                ex2:
                  summary: Listing one or more services according to their service names
                  value:
                    Services:
                    - ServiceName: com.outscale.eu-west-2.api
                      ServiceId: pl-12345678
                      IpRanges:
                      - 192.0.2.0
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
      security: []
      tags:
      - NetAccessPoint
  /ReadNetAccessPoints:
    post:
      description: Lists one or more Net access points.
      operationId: ReadNetAccessPoints
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadNetAccessPointsRequest'
            examples:
              ex1:
                value:
                  Filters:
                    NetAccessPointIds:
                    - vpce-12345678
              ex2:
                value:
                  Filters:
                    NetIds:
                    - vpc-12345678
                    States:
                    - available
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadNetAccessPointsResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    NetAccessPoints:
                    - Tags: []
                      NetAccessPointId: vpce-12345678
                      RouteTableIds:
                      - rtb-12345678
                      State: available
                      NetId: vpc-12345678
                      ServiceName: com.outscale.eu-west-2.oos
          description: The HTTP 200 response (OK).
      tags:
      - NetAccessPoint
  /ReadNetPeerings:
    post:
      description: Lists one or more peering connections between two Nets.
      operationId: ReadNetPeerings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadNetPeeringsRequest'
            examples:
              ex1:
                value:
                  Filters:
                    NetPeeringIds:
                    - pcx-12345678
              ex2:
                value:
                  Filters:
                    SourceNetNetIds:
                    - vpc-12345678
                    StateNames:
                    - active
                    - pending-acceptance
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadNetPeeringsResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    NetPeerings:
                    - Tags: []
                      State:
                        Name: active
                        Message: Active
                      AccepterNet:
                        NetId: vpc-12345678
                        IpRange: 172.16.0.0/16
                        AccountId: '123456789012'
                      SourceNet:
                        NetId: vpc-12345678
                        IpRange: 10.0.0.0/16
                        AccountId: '123456789012'
                      NetPeeringId: pcx-12345678
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - NetPeering
  /ReadNets:
    post:
      description: Lists one or more Nets.
      operationId: ReadNets
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadNetsRequest'
            examples:
              ex1:
                value:
                  Filters:
                    NetIds:
                    - vpc-12345678
              ex2:
                value:
                  Filters:
                    States:
                    - available
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadNetsResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    Nets:
                    - Tags: []
                      DhcpOptionsSetId: dopt-12345678
                      IpRange: 10.0.0.0/16
                      Tenancy: default
                      NetId: vpc-12345678
                      State: available
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Net
  /ReadNics:
    post:
      description: |-
        Lists one or more network interface cards (NICs).<br />
        A NIC is a virtual network interface that you can attach to a virtual machine (VM) in a Net.
      operationId: ReadNics
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadNicsRequest'
            examples:
              ex1:
                value:
                  Filters:
                    NicIds:
                    - eni-12345678
              ex2:
                value:
                  Filters:
                    LinkNicVmIds:
                    - i-12345678
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadNicsResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    Nics:
                    - SubregionName: eu-west-2a
                      SubnetId: subnet-12345678
                      State: in-use
                      LinkNic:
                        VmId: i-12345678
                        LinkNicId: eni-attach-12345678
                        VmAccountId: '123456789012'
                        DeleteOnVmDeletion: false
                        DeviceNumber: 0
                        State: attached
                      IsSourceDestChecked: true
                      PrivateDnsName: ip-10-0-0-4.eu-west-2.compute.internal
                      Tags: []
                      Description: Primary network interface
                      AccountId: '123456789012'
                      SecurityGroups:
                      - SecurityGroupName: security-group-example
                        SecurityGroupId: sg-12345678
                      MacAddress: A1:B2:C3:D4:E5:F6
                      NetId: vpc-12345678
                      NicId: eni-12345678
                      PrivateIps:
                      - PrivateDnsName: ip-10-0-0-4.eu-west-2.compute.internal
                        PrivateIp: 10.0.0.4
                        IsPrimary: true
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Nic
  /ReadPolicies:
    post:
      description: Lists all the managed policies available for your account.
      operationId: ReadPolicies
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadPoliciesRequest'
            examples:
              ex1:
                value:
                  Filters:
                    OnlyLinked: true
                    PathPrefix: /
                    Scope: OWS
                  FirstItem: 1
                  ResultsPerPage: 30
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadPoliciesResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    HasMoreItems: true
                    Policies:
                    - ResourcesCount: 1
                      PolicyName: example-user-policy
                      PolicyDefaultVersionId: v1
                      Path: /example/
                      CreationDate: 2010-10-01T12:34:56.789+0000
                      Description: Example of description
                      PolicyId: ABCDEFGHIJKLMNOPQRSTUVWXYZ01234
                      Orn: orn:ows:idauth::012345678910:policy/example/example-user-policy
                      IsLinkable: true
                      LastModificationDate: 2010-10-01T12:34:56.789+0000
                    MaxResultsLimit: 30
                    MaxResultsTruncated: false
          description: The HTTP 200 response (OK).
      tags:
      - Policy
  /ReadPolicy:
    post:
      description: Lists information about a specified managed policy.
      operationId: ReadPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadPolicyRequest'
            examples:
              ex1:
                value:
                  PolicyOrn: orn:ows:idauth::012345678910:policy/example/example-user-policy
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadPolicyResponse'
              examples:
                ex1:
                  value:
                    Policy:
                      ResourcesCount: 0
                      PolicyName: example-user-policy
                      PolicyDefaultVersionId: v1
                      Path: /example/
                      CreationDate: 2010-10-01T12:34:56.789+0000
                      Description: Example of description
                      PolicyId: ABCDEFGHIJKLMNOPQRSTUVWXYZ01234
                      Orn: orn:ows:idauth::012345678910:policy/example/example-user-policy
                      IsLinkable: true
                      LastModificationDate: 2010-10-01T12:34:56.789+0000
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
      tags:
      - Policy
  /ReadPolicyVersion:
    post:
      description: Lists information about a specified version of a managed policy.
      operationId: ReadPolicyVersion
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadPolicyVersionRequest'
            examples:
              ex1:
                value:
                  PolicyOrn: orn:ows:idauth::012345678910:policy/example/example-user-policy
                  VersionId: v1
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadPolicyVersionResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    PolicyVersion:
                      VersionId: v1
                      DefaultVersion: true
                      CreationDate: 2010-10-01T12:34:56.789+0000
                      Body: '{"Statement": [ {"Effect": "Allow", "Action": ["*"], "Resource": ["*"]} ]}'
          description: The HTTP 200 response (OK).
      tags:
      - Policy
  /ReadPolicyVersions:
    post:
      description: Lists information about all the policy versions of a specified managed policy.
      operationId: ReadPolicyVersions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadPolicyVersionsRequest'
            examples:
              ex1:
                value:
                  FirstItem: 1
                  PolicyOrn: orn:ows:idauth::012345678910:policy/example/example-user-policy
                  ResultsPerPage: 30
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadPolicyVersionsResponse'
              examples:
                ex1:
                  value:
                    MaxResultsLimit: 30
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    PolicyVersions:
                    - VersionId: v1
                      DefaultVersion: true
                      CreationDate: 2010-10-01T12:34:56.789+0000
                      Body: '{"Statement": [ {"Effect": "Allow", "Action": ["*"], "Resource": ["*"]} ]}'
                    HasMoreItems: true
          description: The HTTP 200 response (OK).
      tags:
      - Policy
  /ReadProductTypes:
    post:
      description: Lists one or more product types.
      operationId: ReadProductTypes
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadProductTypesRequest'
            examples:
              ex1:
                value:
                  Filters:
                    ProductTypeIds:
                    - '0001'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadProductTypesResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    ProductTypes:
                    - ProductTypeId: '0001'
                      Description: Linux
          description: The HTTP 200 response (OK).
      security: []
      tags:
      - ProductType
  /ReadPublicCatalog:
    post:
      description: Returns the price list of OUTSCALE products and services for the Region specified in the endpoint of the request. For more information, see [About Regions and Subregions](https://docs.outscale.com/en/userguide/About-Regions-and-Subregions.html).
      operationId: ReadPublicCatalog
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadPublicCatalogRequest'
            examples:
              ex1:
                value: {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadPublicCatalogResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    Catalog:
                      Entries:
                      - UnitPrice: 0.04
                        Type: CustomCore:v5-p1
                        Title: Instance - On demand - Unite de vCore pour une instance Tina v5 CxRy Performance highest - par heure
                        SubregionName: eu-west-2
                        Category: compute
                        Service: TinaOS-FCU
                        Operation: RunInstances-OD
          description: The HTTP 200 response (OK).
      security: []
      tags:
      - PublicCatalog
  /ReadPublicIpRanges:
    post:
      description: Gets the public IPv4 addresses in CIDR notation for the Region specified in the endpoint of the request. For more information, see [About Regions and Subregions](https://docs.outscale.com/en/userguide/About-Regions-and-Subregions.html).
      operationId: ReadPublicIpRanges
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadPublicIpRangesRequest'
            examples:
              ex1:
                value: {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadPublicIpRangesResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    PublicIps:
                    - 198.51.100.0/24
                    - 203.0.113.0/24
          description: The HTTP 200 response (OK).
      security: []
      tags:
      - PublicIp
  /ReadPublicIps:
    post:
      description: |-
        Lists one or more public IPs allocated to your account.<br />
        By default, this action returns information about all your public IPs: available or associated with a virtual machine (VM), a network interface card (NIC) or a NAT service.
      operationId: ReadPublicIps
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadPublicIpsRequest'
            examples:
              ex1:
                value:
                  Filters:
                    PublicIps:
                    - 192.0.2.0
              ex2:
                value:
                  Filters:
                    VmIds:
                    - i-12345678
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadPublicIpsResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    PublicIps:
                    - VmId: i-12345678
                      Tags: []
                      PublicIpId: eipalloc-12345678
                      PublicIp: 192.0.2.0
                      LinkPublicIpId: eipassoc-12345678
                      NicAccountId: '123456789012'
                      NicId: eni-12345678
                      PrivateIp: 10.0.0.4
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - PublicIp
  /ReadQuotas:
    post:
      description: |-
        Lists one or more of your quotas.<br /><br />
        For more information, see [About Your Account](https://docs.outscale.com/en/userguide/About-Your-Account.html).
      operationId: ReadQuotas
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadQuotasRequest'
            examples:
              ex1:
                summary: Reading specific quota
                value:
                  Filters:
                    QuotaNames:
                    - lb_limit
              ex2:
                summary: Reading collection of quotas
                value:
                  Filters:
                    Collections:
                    - VPC
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadQuotasResponse'
              examples:
                ex1:
                  summary: Reading specific quota
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    QuotaTypes:
                    - Quotas:
                      - ShortDescription: Load Balancer Limit
                        QuotaCollection: LBU
                        AccountId: '123456789012'
                        Description: Maximum number of load balancers per region
                        MaxValue: 20
                        UsedValue: 0
                        Name: lb_limit
                      QuotaType: global
                ex2:
                  summary: Reading collection of quotas
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    QuotaTypes:
                    - Quotas:
                      - ShortDescription: Example Limit
                        QuotaCollection: VPC
                        AccountId: '123456789012'
                        Description: Maximum number of examples
                        MaxValue: 5
                        UsedValue: 0
                        Name: example_limit
                      QuotaType: global
                    - Quotas:
                      - ShortDescription: Other Example Limit
                        QuotaCollection: VPC
                        AccountId: '123456789012'
                        Description: Maximum number of other examples
                        MaxValue: 50
                        UsedValue: 1
                        Name: other_example_limit
                      QuotaType: vpc-12345678
          description: The HTTP 200 response (OK).
      tags:
      - Quota
  /ReadRegions:
    post:
      description: |-
        Lists one or more Regions of the OUTSCALE Cloud.<br /><br />
        For more information, see [About Regions and Subregions](https://docs.outscale.com/en/userguide/About-Regions-and-Subregions.html).
      operationId: ReadRegions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadRegionsRequest'
            examples:
              ex1:
                value: {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadRegionsResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    Regions:
                    - RegionName: eu-west-2
                      Endpoint: api.eu-west-2.outscale.com
                    - RegionName: us-east-2
                      Endpoint: api.us-east-2.outscale.com
                    - RegionName: us-west-1
                      Endpoint: api.us-west-1.outscale.com
          description: The HTTP 200 response (OK).
      security: []
      tags:
      - Region
  /ReadRouteTables:
    post:
      description: |-
        Lists one or more of your route tables.<br />
        In your Net, each Subnet must be associated with a route table. If a Subnet is not explicitly associated with a route table, it is implicitly associated with the main route table of the Net.
      operationId: ReadRouteTables
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadRouteTablesRequest'
            examples:
              ex1:
                value:
                  Filters:
                    RouteTableIds:
                    - rtb-12345678
              ex2:
                value:
                  Filters:
                    NetIds:
                    - vpc-12345678
                    - vpc-87654321
                    LinkRouteTableMain: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadRouteTablesResponse'
              examples:
                ex1:
                  value:
                    RouteTables:
                    - Routes:
                      - DestinationIpRange: 10.0.0.0/16
                        CreationMethod: CreateRouteTable
                        State: active
                      LinkRouteTables:
                      - Main: true
                        LinkRouteTableId: rtbassoc-12345678
                        RouteTableId: rtb-12345678
                        NetId: vpc-12345678
                      NetId: vpc-12345678
                      Tags: []
                      RoutePropagatingVirtualGateways: []
                      RouteTableId: rtb-12345678
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - RouteTable
  /ReadSecurityGroups:
    post:
      description: |-
        Lists one or more security groups.<br />
        You can specify either the name of the security groups or their IDs.
      operationId: ReadSecurityGroups
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadSecurityGroupsRequest'
            examples:
              ex1:
                value:
                  Filters:
                    SecurityGroupIds:
                    - sg-12345678
              ex2:
                value:
                  Filters:
                    InboundRuleIpRanges:
                    - 192.0.2.0
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadSecurityGroupsResponse'
              examples:
                ex1:
                  value:
                    SecurityGroups:
                    - Tags: []
                      SecurityGroupName: security-group-example
                      OutboundRules:
                      - FromPortRange: -1
                        IpProtocol: '-1'
                        ToPortRange: -1
                        IpRanges:
                        - 0.0.0.0/0
                      SecurityGroupId: sg-12345678
                      AccountId: '123456789012'
                      Description: Example of security group
                      InboundRules:
                      - FromPortRange: 22
                        IpProtocol: tcp
                        ToPortRange: 22
                        IpRanges:
                        - 192.0.2.0
                        - 198.51.100.0
                      NetId: vpc-12345678
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - SecurityGroup
  /ReadServerCertificates:
    post:
      description: Lists your server certificates.
      operationId: ReadServerCertificates
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadServerCertificatesRequest'
            examples:
              ex1:
                value:
                  Filters:
                    Paths:
                    - /example/
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadServerCertificatesResponse'
              examples:
                ex1:
                  value:
                    ServerCertificates:
                    - Path: /example/
                      Id: ABCDEFGHIJKLMNOPQRSTUVWXYZ1234
                      Orn: orn:ows:idauth::012345678910:server-certificate/example/server-cert-example
                      Name: server-cert-example
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
      tags:
      - ServerCertificate
  /ReadSnapshotExportTasks:
    post:
      description: Lists one or more snapshot export tasks.
      operationId: ReadSnapshotExportTasks
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadSnapshotExportTasksRequest'
            examples:
              ex1:
                value:
                  Filters:
                    TaskIds:
                    - snap-export-12345678
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadSnapshotExportTasksResponse'
              examples:
                ex1:
                  value:
                    SnapshotExportTasks:
                    - Tags: []
                      TaskId: snap-export-12345678
                      Comment: Export of snapshot snap-12345678
                      OsuExport:
                        OsuPrefix: PREFIX
                        OsuBucket: BUCKET
                        DiskImageFormat: qcow2
                      State: pending
                      SnapshotId: snap-12345678
                      Progress: 99
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
      tags:
      - Snapshot
  /ReadSnapshots:
    post:
      description: Lists one or more snapshots that are available to you and the permissions to create volumes from them.
      operationId: ReadSnapshots
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadSnapshotsRequest'
            examples:
              ex1:
                value:
                  Filters:
                    SnapshotIds:
                    - snap-12345678
              ex2:
                value:
                  Filters:
                    TagKeys:
                    - env
                    TagValues:
                    - prod
                    - test
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadSnapshotsResponse'
              examples:
                ex1:
                  value:
                    Snapshots:
                    - VolumeSize: 10
                      AccountId: '123456789012'
                      VolumeId: vol-12345678
                      CreationDate: '2010-10-01T12:34:56.789Z'
                      PermissionsToCreateVolume:
                        GlobalPermission: false
                        AccountIds: []
                      Progress: 100
                      SnapshotId: snap-12345678
                      State: completed
                      Description: Snapshot created from a volume
                      Tags: []
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                ex2:
                  value:
                    Snapshots:
                    - VolumeSize: 10
                      AccountId: '123456789012'
                      VolumeId: vol-12345678
                      CreationDate: '2010-10-01T12:34:56.789Z'
                      PermissionsToCreateVolume:
                        GlobalPermission: false
                        AccountIds: []
                      Progress: 100
                      SnapshotId: snap-12345678
                      State: completed
                      Description: Test snapshot
                      Tags:
                      - Value: test
                        Key: env
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Snapshot
  /ReadSubnets:
    post:
      description: |-
        Lists one or more of your Subnets.<br />
        If you do not specify any Subnet ID, this action describes all of your Subnets.
      operationId: ReadSubnets
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadSubnetsRequest'
            examples:
              ex1:
                value:
                  Filters:
                    NetIds:
                    - vpc-12345678
              ex2:
                value:
                  Filters:
                    States:
                    - available
                    - pending
                    SubregionNames:
                    - eu-west-2a
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadSubnetsResponse'
              examples:
                ex1:
                  value:
                    Subnets:
                    - Tags: []
                      SubregionName: eu-west-2a
                      SubnetId: subnet-12345678
                      AvailableIpsCount: 16379
                      IpRange: 10.0.0.0/18
                      MapPublicIpOnLaunch: false
                      State: available
                      NetId: vpc-12345678
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Subnet
  /ReadSubregions:
    post:
      description: |-
        Lists one or more of the enabled Subregions that you can access in the current Region.<br /><br />

        For more information, see [About Regions and Subregions](https://docs.outscale.com/en/userguide/About-Regions-and-Subregions.html).
      operationId: ReadSubregions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadSubregionsRequest'
            examples:
              ex1:
                summary: Listing a specific Subregion in the current Region
                value:
                  Filters:
                    SubregionNames:
                    - eu-west-2a
              ex2:
                summary: Listing two specific Subregions in the current Region
                value:
                  Filters:
                    SubregionNames:
                    - eu-west-2a
                    - eu-west-2b
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadSubregionsResponse'
              examples:
                ex1:
                  summary: Listing a specific Subregion in the current Region
                  value:
                    Subregions:
                    - State: available
                      RegionName: eu-west-2
                      SubregionName: eu-west-2a
                      LocationCode: PAR1
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                ex2:
                  summary: Listing two specific Subregions in the current Region
                  value:
                    Subregions:
                    - State: available
                      RegionName: eu-west-2
                      SubregionName: eu-west-2a
                      LocationCode: PAR1
                    - State: available
                      RegionName: eu-west-2
                      SubregionName: eu-west-2b
                      LocationCode: PAR4
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
      tags:
      - Subregion
  /ReadTags:
    post:
      description: Lists one or more tags for your resources.
      operationId: ReadTags
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadTagsRequest'
            examples:
              ex1:
                value:
                  Filters:
                    ResourceTypes:
                    - snapshot
                    Keys:
                    - key1
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadTagsResponse'
              examples:
                ex1:
                  value:
                    Tags:
                    - Value: value1
                      ResourceType: snapshot
                      ResourceId: snap-12345678
                      Key: key1
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Tag
  /ReadUnitPrice:
    post:
      description: Gets unit price information for the specified parameters.
      operationId: ReadUnitPrice
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadUnitPriceRequest'
            examples:
              ex1:
                value:
                  Operation: CreateVolume
                  Service: TinaOS-FCU
                  Type: BSU:VolumeIOPS:io1
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadUnitPriceResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    UnitPriceEntry:
                      UnitPrice: 0.01
                      Unit: PER_IOPS_PER_MONTH
                      Currency: EUR
                      Operation: CreateVolume
                      Type: BSU:VolumeIOPS:io1
                      Service: TinaOS-FCU
          description: The HTTP 200 response (OK).
      tags:
      - Catalog
  /ReadUserGroup:
    post:
      description: Lists information about a specified user group, including its users.
      operationId: ReadUserGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadUserGroupRequest'
            examples:
              ex1:
                value:
                  Path: /example/
                  UserGroupName: example-usergroup
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadUserGroupResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    UserGroup:
                      CreationDate: '2010-10-01T12:34:56.789Z'
                      LastModificationDate: '2010-10-01T12:34:56.789Z'
                      Name: example-usergroup
                      Orn: orn:ows:idauth::012345678910:usergroup/example/usergroup-example
                      Path: /example/
                      UserGroupId: ug-12345678
                    Users:
                    - CreationDate: '2010-10-01T12:34:56.789Z'
                      LastModificationDate: '2010-10-01T12:34:56.789Z'
                      Path: /example/
                      UserEmail: user@example.com
                      UserId: ABCDEFGHIJKLMNOPQRSTUVWXYZ12345
                      UserName: example-user
          description: The HTTP 200 response (OK).
      tags:
      - UserGroup
  /ReadUserGroupPolicies:
    post:
      description: Lists the names of the inline policies embedded in a specific group.
      operationId: ReadUserGroupPolicies
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadUserGroupPoliciesRequest'
            examples:
              ex1:
                value:
                  FirstItem: 1
                  ResultsPerPage: 30
                  UserGroupName: example-usergroup
                  UserGroupPath: /example/
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadUserGroupPoliciesResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    HasMoreItems: true
                    MaxResultsLimit: 30
                    MaxResultsTruncated: true
                    Policies:
                    - Body: '{"Statement": [ {"Effect": "Allow", "Action": ["*"], "Resource": ["*"]} ]}'
                      Name: example-policy
          description: The HTTP 200 response (OK).
      tags:
      - Policy
  /ReadUserGroupPolicy:
    post:
      description: Returns information about an inline policy included in a specified group.
      operationId: ReadUserGroupPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadUserGroupPolicyRequest'
            examples:
              ex1:
                value:
                  PolicyName: example-policy
                  UserGroupName: example-usergroup
                  UserGroupPath: /example/
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadUserGroupPolicyResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    Policy:
                      Body: '{"Statement": [ {"Effect": "Allow", "Action": ["*"], "Resource": ["*"]} ]}'
                      Name: example-policy
          description: The HTTP 200 response (OK).
      tags:
      - Policy
  /ReadUserGroups:
    post:
      description: |-
        Lists all the user groups of the account.<br />
        The response can be filtered using either the PathPrefix or the UserGroupIds.
      operationId: ReadUserGroups
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadUserGroupsRequest'
            examples:
              ex1:
                value:
                  Filters:
                    PathPrefix: /ex
                    UserGroupIds:
                    - ug-12345678
                  FirstItem: 1
                  ResultsPerPage: 30
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadUserGroupsResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    HasMoreItems: true
                    MaxResultsLimit: 30
                    MaxResultsTruncated: true
                    UserGroups:
                    - CreationDate: '2010-10-01T12:34:56.789Z'
                      LastModificationDate: '2010-10-01T12:34:56.789Z'
                      Name: example-usergroup
                      Orn: orn:ows:idauth::012345678910:usergroup/example/usergroup-example
                      Path: /example/
                      UserGroupId: ug-12345678
          description: The HTTP 200 response (OK).
      tags:
      - UserGroup
  /ReadUserGroupsPerUser:
    post:
      description: Lists the groups a specified user belongs to.
      operationId: ReadUserGroupsPerUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadUserGroupsPerUserRequest'
            examples:
              ex1:
                value:
                  UserName: example-user
                  UserPath: /example/
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadUserGroupsPerUserResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    UserGroups:
                    - CreationDate: '2010-10-01T12:34:56.789Z'
                      LastModificationDate: '2010-10-01T12:34:56.789Z'
                      Name: example-usergroup
                      Orn: orn:ows:idauth::012345678910:usergroup/example/usergroup-example
                      Path: /example/
                      UserGroupId: ug-12345678
          description: The HTTP 200 response (OK).
      tags:
      - UserGroup
  /ReadUserPolicies:
    post:
      description: Lists the names of inline policies included in a specified user.
      operationId: ReadUserPolicies
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadUserPoliciesRequest'
            examples:
              ex1:
                value:
                  UserName: example-user
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadUserPoliciesResponse'
              examples:
                ex1:
                  value:
                    PolicyNames:
                    - example-policy
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
      tags:
      - Policy
  /ReadUserPolicy:
    post:
      description: Returns information about an inline policy included in a specified user.
      operationId: ReadUserPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadUserPolicyRequest'
            examples:
              ex1:
                value:
                  UserName: example-user
                  PolicyName: example-user-policy
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadUserPolicyResponse'
              examples:
                ex1:
                  value:
                    PolicyDocument: '{"Statement": [ {"Effect": "Allow", "Action": ["*"], "Resource": ["*"]} ]}'
                    PolicyName: example-user-policy
                    UserName: example-user
          description: The HTTP 200 response (OK).
      tags:
      - Policy
  /ReadUsers:
    post:
      description: |-
        Lists all EIM users in the account.<br />
        The response can be filtered using the UserIds.
      operationId: ReadUsers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadUsersRequest'
            examples:
              ex1:
                value:
                  Filters:
                    UserIds:
                    - ABCDEFGHIJKLMNOPQRSTUVWXYZ12345
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadUsersResponse'
              examples:
                ex1:
                  value:
                    Users:
                    - UserEmail: user@example.com
                      UserName: example-user
                      UserId: ABCDEFGHIJKLMNOPQRSTUVWXYZ12345
                      Path: /documentation/
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
      tags:
      - User
  /ReadVirtualGateways:
    post:
      description: Lists one or more virtual gateways.
      operationId: ReadVirtualGateways
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadVirtualGatewaysRequest'
            examples:
              ex1:
                value:
                  Filters:
                    VirtualGatewayIds:
                    - vgw-12345678
              ex2:
                value:
                  Filters:
                    States:
                    - available
                    LinkStates:
                    - attached
                    - detached
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadVirtualGatewaysResponse'
              examples:
                ex1:
                  value:
                    VirtualGateways:
                    - VirtualGatewayId: vgw-12345678
                      ConnectionType: ipsec.1
                      NetToVirtualGatewayLinks: []
                      State: available
                      Tags: []
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                ex2:
                  value:
                    VirtualGateways:
                    - VirtualGatewayId: vgw-12345678
                      ConnectionType: ipsec.1
                      NetToVirtualGatewayLinks:
                      - State: attached
                        NetId: vpc-12345678
                      State: available
                      Tags: []
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
      tags:
      - VirtualGateway
  /ReadVmGroups:
    post:
      description: |-
        > [WARNING]<br />
        > This feature is currently under development and may not function properly.<br />

        Lists one or more group of virtual machines (VMs).
      operationId: ReadVmGroups
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadVmGroupsRequest'
            examples:
              ex1:
                value:
                  Filters:
                    VmGroupIds:
                    - vmgroup-12345678901234567890123456789012
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadVmGroupsResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    VmGroups:
                    - SecurityGroupIds:
                      - sg-87654321
                      VmIds:
                      - i-12345678
                      CreationDate: 2010-10-01T12:34:56.789+0000
                      VmCount: 1
                      VmGroupName: ClusterLog-PPD01
                      SubnetId: subnet-12345678
                      PositioningStrategy: attract
                      State: available
                      VmGroupId: vmgroup-12345678901234567890123456789012
                      Tags:
                      - Value: value1
                        Key: key1
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - VmGroup
  /ReadVmTemplates:
    post:
      description: |-
        > [WARNING]<br />
        > This feature is currently under development and may not function properly.<br />

        Lists one or more virtual machine (VM) templates.
      operationId: ReadVmTemplates
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadVmTemplatesRequest'
            examples:
              ex1:
                value:
                  Filters:
                    VmTemplateNames:
                    - vmtemplate-example
              ex2:
                value:
                  Filters:
                    CpuCores:
                    - 2
                    CpuGenerations:
                    - v4
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadVmTemplatesResponse'
              examples:
                ex1:
                  value:
                    VmTemplates:
                    - VmTemplateName: vmtemplate-example
                      CpuPerformance: high
                      CreationDate: 2010-10-01T12:34:56.789+0000
                      CpuCores: 2
                      Tags: []
                      Description: ''
                      ImageId: ami-12345678
                      CpuGeneration: v4
                      VmTemplateId: vmtemplate-98765432109876543210987654321012
                      Ram: 2
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
      tags:
      - VmTemplate
  /ReadVmTypes:
    post:
      description: Lists one or more predefined VM types.
      operationId: ReadVmTypes
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadVmTypesRequest'
            examples:
              ex1:
                value:
                  Filters:
                    VmTypeNames:
                    - t2.small
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadVmTypesResponse'
              examples:
                ex1:
                  value:
                    VmTypes:
                    - VolumeCount: 0
                      VmTypeName: t2.small
                      BsuOptimized: false
                      MaxPrivateIps: 4
                      MemorySize: 2
                      VcoreCount: 1
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
      security: []
      tags:
      - Vm
  /ReadVms:
    post:
      description: |-
        Lists one or more of your virtual machines (VMs).<br />
        If you provide one or more VM IDs, this action returns a description for all of these VMs. If you do not provide any VM ID, this action returns a description for all of the VMs that belong to you. If you provide an invalid VM ID, an error is returned. If you provide the ID of a VM that does not belong to you, the description of this VM is not included in the response. The refresh interval for data returned by this action is one hour, meaning that a terminated VM may appear in the response.
      operationId: ReadVms
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadVmsRequest'
            examples:
              ex1:
                value:
                  Filters:
                    VmIds:
                    - i-12345678
              ex2:
                value:
                  Filters:
                    TagKeys:
                    - env
                    TagValues:
                    - prod
                    - test
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadVmsResponse'
              examples:
                ex1:
                  value:
                    Vms:
                    - VmType: tinav5.c1r1p2
                      VmInitiatedShutdownBehavior: stop
                      State: running
                      StateReason: ''
                      RootDeviceType: ebs
                      RootDeviceName: /dev/sda1
                      IsSourceDestChecked: true
                      KeypairName: keypair-example
                      ImageId: ami-12345678
                      DeletionProtection: false
                      BootMode: legacy
                      Architecture: x86_64
                      NestedVirtualization: false
                      BlockDeviceMappings:
                      - DeviceName: /dev/sda1
                        Bsu:
                          VolumeId: vol-12345678
                          State: attached
                          LinkDate: '2010-10-01T12:34:56.789Z'
                          DeleteOnVmDeletion: true
                      VmId: i-12345678
                      ReservationId: r-12345678
                      Hypervisor: xen
                      Placement:
                        Tenancy: default
                        SubregionName: eu-west-2a
                      ProductCodes:
                      - '0001'
                      CreationDate: '2010-10-01T12:34:56.789Z'
                      UserData: ''
                      SubnetId: subnet-12345678
                      PrivateIp: 10.0.0.4
                      SecurityGroups:
                      - SecurityGroupName: security-group-example
                        SecurityGroupId: sg-12345678
                      BsuOptimized: false
                      LaunchNumber: 0
                      NetId: vpc-12345678
                      Nics:
                      - SubnetId: subnet-12345678
                        State: in-use
                        LinkNic:
                          State: attached
                          DeviceNumber: 0
                          LinkNicId: eni-attach-12345678
                          DeleteOnVmDeletion: true
                        IsSourceDestChecked: true
                        PrivateDnsName: ip-10-0-0-4.eu-west-2.compute.internal
                        Description: Primary network interface
                        AccountId: '123456789012'
                        SecurityGroups:
                        - SecurityGroupName: security-group-example
                          SecurityGroupId: sg-12345678
                        MacAddress: A1:B2:C3:D4:E5:F6
                        NetId: vpc-12345678
                        NicId: eni-12345678
                        PrivateIps:
                        - PrivateDnsName: ip-10-0-0-4.eu-west-2.compute.internal
                          PrivateIp: 10.0.0.4
                          IsPrimary: true
                      Performance: high
                      Tags:
                      - Value: prod
                        Key: env
                      ActionsOnNextBoot:
                        SecureBoot: none
                      PrivateDnsName: ip-10-0-0-4.eu-west-2.compute.internal
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Vm
  /ReadVmsHealth:
    post:
      description: Lists the state of one or more backend virtual machines (VMs) registered with a specified load balancer.
      operationId: ReadVmsHealth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadVmsHealthRequest'
            examples:
              ex1:
                value:
                  LoadBalancerName: example-lbu
                  BackendVmIds:
                  - i-12345678
                  - i-87654321
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadVmsHealthResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    BackendVmHealth:
                    - VmId: i-12345678
                      State: UP
                    - VmId: i-87654321
                      StateReason: ELB
                      State: DOWN
                      Description: Instance registration is pending
          description: The HTTP 200 response (OK).
      tags:
      - LoadBalancer
  /ReadVmsState:
    post:
      description: Lists the status of one or more virtual machines (VMs).
      operationId: ReadVmsState
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadVmsStateRequest'
            examples:
              ex1:
                value:
                  AllVms: true
              ex2:
                value:
                  Filters:
                    SubregionNames:
                    - eu-west-2a
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadVmsStateResponse'
              examples:
                ex1:
                  value:
                    VmStates:
                    - VmId: i-12345678
                      VmState: running
                      SubregionName: eu-west-2a
                      MaintenanceEvents: []
                    - VmId: i-87654321
                      VmState: stopped
                      SubregionName: eu-west-2a
                      MaintenanceEvents: []
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                ex2:
                  value:
                    VmStates:
                    - VmId: i-12345678
                      VmState: running
                      SubregionName: eu-west-2a
                      MaintenanceEvents: []
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Vm
  /ReadVolumes:
    post:
      description: Lists one or more specified Block Storage Unit (BSU) volumes.
      operationId: ReadVolumes
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadVolumesRequest'
            examples:
              ex1:
                value:
                  Filters:
                    VolumeIds:
                    - vol-12345678
              ex2:
                value:
                  Filters:
                    VolumeStates:
                    - in-use
                    VolumeTypes:
                    - gp2
                    - io1
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadVolumesResponse'
              examples:
                ex1:
                  value:
                    Volumes:
                    - VolumeId: vol-12345678
                      Tags: []
                      VolumeType: gp2
                      SubregionName: eu-west-2a
                      State: in-use
                      CreationDate: '2010-10-01T12:34:56.789Z'
                      Iops: 100
                      LinkedVolumes:
                      - VolumeId: vol-12345678
                        DeleteOnVmDeletion: false
                        DeviceName: /dev/sdb
                        State: attached
                        VmId: i-12345678
                      Size: 10
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Volume
  /ReadVpnConnections:
    post:
      description: Lists one or more VPN connections.
      operationId: ReadVpnConnections
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadVpnConnectionsRequest'
            examples:
              ex1:
                value:
                  Filters:
                    VpnConnectionIds:
                    - vpn-12345678
              ex2:
                value:
                  Filters:
                    ClientGatewayIds:
                    - cgw-12345678
                    VirtualGatewayIds:
                    - vgw-12345678
                    - vgw-87654321
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadVpnConnectionsResponse'
              examples:
                ex1:
                  value:
                    VpnConnections:
                    - Routes: []
                      Tags: []
                      ClientGatewayConfiguration: ...
                      StaticRoutesOnly: true
                      VirtualGatewayId: vgw-12345678
                      ConnectionType: ipsec.1
                      ClientGatewayId: cgw-12345678
                      State: pending
                      VgwTelemetries:
                      - StateDescription: IPSEC IS DOWN
                        AcceptedRouteCount: 0
                        LastStateChangeDate: '2017-05-10T12:34:56.789Z'
                        OutsideIpAddress: 192.0.2.0
                      VpnConnectionId: vpn-12345678
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
      tags:
      - VpnConnection
  /RebootVms:
    post:
      description: |-
        Reboots one or more virtual machines (VMs).<br />
        This operation sends a reboot request to one or more specified VMs. This is an asynchronous action that queues this reboot request. This action only reboots VMs that are valid and that belong to you.
      operationId: RebootVms
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RebootVmsRequest'
            examples:
              ex1:
                value:
                  VmIds:
                  - i-12345678
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RebootVmsResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Vm
  /RegisterVmsInLoadBalancer:
    post:
      description: |-
        > [WARNING]<br />
        > Deprecated: This call is deprecated and will be removed.<br />

        Registers one or more virtual machines (VMs) with a specified load balancer.<br />
        The VMs can be in different Subnets and different Subregions than the load balancer, as long as the VMs and load balancers are all in the public Cloud or all in the same Net. It may take a little time for a VM to be registered with the load balancer. Once the VM is registered with a load balancer, it receives traffic and requests from this load balancer and is called a backend VM.
      operationId: RegisterVmsInLoadBalancer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterVmsInLoadBalancerRequest'
            examples:
              ex1:
                value:
                  LoadBalancerName: example-lbu
                  BackendVmIds:
                  - i-12345678
                  - i-87654321
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterVmsInLoadBalancerResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
      tags:
      - LoadBalancer
  /RejectNetPeering:
    post:
      description: |-
        Rejects a Net peering request.<br />
        The Net peering must be in the `pending-acceptance` state to be rejected. The rejected Net peering is then in the `rejected` state.
      operationId: RejectNetPeering
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RejectNetPeeringRequest'
            examples:
              ex1:
                value:
                  NetPeeringId: pcx-12345678
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RejectNetPeeringResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 409 response (Conflict).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - NetPeering
  /RemoveUserFromUserGroup:
    post:
      description: Removes a specified user from a specified group.
      operationId: RemoveUserFromUserGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemoveUserFromUserGroupRequest'
            examples:
              ex1:
                value:
                  UserGroupName: example-usergroup
                  UserGroupPath: /example/
                  UserName: example-user
                  UserPath: /example/
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RemoveUserFromUserGroupResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
      tags:
      - UserGroup
  /ScaleDownVmGroup:
    post:
      description: |-
        > [WARNING]<br />
        > This feature is currently under development and may not function properly.<br />

        Deletes virtual machines (VMs) from a VM group.<br />
        The oldest VMs are the first to be deleted.
      operationId: ScaleDownVmGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScaleDownVmGroupRequest'
            examples:
              ex1:
                summary: Removing 1 VM from a VM group
                value:
                  VmGroupId: vmgroup-12345678901234567890123456789012
                  VmSubtraction: 1
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScaleDownVmGroupResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - VmGroup
  /ScaleUpVmGroup:
    post:
      description: |-
        > [WARNING]<br />
        > This feature is currently under development and may not function properly.<br />

        Creates additional virtual machines (VMs) in a VM group.<br />
        The new VMs use the current version of the VM template.
      operationId: ScaleUpVmGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScaleUpVmGroupRequest'
            examples:
              ex1:
                summary: Adding 2 VMs in a VM group
                value:
                  VmGroupId: vmgroup-12345678901234567890123456789012
                  VmAddition: 2
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScaleUpVmGroupResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - VmGroup
  /SetDefaultPolicyVersion:
    post:
      description: |-
        Sets a specified version of a managed policy as the default (operative) one.<br />
        You can modify the default version of a policy at any time.
      operationId: SetDefaultPolicyVersion
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetDefaultPolicyVersionRequest'
            examples:
              ex1:
                value:
                  PolicyOrn: orn:ows:idauth::012345678910:policy/example/example-user-policy
                  VersionId: v1
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetDefaultPolicyVersionResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
      tags:
      - Policy
  /StartVms:
    post:
      description: |-
        Start one or more virtual machines (VMs).<br />
        You can start only VMs that are valid and that belong to you.
      operationId: StartVms
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartVmsRequest'
            examples:
              ex1:
                value:
                  VmIds:
                  - i-12345678
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartVmsResponse'
              examples:
                ex1:
                  value:
                    Vms:
                    - VmId: i-12345678
                      PreviousState: stopped
                      CurrentState: pending
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Vm
  /StopVms:
    post:
      description: |-
        Stops one or more running virtual machines (VMs).<br />
        You can stop only VMs that are valid and that belong to you. Data stored in the VM RAM is lost.
      operationId: StopVms
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StopVmsRequest'
            examples:
              ex1:
                value:
                  VmIds:
                  - i-12345678
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StopVmsResponse'
              examples:
                ex1:
                  value:
                    Vms:
                    - VmId: i-12345678
                      PreviousState: running
                      CurrentState: stopping
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Vm
  /UnlinkFlexibleGpu:
    post:
      description: |-
        Detaches a flexible GPU (fGPU) from a virtual machine (VM).<br />
        The fGPU is in the `detaching` state until the VM is stopped, after which it becomes `allocated`. It is then available again for attachment to a VM.
      operationId: UnlinkFlexibleGpu
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnlinkFlexibleGpuRequest'
            examples:
              ex1:
                value:
                  FlexibleGpuId: fgpu-12345678
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnlinkFlexibleGpuResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
      tags:
      - FlexibleGpu
  /UnlinkInternetService:
    post:
      description: |-
        Detaches an internet service from a Net.<br />
        This action disables and detaches an internet service from a Net. The Net must not contain virtual machines (VMs) using public IPs nor internet-facing load balancers.
      operationId: UnlinkInternetService
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnlinkInternetServiceRequest'
            examples:
              ex1:
                value:
                  InternetServiceId: igw-12345678
                  NetId: vpc-12345678
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnlinkInternetServiceResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - InternetService
  /UnlinkLoadBalancerBackendMachines:
    post:
      description: Detaches one or more backend virtual machines (VMs) from a load balancer. You need to specify at least the `BackendIps` or the `BackendVmIds` parameter.
      operationId: UnlinkLoadBalancerBackendMachines
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnlinkLoadBalancerBackendMachinesRequest'
            examples:
              ex1:
                summary: Unlinking VMs from a load balancer
                value:
                  LoadBalancerName: example-lbu
                  BackendVmIds:
                  - i-12345678
                  - i-87654321
              ex2:
                summary: Unlinking public IPs from a load balancer
                value:
                  LoadBalancerName: example-lbu
                  BackendIps:
                  - 192.0.2.0
                  - 198.51.100.0
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnlinkLoadBalancerBackendMachinesResponse'
              examples:
                ex1:
                  summary: Unlinking VMs from a load balancer
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                ex2:
                  summary: Unlinking public IPs from a load balancer
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
      tags:
      - LoadBalancer
  /UnlinkManagedPolicyFromUserGroup:
    post:
      description: Unlinks a managed policy from a specific group.
      operationId: UnlinkManagedPolicyFromUserGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnlinkManagedPolicyFromUserGroupRequest'
            examples:
              ex1:
                value:
                  PolicyOrn: orn:ows:idauth::012345678910:policy/example/example-user-policy
                  UserGroupName: example-usergroup
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnlinkManagedPolicyFromUserGroupResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
      tags:
      - Policy
  /UnlinkNic:
    post:
      description: |-
        Detaches a network interface card (NIC) from a virtual machine (VM).<br />
        The primary NIC cannot be detached.
      operationId: UnlinkNic
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnlinkNicRequest'
            examples:
              ex1:
                value:
                  LinkNicId: eni-attach-12345678
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnlinkNicResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Nic
  /UnlinkPolicy:
    post:
      description: Removes a managed policy from a specific user.
      operationId: UnlinkPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnlinkPolicyRequest'
            examples:
              ex1:
                value:
                  PolicyOrn: orn:ows:idauth::012345678910:policy/example/example-user-policy
                  UserName: example-user
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnlinkPolicyResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
      tags:
      - Policy
  /UnlinkPrivateIps:
    post:
      description: Unassigns one or more secondary private IPs from a network interface card (NIC).
      operationId: UnlinkPrivateIps
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnlinkPrivateIpsRequest'
            examples:
              ex1:
                value:
                  NicId: eni-12345678
                  PrivateIps:
                  - 10.0.0.6
                  - 10.0.0.7
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnlinkPrivateIpsResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Nic
  /UnlinkPublicIp:
    post:
      description: |-
        Disassociates a public IP from the virtual machine (VM) or network interface card (NIC) it is associated with.<br /><br />

        **[IMPORTANT]**<br />
        To disassociate the public IP from a NAT service, you need to delete the NAT service. For more information, see the [DeleteNatService](#deletenatservice) method.
      operationId: UnlinkPublicIp
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnlinkPublicIpRequest'
            examples:
              ex1:
                value:
                  PublicIp: 192.0.2.0
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnlinkPublicIpResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - PublicIp
  /UnlinkRouteTable:
    post:
      description: |-
        Disassociates a Subnet from a route table.<br />
        After disassociation, the Subnet can no longer use the routes in this route table, but uses the routes in the main route table of the Net instead.
      operationId: UnlinkRouteTable
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnlinkRouteTableRequest'
            examples:
              ex1:
                value:
                  LinkRouteTableId: rtbassoc-12345678
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnlinkRouteTableResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - RouteTable
  /UnlinkVirtualGateway:
    post:
      description: |-
        Detaches a virtual gateway from a Net.<br />
        You must wait until the virtual gateway is in the detached state before you can attach another Net to it or delete the Net it was previously attached to.
      operationId: UnlinkVirtualGateway
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnlinkVirtualGatewayRequest'
            examples:
              ex1:
                value:
                  VirtualGatewayId: vgw-12345678
                  NetId: vpc-12345678
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnlinkVirtualGatewayResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
      tags:
      - VirtualGateway
  /UnlinkVolume:
    post:
      description: |-
        Detaches a Block Storage Unit (BSU) volume from a virtual machine (VM).<br />
        To detach the root device of a VM, this VM must be stopped.
      operationId: UnlinkVolume
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnlinkVolumeRequest'
            examples:
              ex1:
                value:
                  VolumeId: vol-12345678
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnlinkVolumeResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Volume
  /UpdateAccessKey:
    post:
      description: |-
        Modifies the attributes of the specified access key of either your root account or an EIM user.<br /><br />
        The parameter `ExpirationDate` is not required when updating the state of your access key. However, if you do not specify the expiration date of an access key when updating its state, it is then set to not expire.
      operationId: UpdateAccessKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAccessKeyRequest'
            examples:
              ex1:
                summary: Updating the expiration date of the access key
                value:
                  AccessKeyId: ABCDEFGHIJ0123456789
                  State: ACTIVE
                  ExpirationDate: '2063-04-05'
              ex2:
                summary: Updating the state of one of your own access keys (if you are the root account or an EIM user)
                value:
                  AccessKeyId: ABCDEFGHIJ0123456789
                  State: ACTIVE
              ex3:
                summary: Updating the access key of a specific EIM user
                value:
                  AccessKeyId: ABCDEFGHIJ0123456789
                  State: ACTIVE
                  UserName: example-user
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateAccessKeyResponse'
              examples:
                ex1:
                  summary: Updating an access key when using the parameter ExpirationDate
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    AccessKey:
                      State: ACTIVE
                      AccessKeyId: ABCDEFGHIJ0123456789
                      CreationDate: 2010-10-01T12:34:56.789+0000
                      ExpirationDate: 2063-04-05T00:00:00.000+0000
                      LastModificationDate: 2017-05-10T12:34:56.789+0000
                      Tag: Group1
                ex2:
                  summary: Updating an access key when not using the parameter ExpirationDate
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    AccessKey:
                      State: ACTIVE
                      AccessKeyId: ABCDEFGHIJ0123456789
                      CreationDate: 2010-10-01T12:34:56.789+0000
                      LastModificationDate: 2017-05-10T12:34:56.789+0000
                      Tag: Group1
          description: The HTTP 200 response (OK).
      security:
      - ApiKeyAuthSec: []
      - BasicAuth: []
      tags:
      - AccessKey
  /UpdateAccount:
    post:
      description: Updates the account information for the account that sends the request.
      operationId: UpdateAccount
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAccountRequest'
            examples:
              ex1:
                value:
                  AdditionalEmails:
                  - another@example.com
                  - yet.another@example.com
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateAccountResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    Account:
                      ZipCode: '92210'
                      CompanyName: EXAMPLE SAS
                      FirstName: JEAN
                      AdditionalEmails:
                      - another@example.com
                      - yet.another@example.com
                      City: SAINT-CLOUD
                      Country: FRANCE
                      LastName: DUPONT
                      AccountId: '123456789012'
                      CustomerId: '87654321'
                      Email: example@example.com
          description: The HTTP 200 response (OK).
      tags:
      - Account
  /UpdateApiAccessPolicy:
    post:
      description: |-
        Updates the API access policy of your account.<br /><br />

        **[IMPORTANT]**<br />
        Only one API access policy can be associated with your account.
      operationId: UpdateApiAccessPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateApiAccessPolicyRequest'
            examples:
              ex1:
                summary: Require expiration dates of maximum 1 year
                value:
                  MaxAccessKeyExpirationSeconds: 31536000
                  RequireTrustedEnv: false
              ex2:
                summary: Require expiration dates of maximum 100 years and activate a trusted session
                value:
                  MaxAccessKeyExpirationSeconds: 3153600000
                  RequireTrustedEnv: true
              ex3:
                summary: Do not require expiration dates and deactivate a trusted session
                value:
                  MaxAccessKeyExpirationSeconds: 0
                  RequireTrustedEnv: false
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateApiAccessPolicyResponse'
              examples:
                ex1:
                  summary: Require expiration dates of maximum 1 year
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    ApiAccessPolicy:
                      RequireTrustedEnv: false
                      MaxAccessKeyExpirationSeconds: 31536000
                ex2:
                  summary: Require expiration dates of maximum 100 years and activate a trusted session
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    ApiAccessPolicy:
                      RequireTrustedEnv: true
                      MaxAccessKeyExpirationSeconds: 3153600000
                ex3:
                  summary: Do not require expiration dates and deactivate a trusted session
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    ApiAccessPolicy:
                      RequireTrustedEnv: false
                      MaxAccessKeyExpirationSeconds: 0
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      security:
      - ApiKeyAuthSec: []
      - BasicAuth: []
      tags:
      - ApiAccessPolicy
  /UpdateApiAccessRule:
    post:
      description: |-
        Modifies a specified API access rule.<br /><br />

        **[WARNING]**<br />
        - The new rule you specify fully replaces the old rule. Therefore, for a parameter that is not specified, any previously set value is deleted.<br />
        - If, as result of your modification, you no longer have access to the APIs, you will need to contact the Support team to regain access. For more information, see [Technical Support](https://docs.outscale.com/en/userguide/Technical-Support.html).
      operationId: UpdateApiAccessRule
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateApiAccessRuleRequest'
            examples:
              ex1:
                value:
                  ApiAccessRuleId: aar-1234567890abcdef1234567890abcdef
                  IpRanges:
                  - 0.0.0.0/0
                  Description: Allows all Ipv4 domain
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateApiAccessRuleResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    ApiAccessRule:
                      IpRanges:
                      - 0.0.0.0/0
                      ApiAccessRuleId: aar-1234567890abcdef1234567890abcdef
                      CaIds: []
                      Cns: []
                      Description: Allows all IPv4 domain
          description: The HTTP 200 response (OK).
      security:
      - ApiKeyAuthSec: []
      - BasicAuth: []
      tags:
      - ApiAccessRule
  /UpdateCa:
    post:
      description: Modifies the specified attribute of a Client Certificate Authority (CA).
      operationId: UpdateCa
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCaRequest'
            examples:
              ex1:
                value:
                  CaId: ca-fedcba0987654321fedcba0987654321
                  Description: New description
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateCaResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    Ca:
                      Description: New description
                      CaId: ca-fedcba0987654321fedcba0987654321
                      CaFingerprint: 1234567890abcdef1234567890abcdef12345678
          description: The HTTP 200 response (OK).
      security:
      - ApiKeyAuthSec: []
      - BasicAuth: []
      tags:
      - Ca
  /UpdateDedicatedGroup:
    post:
      description: |-
        > [WARNING]<br />
        > This feature is currently in beta.<br />

        Modifies the name of a specified dedicated group.<br />
      operationId: UpdateDedicatedGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDedicatedGroupRequest'
            examples:
              ex1:
                value:
                  DedicatedGroupId: ded-12345678
                  Name: New-dedicated-group-name
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateDedicatedGroupResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    DedicatedGroup:
                      VmIds:
                      - i-12345678
                      NetIds:
                      - vpc-12345678
                      AccountId: '123456789012'
                      CpuGeneration: 4
                      Name: New-dedicated-group-name
                      SubregionName: eu-west-2a
                      DedicatedGroupId: ded-12345678
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - DedicatedGroup
  /UpdateDirectLinkInterface:
    post:
      description: Modifies the maximum transmission unit (MTU) of a DirectLink interface.
      operationId: UpdateDirectLinkInterface
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDirectLinkInterfaceRequest'
            examples:
              ex1:
                value:
                  DirectLinkInterfaceId: dxvif-12345678
                  Mtu: 1500
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateDirectLinkInterfaceResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    DirectLinkInterface:
                      Vlan: 101
                      OutscalePrivateIp: 172.16.0.4/30
                      DirectLinkInterfaceId: dxvif-12345678
                      BgpAsn: 65000
                      AccountId: '123456789012'
                      ClientPrivateIp: 172.16.0.5/30
                      VirtualGatewayId: vgw-12345678
                      DirectLinkInterfaceName: MyDirectLinkInterface
                      DirectLinkId: dxcon-12345678
                      Mtu: 1500
                      State: available
                      InterfaceType: private
                      Location: PAR1
          description: The HTTP 200 response (OK).
      tags:
      - DirectLinkInterface
  /UpdateFlexibleGpu:
    post:
      description: Modifies a flexible GPU (fGPU) behavior.
      operationId: UpdateFlexibleGpu
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateFlexibleGpuRequest'
            examples:
              ex1:
                value:
                  FlexibleGpuId: fgpu-12345678
                  DeleteOnVmDeletion: false
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateFlexibleGpuResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    FlexibleGpu:
                      DeleteOnVmDeletion: false
                      FlexibleGpuId: fgpu-12345678
                      Generation: v5
                      ModelName: nvidia-p100
                      State: allocated
                      SubregionName: eu-west-2a
          description: The HTTP 200 response (OK).
      tags:
      - FlexibleGpu
  /UpdateImage:
    post:
      description: |-
        Modifies the access permissions for an OUTSCALE machine image (OMI).<br />
        You must specify either the `Additions` or the `Removals` parameter.<br />
        After sharing an OMI with an account, the other account can create a copy of it that they own. For more information about copying OMIs, see [CreateImage](#createimage).
      operationId: UpdateImage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateImageRequest'
            examples:
              ex1:
                summary: Adding permission
                value:
                  ImageId: ami-12345678
                  PermissionsToLaunch:
                    Additions:
                      AccountIds:
                      - '987654321098'
              ex2:
                summary: Removing permission
                value:
                  ImageId: ami-12345678
                  PermissionsToLaunch:
                    Removals:
                      AccountIds:
                      - '987654321098'
              ex3:
                summary: Making an image public to everyone
                value:
                  ImageId: ami-12345678
                  PermissionsToLaunch:
                    Additions:
                      GlobalPermission: true
              ex4:
                summary: Making an image private to everyone
                value:
                  ImageId: ami-12345678
                  Description: Private image
                  PermissionsToLaunch:
                    Removals:
                      GlobalPermission: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateImageResponse'
              examples:
                ex1:
                  summary: Adding permission
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    Image:
                      StateComment: {}
                      State: available
                      RootDeviceType: bsu
                      RootDeviceName: /dev/sda1
                      ProductCodes:
                      - '0001'
                      PermissionsToLaunch:
                        GlobalPermission: false
                        AccountIds:
                        - '987654321098'
                      AccountId: '123456789012'
                      Tags: []
                      Description: ''
                      ImageId: ami-12345678
                      BlockDeviceMappings:
                      - DeviceName: /dev/sda1
                        Bsu:
                          VolumeType: standard
                          DeleteOnVmDeletion: true
                          VolumeSize: 50
                          SnapshotId: snap-12345678
                      ImageType: machine
                      CreationDate: '2010-10-01T12:34:56.789Z'
                      FileLocation: 123456789012/image-example
                      Architecture: x86_64
                      ImageName: image-example
                ex2:
                  summary: Removing permission
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    Image:
                      StateComment: {}
                      State: available
                      RootDeviceType: bsu
                      RootDeviceName: /dev/sda1
                      ProductCodes:
                      - '0001'
                      PermissionsToLaunch:
                        GlobalPermission: false
                        AccountIds: []
                      AccountId: '123456789012'
                      Tags: []
                      Description: ''
                      ImageId: ami-12345678
                      BlockDeviceMappings:
                      - DeviceName: /dev/sda1
                        Bsu:
                          VolumeType: standard
                          DeleteOnVmDeletion: true
                          VolumeSize: 50
                          SnapshotId: snap-12345678
                      ImageType: machine
                      CreationDate: '2010-10-01T12:34:56.789Z'
                      FileLocation: 123456789012/image-example
                      Architecture: x86_64
                      ImageName: image-example
                ex3:
                  summary: Making an image public to everyone
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    Image:
                      StateComment: {}
                      State: available
                      RootDeviceType: bsu
                      RootDeviceName: /dev/sda1
                      ProductCodes:
                      - '0001'
                      PermissionsToLaunch:
                        GlobalPermission: true
                        AccountIds: []
                      AccountId: '123456789012'
                      Tags: []
                      Description: ''
                      ImageId: ami-12345678
                      BlockDeviceMappings:
                      - DeviceName: /dev/sda1
                        Bsu:
                          VolumeType: standard
                          DeleteOnVmDeletion: true
                          VolumeSize: 50
                          SnapshotId: snap-12345678
                      ImageType: machine
                      CreationDate: '2010-10-01T12:34:56.789Z'
                      FileLocation: 123456789012/image-example
                      Architecture: x86_64
                      ImageName: image-example
                ex4:
                  summary: Making an image private to everyone
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    Image:
                      StateComment: {}
                      State: available
                      RootDeviceType: bsu
                      RootDeviceName: /dev/sda1
                      ProductCodes:
                      - '0001'
                      PermissionsToLaunch:
                        GlobalPermission: false
                        AccountIds: []
                      AccountId: '123456789012'
                      Tags: []
                      Description: Private image
                      ImageId: ami-12345678
                      BlockDeviceMappings:
                      - DeviceName: /dev/sda1
                        Bsu:
                          VolumeType: standard
                          DeleteOnVmDeletion: true
                          VolumeSize: 50
                          SnapshotId: snap-12345678
                      ImageType: machine
                      CreationDate: '2010-10-01T12:34:56.789Z'
                      FileLocation: 123456789012/image-example
                      Architecture: x86_64
                      ImageName: image-example
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Image
  /UpdateListenerRule:
    post:
      description: |-
        Updates the pattern of the listener rule.<br />
        This call updates the pattern matching algorithm for incoming traffic.
      operationId: UpdateListenerRule
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateListenerRuleRequest'
            examples:
              ex1:
                value:
                  ListenerRuleName: example-listener-rule
                  HostPattern: '*.newhost.com'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateListenerRuleResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    ListenerRule:
                      Priority: 10
                      VmIds:
                      - i-12345678
                      ListenerRuleName: example-listener-rule
                      Action: forward
                      ListenerId: 123456
                      HostNamePattern: '*.newhost.com'
                      ListenerRuleId: 1234
          description: The HTTP 200 response (OK).
      tags:
      - Listener
  /UpdateLoadBalancer:
    post:
      description: |-
        Modifies the specified attribute of a load balancer. You can specify only one attribute at a time.<br /><br />

        You can set a new SSL certificate to an SSL or HTTPS listener of a load balancer.<br />
        This certificate replaces any certificate used on the same load balancer and port.<br /><br />

        You can also replace the currently enabled policy for the load balancer with another one.<br />
        If the `PolicyNames` parameter is empty, the currently enabled policy is disabled.
      operationId: UpdateLoadBalancer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateLoadBalancerRequest'
            examples:
              ex1:
                summary: Updating health checks
                value:
                  LoadBalancerName: private-lb-example
                  HealthCheck:
                    HealthyThreshold: 10
                    CheckInterval: 30
                    Path: /index.html
                    Port: 8080
                    Protocol: HTTPS
                    Timeout: 5
                    UnhealthyThreshold: 5
              ex2:
                summary: Updating access logs
                value:
                  LoadBalancerName: private-lb-example
                  AccessLog:
                    PublicationInterval: 5
                    IsEnabled: true
                    OsuBucketName: BUCKET
                    OsuBucketPrefix: PREFIX
              ex3:
                summary: Updating policies
                value:
                  LoadBalancerName: private-lb-example
                  LoadBalancerPort: 443
                  PolicyNames:
                  - example-browser-policy
              ex4:
                summary: Updating SSL certificate
                value:
                  LoadBalancerName: private-lb-example
                  LoadBalancerPort: 443
                  ServerCertificateId: orn:ows:idauth::012345678910:server-certificate/AnotherCertificate
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateLoadBalancerResponse'
              examples:
                ex1:
                  summary: Updating health checks
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    LoadBalancer:
                      Tags: []
                      SourceSecurityGroup:
                        SecurityGroupName: security-group-example
                        SecurityGroupAccountId: '123456789012'
                      SecuredCookies: false
                      PublicIp: 192.0.2.0
                      Subnets:
                      - subnet-12345678
                      NetId: vpc-12345678
                      BackendVmIds: []
                      ApplicationStickyCookiePolicies: []
                      SecurityGroups:
                      - sg-12345678
                      LoadBalancerType: internet-facing
                      AccessLog:
                        PublicationInterval: 60
                        IsEnabled: false
                      DnsName: private-lb-example.123456789.eu-west-2.lbu.outscale.com
                      HealthCheck:
                        UnhealthyThreshold: 5
                        Timeout: 5
                        CheckInterval: 30
                        Path: /index.html
                        Protocol: HTTPS
                        HealthyThreshold: 10
                        Port: 8080
                      LoadBalancerStickyCookiePolicies: []
                      SubregionNames:
                      - eu-west-2a
                      Listeners:
                      - ServerCertificateId: orn:ows:idauth::012345678910:server-certificate/Certificate
                        BackendPort: 80
                        BackendProtocol: HTTP
                        LoadBalancerPort: 443
                        LoadBalancerProtocol: HTTPS
                      LoadBalancerName: private-lb-example
                ex2:
                  summary: Updating access logs
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    LoadBalancer:
                      Tags: []
                      SourceSecurityGroup:
                        SecurityGroupName: security-group-example
                        SecurityGroupAccountId: '123456789012'
                      SecuredCookies: false
                      PublicIp: 192.0.2.0
                      Subnets:
                      - subnet-12345678
                      NetId: vpc-12345678
                      BackendVmIds: []
                      ApplicationStickyCookiePolicies: []
                      SecurityGroups:
                      - sg-12345678
                      LoadBalancerType: internet-facing
                      AccessLog:
                        PublicationInterval: 5
                        OsuBucketPrefix: PREFIX
                        OsuBucketName: BUCKET
                        IsEnabled: true
                      DnsName: private-lb-example.123456789.eu-west-2.lbu.outscale.com
                      HealthCheck:
                        UnhealthyThreshold: 2
                        Timeout: 5
                        CheckInterval: 30
                        Protocol: TCP
                        HealthyThreshold: 10
                        Port: 80
                      LoadBalancerStickyCookiePolicies: []
                      SubregionNames:
                      - eu-west-2a
                      Listeners:
                      - ServerCertificateId: orn:ows:idauth::012345678910:server-certificate/Certificate
                        BackendPort: 80
                        BackendProtocol: HTTP
                        LoadBalancerPort: 443
                        LoadBalancerProtocol: HTTPS
                      LoadBalancerName: private-lb-example
                ex3:
                  summary: Updating policies
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    LoadBalancer:
                      Tags: []
                      SourceSecurityGroup:
                        SecurityGroupName: security-group-example
                        SecurityGroupAccountId: '123456789012'
                      SecuredCookies: false
                      PublicIp: 192.0.2.0
                      Subnets:
                      - subnet-12345678
                      NetId: vpc-12345678
                      BackendVmIds: []
                      ApplicationStickyCookiePolicies: []
                      SecurityGroups:
                      - sg-12345678
                      LoadBalancerType: internet-facing
                      AccessLog:
                        PublicationInterval: 60
                        IsEnabled: false
                      DnsName: private-lb-example.123456789.eu-west-2.lbu.outscale.com
                      HealthCheck:
                        UnhealthyThreshold: 2
                        Timeout: 5
                        CheckInterval: 30
                        Protocol: TCP
                        HealthyThreshold: 10
                        Port: 80
                      LoadBalancerStickyCookiePolicies:
                      - PolicyName: example-browser-policy
                        CookieExpirationPeriod: 1
                      SubregionNames:
                      - eu-west-2a
                      Listeners:
                      - ServerCertificateId: orn:ows:idauth::012345678910:server-certificate/Certificate
                        BackendPort: 80
                        BackendProtocol: HTTP
                        LoadBalancerPort: 443
                        LoadBalancerProtocol: HTTPS
                      LoadBalancerName: private-lb-example
                ex4:
                  summary: Updating SSL certificate
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    LoadBalancer:
                      Tags: []
                      SourceSecurityGroup:
                        SecurityGroupName: security-group-example
                        SecurityGroupAccountId: '123456789012'
                      SecuredCookies: false
                      PublicIp: 192.0.2.0
                      Subnets:
                      - subnet-12345678
                      NetId: vpc-12345678
                      BackendVmIds: []
                      ApplicationStickyCookiePolicies: []
                      SecurityGroups:
                      - sg-12345678
                      LoadBalancerType: internet-facing
                      AccessLog:
                        PublicationInterval: 60
                        IsEnabled: false
                      DnsName: private-lb-example.123456789.eu-west-2.lbu.outscale.com
                      HealthCheck:
                        UnhealthyThreshold: 2
                        Timeout: 5
                        CheckInterval: 30
                        Protocol: TCP
                        HealthyThreshold: 10
                        Port: 80
                      LoadBalancerStickyCookiePolicies: []
                      SubregionNames:
                      - eu-west-2a
                      Listeners:
                      - ServerCertificateId: orn:ows:idauth::012345678910:server-certificate/AnotherCertificate
                        BackendPort: 80
                        BackendProtocol: HTTP
                        LoadBalancerPort: 443
                        LoadBalancerProtocol: HTTPS
                      LoadBalancerName: private-lb-example
          description: The HTTP 200 response (OK).
      tags:
      - LoadBalancer
  /UpdateNet:
    post:
      description: Associates a DHCP options set with a specified Net.
      operationId: UpdateNet
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateNetRequest'
            examples:
              ex1:
                value:
                  NetId: vpc-12345678
                  DhcpOptionsSetId: dopt-12345678
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateNetResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    Net:
                      Tags: []
                      DhcpOptionsSetId: dopt-12345678
                      IpRange: 10.0.0.0/16
                      Tenancy: default
                      NetId: vpc-12345678
                      State: available
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Net
  /UpdateNetAccessPoint:
    post:
      description: |-
        Modifies the attributes of a Net access point.<br />
        This action enables you to add or remove route tables associated with the specified Net access point.
      operationId: UpdateNetAccessPoint
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateNetAccessPointRequest'
            examples:
              ex1:
                summary: Adding a route table
                value:
                  NetAccessPointId: vpce-12345678
                  AddRouteTableIds:
                  - rtb-87654321
              ex2:
                summary: Removing a route table
                value:
                  NetAccessPointId: vpce-12345678
                  RemoveRouteTableIds:
                  - rtb-12345678
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateNetAccessPointResponse'
              examples:
                ex1:
                  summary: Adding a route table
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    NetAccessPoint:
                      Tags: []
                      NetAccessPointId: vpce-12345678
                      RouteTableIds:
                      - rtb-12345678
                      - rtb-87654321
                      State: available
                      NetId: vpc-12345678
                      ServiceName: com.outscale.eu-west-2.oos
                ex2:
                  summary: Removing a route table
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    NetAccessPoint:
                      Tags: []
                      NetAccessPointId: vpce-12345678
                      RouteTableIds: []
                      State: available
                      NetId: vpc-12345678
                      ServiceName: com.outscale.eu-west-2.oos
          description: The HTTP 200 response (OK).
      tags:
      - NetAccessPoint
  /UpdateNic:
    post:
      description: Modifies the specified network interface card (NIC). You can specify only one attribute at a time.
      operationId: UpdateNic
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateNicRequest'
            examples:
              ex1:
                summary: Modifying the DeleteOnVmDeletion value of a NIC
                value:
                  NicId: eni-12345678
                  LinkNic:
                    DeleteOnVmDeletion: false
                    LinkNicId: eni-attach-12345678
              ex2:
                summary: Modifying the security groups of a NIC
                value:
                  NicId: eni-12345678
                  SecurityGroupIds:
                  - sg-12345678
              ex3:
                summary: Modifying the description of a NIC
                value:
                  NicId: eni-12345678
                  Description: Example of description
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateNicResponse'
              examples:
                ex1:
                  summary: Modifying the DeleteOnVmDeletion value of a NIC
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    Nic:
                      SubregionName: eu-west-2a
                      SubnetId: subnet-12345678
                      State: in-use
                      LinkNic:
                        VmId: i-12345678
                        LinkNicId: eni-attach-12345678
                        VmAccountId: '123456789012'
                        DeleteOnVmDeletion: false
                        DeviceNumber: 0
                        State: attached
                      IsSourceDestChecked: true
                      PrivateDnsName: ip-10-0-0-4.eu-west-2.compute.internal
                      Tags: []
                      Description: Primary network interface
                      AccountId: '123456789012'
                      SecurityGroups:
                      - SecurityGroupName: default
                        SecurityGroupId: sg-12345678
                      MacAddress: A1:B2:C3:D4:E5:F6
                      NetId: vpc-12345678
                      NicId: eni-12345678
                      PrivateIps:
                      - PrivateDnsName: ip-10-0-0-4.eu-west-2.compute.internal
                        PrivateIp: 10.0.0.4
                        IsPrimary: true
                ex2:
                  summary: Modifying the security groups of a NIC
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    Nic:
                      SubregionName: eu-west-2a
                      SubnetId: subnet-12345678
                      State: in-use
                      LinkNic:
                        VmId: i-12345678
                        LinkNicId: eni-attach-12345678
                        VmAccountId: '123456789012'
                        DeleteOnVmDeletion: true
                        DeviceNumber: 0
                        State: attached
                      IsSourceDestChecked: true
                      PrivateDnsName: ip-10-0-0-4.eu-west-2.compute.internal
                      Tags: []
                      Description: Primary network interface
                      AccountId: '123456789012'
                      SecurityGroups:
                      - SecurityGroupName: security-group-example
                        SecurityGroupId: sg-12345678
                      MacAddress: A1:B2:C3:D4:E5:F6
                      NetId: vpc-12345678
                      NicId: eni-12345678
                      PrivateIps:
                      - PrivateDnsName: ip-10-0-0-4.eu-west-2.compute.internal
                        PrivateIp: 10.0.0.4
                        IsPrimary: true
                ex3:
                  summary: Modifying the description of a NIC
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    Nic:
                      SubregionName: eu-west-2a
                      SubnetId: subnet-12345678
                      State: in-use
                      LinkNic:
                        VmId: i-12345678
                        LinkNicId: eni-attach-12345678
                        VmAccountId: '123456789012'
                        DeleteOnVmDeletion: true
                        DeviceNumber: 0
                        State: attached
                      IsSourceDestChecked: true
                      PrivateDnsName: ip-10-0-0-4.eu-west-2.compute.internal
                      Tags: []
                      Description: Example of description
                      AccountId: '123456789012'
                      SecurityGroups:
                      - SecurityGroupName: default
                        SecurityGroupId: sg-12345678
                      MacAddress: A1:B2:C3:D4:E5:F6
                      NetId: vpc-12345678
                      NicId: eni-12345678
                      PrivateIps:
                      - PrivateDnsName: ip-10-0-0-4.eu-west-2.compute.internal
                        PrivateIp: 10.0.0.4
                        IsPrimary: true
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Nic
  /UpdateRoute:
    post:
      description: |-
        Replaces an existing route within a route table in a Net.<br />
        You must specify one of the following elements as the target:<br /><br />

        * Net peering<br />
        * NAT virtual machine (VM)<br />
        * Internet service<br />
        * Virtual gateway<br />
        * NAT service<br />
        * Network interface card (NIC)<br /><br />

        The routing algorithm is based on the most specific match.
      operationId: UpdateRoute
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRouteRequest'
            examples:
              ex1:
                summary: Updating a route to a virtual gateway
                value:
                  RouteTableId: rtb-12345678
                  DestinationIpRange: 198.51.100.0/24
                  GatewayId: vgw-12345678
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateRouteResponse'
              examples:
                ex1:
                  summary: Updating a route to a virtual gateway
                  value:
                    RouteTable:
                      Routes:
                      - DestinationIpRange: 10.0.0.0/16
                        CreationMethod: CreateRouteTable
                        State: active
                      - GatewayId: vgw-12345678
                        DestinationIpRange: 198.51.100.0/24
                        CreationMethod: CreateRoute
                        State: active
                      LinkRouteTables:
                      - RouteTableId: rtb-12345678
                        Main: false
                        SubnetId: subnet-12345678
                        LinkRouteTableId: rtbassoc-12345678
                      NetId: vpc-12345678
                      Tags: []
                      RoutePropagatingVirtualGateways: []
                      RouteTableId: rtb-12345678
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Route
  /UpdateRoutePropagation:
    post:
      description: Configures the propagation of routes to a specified route table of a Net by a virtual gateway.
      operationId: UpdateRoutePropagation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRoutePropagationRequest'
            examples:
              ex1:
                value:
                  VirtualGatewayId: vgw-12345678
                  RouteTableId: rtb-12345678
                  Enable: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateRoutePropagationResponse'
              examples:
                ex1:
                  value:
                    RouteTable:
                      Routes:
                      - DestinationIpRange: 10.0.0.0/16
                        CreationMethod: CreateRouteTable
                        State: active
                      LinkRouteTables:
                      - RouteTableId: rtb-12345678
                        Main: true
                        LinkRouteTableId: rtbassoc-12345678
                      NetId: vpc-12345678
                      Tags: []
                      RoutePropagatingVirtualGateways:
                      - VirtualGatewayId: vgw-12345678
                      RouteTableId: rtb-12345678
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
      tags:
      - VirtualGateway
  /UpdateRouteTableLink:
    post:
      description: |-
        Replaces the route table associated with a specific Subnet in a Net with another one.<br />
        After the route table is replaced, the Subnet uses the routes in the new route table it is associated with.
      operationId: UpdateRouteTableLink
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRouteTableLinkRequest'
            examples:
              ex1:
                value:
                  LinkRouteTableId: rtbassoc-12345678
                  RouteTableId: rtb-12345678
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateRouteTableLinkResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    LinkRouteTableId: rtbassoc-12345678
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - RouteTable
  /UpdateServerCertificate:
    post:
      description: Modifies the name and/or the path of a specified server certificate.
      operationId: UpdateServerCertificate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateServerCertificateRequest'
            examples:
              ex1:
                value:
                  Name: server-cert-example
                  NewName: new-name
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateServerCertificateResponse'
              examples:
                ex1:
                  value:
                    ServerCertificate:
                      Path: /example/
                      Id: ABCDEFGHIJKLMNOPQRSTUVWXYZ1234
                      Name: new-name
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
      tags:
      - ServerCertificate
  /UpdateSnapshot:
    post:
      description: |-
        Modifies the permissions for a specified snapshot.<br />
        You must specify either the `Additions` or the `Removals` parameter.<br />
        After sharing a snapshot with an account, the other account can create a copy of it that they own. For more information about copying snapshots, see [CreateSnapshot](#createsnapshot).
      operationId: UpdateSnapshot
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSnapshotRequest'
            examples:
              ex1:
                summary: Adding permission
                value:
                  SnapshotId: snap-12345678
                  PermissionsToCreateVolume:
                    Additions:
                      AccountIds:
                      - '987654321098'
              ex2:
                summary: Removing permission
                value:
                  SnapshotId: snap-12345678
                  PermissionsToCreateVolume:
                    Removals:
                      AccountIds:
                      - '987654321098'
              ex3:
                summary: Making an image public to everyone
                value:
                  SnapshotId: snap-12345678
                  PermissionsToCreateVolume:
                    Additions:
                      GlobalPermission: true
              ex4:
                summary: Making an image private to everyone
                value:
                  SnapshotId: snap-12345678
                  PermissionsToCreateVolume:
                    Removals:
                      GlobalPermission: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateSnapshotResponse'
              examples:
                ex1:
                  summary: Adding permission
                  value:
                    Snapshot:
                      VolumeSize: 10
                      AccountId: '123456789012'
                      VolumeId: vol-12345678
                      CreationDate: '2010-10-01T12:34:56.789Z'
                      PermissionsToCreateVolume:
                        GlobalPermission: false
                        AccountIds:
                        - '987654321098'
                      Progress: 100
                      SnapshotId: snap-12345678
                      State: completed
                      Description: Snapshot created from a volume
                      Tags: []
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                ex2:
                  summary: Removing permission
                  value:
                    Snapshot:
                      VolumeSize: 10
                      AccountId: '123456789012'
                      VolumeId: vol-12345678
                      CreationDate: '2010-10-01T12:34:56.789Z'
                      PermissionsToCreateVolume:
                        GlobalPermission: false
                        AccountIds: []
                      Progress: 100
                      SnapshotId: snap-12345678
                      State: completed
                      Description: Snapshot created from a volume
                      Tags: []
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                ex3:
                  summary: Making an image public to everyone
                  value:
                    Snapshot:
                      VolumeSize: 10
                      AccountId: '123456789012'
                      VolumeId: vol-12345678
                      CreationDate: '2010-10-01T12:34:56.789Z'
                      PermissionsToCreateVolume:
                        GlobalPermission: true
                        AccountIds: []
                      Progress: 100
                      SnapshotId: snap-12345678
                      State: completed
                      Description: Snapshot created from a volume
                      Tags: []
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                ex4:
                  summary: Making an image private to everyone
                  value:
                    Snapshot:
                      VolumeSize: 10
                      AccountId: '123456789012'
                      VolumeId: vol-12345678
                      CreationDate: '2010-10-01T12:34:56.789Z'
                      PermissionsToCreateVolume:
                        GlobalPermission: false
                        AccountIds: []
                      Progress: 100
                      SnapshotId: snap-12345678
                      State: completed
                      Description: Snapshot created from a volume
                      Tags: []
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Snapshot
  /UpdateSubnet:
    post:
      description: Modifies the specified attribute of a Subnet.
      operationId: UpdateSubnet
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSubnetRequest'
            examples:
              ex1:
                value:
                  SubnetId: subnet-12345678
                  MapPublicIpOnLaunch: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateSubnetResponse'
              examples:
                ex1:
                  value:
                    Subnet:
                      Tags: []
                      SubregionName: eu-west-2a
                      SubnetId: subnet-12345678
                      AvailableIpsCount: 16379
                      IpRange: 10.0.0.0/18
                      MapPublicIpOnLaunch: true
                      State: available
                      NetId: vpc-12345678
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Subnet
  /UpdateUser:
    post:
      description: Modifies the name and/or the path of a specified EIM user.
      operationId: UpdateUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
            examples:
              ex1:
                value:
                  UserName: example-user
                  NewUserEmail: user@example.com
                  NewUserName: test-user
                  NewPath: /product/
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateUserResponse'
              examples:
                ex1:
                  value:
                    User:
                      CreationDate: 2010-10-01T12:34:56.789+0000
                      LastModificationDate: 2017-05-10T12:34:56.789+0000
                      UserEmail: user@example.com
                      UserName: test-user
                      UserId: ABCDEFGHIJKLMNOPQRSTUVWXYZ12345
                      Path: /product/
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
      tags:
      - User
  /UpdateUserGroup:
    post:
      description: Modifies the name and/or the path of a specified group.
      operationId: UpdateUserGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserGroupRequest'
            examples:
              ex1:
                value:
                  NewPath: /new-path/
                  NewUserGroupName: new-usergroup
                  Path: /example/
                  UserGroupName: example-usergroup
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateUserGroupResponse'
              examples:
                ex1:
                  value:
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                    UserGroup:
                      CreationDate: '2010-10-01T12:34:56.789Z'
                      LastModificationDate: '2010-10-01T12:34:56.789Z'
                      Name: new-usergroup
                      Orn: orn:ows:idauth::012345678910:usergroup/example/usergroup-example
                      Path: /new-path/
                      UserGroupId: ug-12345678
                    Users:
                    - CreationDate: '2010-10-01T12:34:56.789Z'
                      LastModificationDate: '2010-10-01T12:34:56.789Z'
                      Path: /example/
                      UserEmail: user@example.com
                      UserId: ABCDEFGHIJKLMNOPQRSTUVWXYZ12345
                      UserName: example-user
          description: The HTTP 200 response (OK).
      tags:
      - UserGroup
  /UpdateVm:
    post:
      description: |-
        Modifies the specified attributes of a virtual machine (VM).<br />
        You must stop the VM before modifying the following attributes:<br />
        * `NestedVirtualization`<br />
        * `Performance`<br />
        * `UserData`<br />
        * `VmType`

        To complete the update of secure boot, you need to do a stop/start of the VM. A simple restart is not sufficient, as the update is done when the VM goes through the stopped state. For the difference between stop/start and restart, see [About VM Lifecycle](https://docs.outscale.com/en/userguide/About-VM-Lifecycle.html).
      operationId: UpdateVm
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateVmRequest'
            examples:
              ex1:
                value:
                  VmId: i-12345678
                  VmType: tinav5.c2r2p2
              ex2:
                value:
                  VmId: i-12345678
                  UserData: ...
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateVmResponse'
              examples:
                ex1:
                  value:
                    Vm:
                      VmType: tinav5.c2r2p2
                      VmInitiatedShutdownBehavior: stop
                      State: stopped
                      StateReason: ''
                      RootDeviceType: ebs
                      RootDeviceName: /dev/sda1
                      IsSourceDestChecked: true
                      KeypairName: keypair-example
                      ImageId: ami-12345678
                      DeletionProtection: false
                      Architecture: x86_64
                      NestedVirtualization: false
                      BlockDeviceMappings:
                      - DeviceName: /dev/sda1
                        Bsu:
                          VolumeId: vol-12345678
                          State: attached
                          LinkDate: '2010-10-01T12:34:56.789Z'
                          DeleteOnVmDeletion: true
                      VmId: i-12345678
                      ReservationId: r-12345678
                      Hypervisor: xen
                      Placement:
                        Tenancy: default
                        SubregionName: eu-west-2a
                      ProductCodes:
                      - '0001'
                      CreationDate: '2010-10-01T12:34:56.789Z'
                      UserData: ''
                      SubnetId: subnet-12345678
                      PrivateIp: 10.0.0.4
                      SecurityGroups:
                      - SecurityGroupName: security-group-example
                        SecurityGroupId: sg-12345678
                      BsuOptimized: false
                      LaunchNumber: 0
                      NetId: vpc-12345678
                      Nics:
                      - SubnetId: subnet-12345678
                        State: in-use
                        LinkNic:
                          State: attached
                          DeviceNumber: 0
                          LinkNicId: eni-attach-12345678
                          DeleteOnVmDeletion: true
                        IsSourceDestChecked: true
                        PrivateDnsName: ip-10-0-0-4.eu-west-2.compute.internal
                        Description: Primary network interface
                        AccountId: '123456789012'
                        SecurityGroups:
                        - SecurityGroupName: security-group-example
                          SecurityGroupId: sg-12345678
                        MacAddress: A1:B2:C3:D4:E5:F6
                        NetId: vpc-12345678
                        NicId: eni-12345678
                        PrivateIps:
                        - PrivateDnsName: ip-10-0-0-4.eu-west-2.compute.internal
                          PrivateIp: 10.0.0.4
                          IsPrimary: true
                      Performance: high
                      Tags:
                      - Value: prod
                        Key: env
                      PrivateDnsName: ip-10-0-0-4.eu-west-2.compute.internal
                      ActionsOnNextBoot:
                        SecureBoot: none
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                ex2:
                  value:
                    Vm:
                      VmType: tinav5.c1r1p2
                      VmInitiatedShutdownBehavior: stop
                      State: stopped
                      StateReason: ''
                      RootDeviceType: ebs
                      RootDeviceName: /dev/sda1
                      IsSourceDestChecked: true
                      KeypairName: keypair-example
                      ImageId: ami-12345678
                      DeletionProtection: true
                      Architecture: x86_64
                      NestedVirtualization: false
                      BlockDeviceMappings:
                      - DeviceName: /dev/sda1
                        Bsu:
                          VolumeId: vol-12345678
                          State: attached
                          LinkDate: '2010-10-01T12:34:56.789Z'
                          DeleteOnVmDeletion: true
                      VmId: i-12345678
                      ReservationId: r-12345678
                      Hypervisor: xen
                      Placement:
                        Tenancy: default
                        SubregionName: eu-west-2a
                      ProductCodes:
                      - '0001'
                      CreationDate: '2010-10-01T12:34:56.789Z'
                      UserData: ...
                      SubnetId: subnet-12345678
                      PrivateIp: 10.0.0.4
                      SecurityGroups:
                      - SecurityGroupName: security-group-example
                        SecurityGroupId: sg-12345678
                      BsuOptimized: false
                      LaunchNumber: 0
                      NetId: vpc-12345678
                      Nics:
                      - SubnetId: subnet-12345678
                        State: in-use
                        LinkNic:
                          State: attached
                          DeviceNumber: 0
                          LinkNicId: eni-attach-12345678
                          DeleteOnVmDeletion: true
                        IsSourceDestChecked: true
                        PrivateDnsName: ip-10-0-0-4.eu-west-2.compute.internal
                        Description: Primary network interface
                        AccountId: '123456789012'
                        SecurityGroups:
                        - SecurityGroupName: security-group-example
                          SecurityGroupId: sg-12345678
                        MacAddress: A1:B2:C3:D4:E5:F6
                        NetId: vpc-12345678
                        NicId: eni-12345678
                        PrivateIps:
                        - PrivateDnsName: ip-10-0-0-4.eu-west-2.compute.internal
                          PrivateIp: 10.0.0.4
                          IsPrimary: true
                      Performance: high
                      Tags:
                      - Value: prod
                        Key: env
                      PrivateDnsName: ip-10-0-0-4.eu-west-2.compute.internal
                      ActionsOnNextBoot:
                        SecureBoot: none
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Vm
  /UpdateVmGroup:
    post:
      description: |-
        > [WARNING]<br />
        > This feature is currently under development and may not function properly.<br />

        Modifies the specified attributes of a group of virtual machines (VMs).
      operationId: UpdateVmGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateVmGroupRequest'
            examples:
              ex1:
                summary: Updating the name and description of a VM group
                value:
                  VmGroupId: vmgroup-12345678901234567890123456789012
                  VmGroupName: new-name
                  Description: New description of the VM group
              ex2:
                summary: Updating the VM template of a VM group
                value:
                  VmGroupId: vmgroup-12345678901234567890123456789012
                  VmTemplateId: vmtemplate-98765432109876543210987654321012
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateVmGroupResponse'
              examples:
                ex1:
                  value:
                    VmGroup:
                      VmTemplateId: vmtemplate-98765432109876543210987654321012
                      SecurityGroupIds:
                      - sg-12345678
                      VmIds: []
                      CreationDate: 2010-10-01T12:34:56.789+0000
                      VmCount: 2
                      VmGroupName: new-name
                      SubnetId: subnet-12345678
                      PositioningStrategy: attract
                      State: available
                      VmGroupId: vmgroup-12345678901234567890123456789012
                      Description: New description of the VM group
                      Tags: []
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - VmGroup
  /UpdateVmTemplate:
    post:
      description: |-
        > [WARNING]<br />
        > This feature is currently under development and may not function properly.<br />

        Modifies the specified attributes of a template of virtual machines (VMs).
      operationId: UpdateVmTemplate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateVmTemplateRequest'
            examples:
              ex1:
                value:
                  Description: The new description of the VM template
                  VmTemplateId: vmtemplate-98765432109876543210987654321012
                  VmTemplateName: second-name
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateVmTemplateResponse'
              examples:
                ex1:
                  value:
                    VmTemplate:
                      VmTemplateName: second-name
                      CpuPerformance: high
                      CreationDate: 2010-10-01T12:34:56.789+0000
                      CpuCores: 2
                      Tags: []
                      Description: The new description of the VM template
                      ImageId: ami-12345678
                      CpuGeneration: v4
                      VmTemplateId: vmtemplate-98765432109876543210987654321012
                      Ram: 2
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
      tags:
      - VmTemplate
  /UpdateVolume:
    post:
      description: |-
        Modifies the specified attributes of a volume.<br />
        Cold volumes are volumes that are attached to stopped or stopping VMs, or that are detached. Hot volumes are volumes that are attached to running VMs.<br /><br />

        **[NOTE]**<br />
        When the modification is not instantaneous, the response displays the previous value. You can use the [ReadVolumes](#readvolumes) method to see the new value.
      operationId: UpdateVolume
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateVolumeRequest'
            examples:
              ex1:
                summary: Updating the size of a volume
                value:
                  VolumeId: vol-12345678
                  Size: 50
              ex2:
                summary: Updating the type of a volume to io1
                value:
                  VolumeId: vol-12345678
                  VolumeType: io1
                  Iops: 200
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateVolumeResponse'
              examples:
                ex1:
                  summary: Updating the size of a volume
                  value:
                    Volume:
                      VolumeId: vol-12345678
                      Tags: []
                      VolumeType: gp2
                      SubregionName: eu-west-2a
                      State: available
                      CreationDate: '2010-10-01T12:34:56.789Z'
                      Iops: 100
                      LinkedVolumes: []
                      Size: 10
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
                ex2:
                  summary: Updating the type of a volume to io1
                  value:
                    Volume:
                      VolumeId: vol-12345678
                      Tags: []
                      VolumeType: io1
                      SubregionName: eu-west-2a
                      State: available
                      CreationDate: '2010-10-01T12:34:56.789Z'
                      Iops: 200
                      LinkedVolumes: []
                      Size: 10
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Volume
  /UpdateVpnConnection:
    post:
      description: Modifies the specified attributes of a VPN connection.
      operationId: UpdateVpnConnection
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateVpnConnectionRequest'
            examples:
              ex1:
                value:
                  VpnConnectionId: vpn-12345678
                  VpnOptions:
                    TunnelInsideIpRange: 169.254.254.22/30
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateVpnConnectionResponse'
              examples:
                ex1:
                  value:
                    VpnConnection:
                      VpnOptions:
                        TunnelInsideIpRange: 169.254.254.22/30
                      Routes: []
                      Tags: []
                      ClientGatewayConfiguration: ...
                      StaticRoutesOnly: true
                      VirtualGatewayId: vgw-12345678
                      ConnectionType: ipsec.1
                      ClientGatewayId: cgw-12345678
                      State: pending
                      VgwTelemetries:
                      - StateDescription: IPSEC IS DOWN
                        AcceptedRouteCount: 0
                        LastStateChangeDate: '2017-05-10T12:34:56.789Z'
                        OutsideIpAddress: 192.0.2.0
                      VpnConnectionId: vpn-12345678
                    ResponseContext:
                      RequestId: 0475ca1e-d0c5-441d-712a-da55a4175157
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - VpnConnection
security:
- ApiKeyAuth: []
servers:
- url: https://api.{region}.outscale.com/api/v1
  variables:
    region:
      default: eu-west-2
      enum:
      - ap-northeast-1
      - cloudgouv-eu-west-1
      - eu-west-2
      - us-east-2
      - us-west-1
